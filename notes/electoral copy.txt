const scripts = [
    "data/calendar.json",
    "data/demographics.json",
    "data/fundamentals.json",
    "data/results/data_house.json",
    "data/results/data_house_dem.json",
    "data/results/data_house_rep.json",
    "data/results/data_pres.json",
    "data/results/data_gov.json",
    "data/results/data_sen.json",
    "data/results/data_sen_sp.json",
    "data/results/data_sen_r.json",
    "data/results/data_sen_sp_r.json",
    "data/results/data_pres_house.json",
    "data/results/data_pres_d.json",
    "data/results/data_pres_cd.json",
    "data/results/data_pres_r.json",
    "data/results/data_sos.json",
    "data/results/data_sos_dem.json",
    "data/results/data_sos_rep.json",
    "data/results/data_gov_recall.json",
    "data/results/data_gov_lt.json",
    "data/results/data_gov_dem.json",
    "data/results/data_gov_rep.json",
    "data/results/data_sen_dem.json",
    "data/results/data_sen_rep.json",
    "data/results/data_supremecourt.json",
    "data/results/data_ballot.json",
    "data/results/data_ballot_abortion.json",
    "data/results/data_gov_lt_dem.json",
    "data/results/data_gov_lt_rep.json",
    "data/results/data_attorney_general.json",
    "data/results/data_state_senate.json",
    "data/results/data_state_house.json"
];

scripts.forEach(a => {const b = document.createElement('script'); b.src = a; document.body.appendChild(b);});

window.onload = function(){setTimeout(startUp, 10)};

var dataElement = document.getElementById("data");
var nationalMapElement = document.getElementById('nationalMap');
const states = document.getElementsByClassName("state");

var internationalNumberFormat = new Intl.NumberFormat('en-US'); var numF = new Intl.NumberFormat('en-US');

const numMap = {1:'One',2:'Two',3:'Three',4:'Four',5:'Five',6:'Six',7:'Seven',8:'Eight',9:'Nine',10:'Ten'};

var config = {
	"showDistrictBoxes2024": true
};

const candColors = {
    "box": {
        "d": "rgb(19,146,236)",
        "d1": "rgb(15,140,161)",
        "d2": "rgb(0,44,193)",
        "d3": "rgb(18,92,158)",
        "d4": "rgb(0,160,209)",
        "d5": "rgb(45,105,98)",
        "d6": "rgb(92,110,169)",
        "d7": "rgb(130,212,149)",
        "d8": "rgb(0,158,102)",
        "d9": "rgb(27,103,237)",
        "d10": "rgb(133,171,223)",
        "d11": "rgb(0,141,231)",
        "em": "rgb(133,61,204)",
        "g": "rgb(76,139,11)",
        "gw": "rgb(254,125,7)",
        "i": "rgb(133,61,204)",
        "l": "rgb(230,172,0)",
        "no": "rgb(140,98,187)",
        "o": "rgb(110,110,110)",
        "r": "rgb(223,32,45)",
        "rp": "rgb(133,61,204)",
        "u": "rgb(230,172,0)",
        "yes": "rgb(243,124,10)",
        "r1": "rgb(227, 54, 54)",
        "r2": "rgb(136, 7, 18)",
        "r3": "rgb(235, 76, 113)",
        "r4": "rgb(249, 115, 31)",
        "r5": "rgb(255, 128, 147)",
        "r6": "rgb(191, 8, 48)",
        "r7": "rgb(134, 39, 118)",
        "r8": "rgb(203, 129, 207)",
        "r9": "rgb(176, 67, 132)",
        "r10": "rgb(255, 107, 119)",
        "r11": "rgb(255, 206, 71)"
    },
    "text": {
        "d": "rgb(22,100,156)",
        "d1": "rgb(0,110,131)",
        "d2": "rgb(0,14,163)",
        "d3": "rgb(0,62,128)",
        "d4": "rgb(0,124,173)",
        "d5": "rgb(15,75,68)",
        "d6": "rgb(62,80,139)",
        "d7": "rgb(100,182,119)",
        "d8": "rgb(0,128,72)",
        "d9": "rgb(0,73,207)",
        "d10": "rgb(103,141,193)",
        "d11": "rgb(0,111,201)",
        "em": "rgb(79,36,122)",
        "g": "rgb(46,83,7)",
        "gw": "rgb(156,87,22)",
        "i": "rgb(89,22,156)",
        "l": "rgb(179,133,25)",
        "no": "rgb(82,40,138)",
        "o": "rgb(45,45,45)",
        "r": "rgb(156,22,40)",
        "rp": "rgb(79,36,122)",
        "u": "rgb(179,125,0)",
        "yes": "rgb(156,73,22)",
        "r1": "rgb(227, 54, 54)",
        "r2": "rgb(136, 7, 18)",
        "r3": "rgb(235, 76, 113)",
        "r4": "rgb(249, 115, 31)",
        "r5": "rgb(255, 128, 147)",
        "r6": "rgb(191, 8, 48)",
        "r7": "rgb(134, 39, 118)",
        "r8": "rgb(203, 129, 207)",
        "r9": "rgb(176, 67, 132)",
        "r10": "rgb(255, 107, 119)",
        "r11": "rgb(255, 206, 71)"
    }
}

var contests = {};

const zoom = d3.zoom()
	.interpolate(d3.interpolateZoom.rho(1.414))
	.scaleExtent([0.85, 100])
	.filter(function() {return event.type != "dblclick"})
	.on("zoom", zoomed)
	.on("end", function(){d3.select("#nationalMap").call(zoom)});

const zoomA = d3.zoom()
	.interpolate(d3.interpolateZoom.rho(0.6))
	.scaleExtent([0.85, 100])
	.filter(function() {return event.type != "dblclick"})
	.on("zoom", zoomed)
	.on("end", function(){d3.select("#nationalMap").call(zoomA)});

var svgWidth = calculateSvgWidth(100);

function calculateSvgWidth(z){
	var a = (800*z*window.innerWidth)/(83.5*window.innerHeight);
	return a;
}

d3.geoMercatorUsa = function() {
	return d3.geoMercator().center([-98.583333, 39.833333]).translate([992.6783104207782 * 0.753, 345]).scale(840 * 1.595);
}

d3.geoMercatorUsaAlaska = function() {
	return d3.geoMercator().center([-152.2782, 64.0685]).translate([992.6783104207782 * 0.32, 655]).scale(840 * 0.3);
}

d3.geoMercatorUsaHawaii = function() {
	return d3.geoMercator().center([-156.3737, 20.2927]).translate([992.6783104207782 * 0.56, 682]).scale(840 * 1.7);
}

var path = d3.geoPath(d3.geoMercatorUsa());
var svg = d3.select("#nationalMap");

svg.attr("viewBox", [0, 0, calculateSvgWidth(100), 800])
	.attr("width", calculateSvgWidth(100))
	.attr("height", 800);

var g = d3.select("#nationalMap").append("g").attr("id","mainG");

function startUp() {
	console.clear();
	console.log("Initialising...");
	dataElement.setAttribute("drag-status", "false");

	var selectedYear = d3.select("#data").attr("button-year");
	var selectedContest = d3.select("#data").attr("button-contest");
	var countyStatus = d3.select("#data").attr("button-county");
	var aheadStatus = d3.select("#data").attr("data-aheadvalue");

	if (selectedYear == null) {dataElement.setAttribute("button-year", Math.floor((new Date().getFullYear()+1) / 4) * 4)}
	if (selectedContest == null) {dataElement.setAttribute("button-contest", "PRESIDENT")}
	if (countyStatus == null) {dataElement.setAttribute("button-county", "false")}
	if (aheadStatus == null) {dataElement.setAttribute("data-aheadvalue", "ahead")}

// createDatabase();
	createYearButtons();
	createBoundaries();
	createHistoryPanels();

	var svg = d3.select("#nationalMap");

	dataElement.setAttribute("data-road270-party", "m");
	document.getElementById("button270-party-magic").classList = "partyButton clicked";

	clearInnerHTML('resultsBoxTopText');
	createPollClosingArrays();

	presCandidates["2024"]["rFirstName"] = "Donald"; presCandidates["2024"]["rSurname"] = "Trump";
	presCandidates["2024"]["gSurname"] = "Stein"; presCandidates["2024"]["gFirstName"] = "Jil";
	setTimeout(importElectionDataToday, 1000);
//	setInterval(importElectionData, 30000);
	generateHouseGroupBoxes();
//	set2020demWinners();
	createSenateWhatIf();
}

function initializeSortable(e) {
	var i = document.getElementById(e);
	new Sortable(i, {
		animation: 0,
		group: 'a',
		sort: false,
		swapThreshold: 1,
//		chosenClass: "sortable-a",
		ghostClass: "sortable-b",
		dragClass: "sortable-c",
		onAdd: function(e) {
			let a = e.item.parentNode.getElementsByTagName("span"), b = Array.prototype.slice.call(a);
			b.sort(function(a, b) {return a.innerHTML.localeCompare(b.innerHTML)});
			for (var i = 0; i < b.length; ++i) {e.item.parentNode.appendChild(b[i])}
		},
		onEnd: updateSenateWhatIf
	});
}

function updateSenateWhatIf() {
	let ctL = 28 + d3.select("#gridLeft").selectAll(".grid-square").size();
	let ctC = d3.select("#gridCenter").selectAll("*").size();
	let ctR = 39 + d3.select("#gridRight").selectAll(".grid-square").size();
	d3.selectAll(".g1").select(".tallyFig").html(ctL)
	d3.selectAll(".g2").select(".tallyFig").html(ctC)
	d3.selectAll(".g3").select(".tallyFig").html(ctR)
}

function createSenateWhatIf() {
	// CREATE SENATE WHAT IF
	initializeSortable('gridLeft');
	initializeSortable('gridCenter');
	initializeSortable('gridRight');

	let c = d3.select("#gridCenter"), a = c.selectAll("span").nodes(), b = Array.prototype.slice.call(a);
	b.sort(function(a, b) {return a.innerHTML.localeCompare(b.innerHTML)});
	b.forEach(function(i) {c.node().appendChild(i)})
}

function createProjections(){
	d3.json("data/ratings.json").then(function(data) {
		let r = data['2024']['P-G'];
		let s = Object.keys(r).sort((a, b) => electoralVotes[b]['2024'] - electoralVotes[a]['2024'] || a.localeCompare(b));

		d3.selectAll(".projGroup *").remove();
		s.forEach(a => {
			var tW = data_president[a]['w24'], wC = {"d":"blue","r":"red"}, tC = "projState ";
			if(tW){tC += wC[tW]}

			var thisState = d3.select("[data-rating='" + r[a] + "']").append("span").attr("class", tC);
			thisState.append("span").html(shortAbbreviation[a]);
			thisState.append("span").html(electoralVotes[a]['2024']);
		})
	})
}

function setHouseSVG() {
	const yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
	const otherYearDistricts = d3.selectAll(`.cd:not(.cd${yrShort})`);
	otherYearDistricts.each(function() {
		const district = d3.select(this).attr("data-district");
		d3.select(this).attr("id", `${yrShort}_${district}`).style("display", "none");
	});
}

function createBoundaries() {
	d3.json("assets/maps/outlines.topojson")
		.then(function(topo) {
			const pathFunctions = {
				Alaska: d3.geoPath(d3.geoMercatorUsaAlaska()),
				Hawaii: d3.geoPath(d3.geoMercatorUsaHawaii()),
				default: d3.geoPath(d3.geoMercatorUsa())
			};

			var statePaths = g.selectAll("path")
				.data(topojson.feature(topo, topo.objects.states).features)
				.enter()
				.append("path")
  				.attr("d", function(d) {
					const pathFunction = pathFunctions[d.properties.state] || pathFunctions.default;
					return pathFunction(d);
  				})
				.attr("class", "state")
				.on("click", a => clickedFunction(a.target))
				.attr("id", d => d.properties.state)
				.attr("data-region", "s")
				.attr("data-state", a => a.properties.state)
				.attr("data-statefips", a => a.properties.statefips)
				.attr("data-stateabbreviation", a => a.properties.stateabbreviation)
				.attr("data-centroid", function(d) {
					const a = pathFunctions[d.properties.state] || pathFunctions.default;
					return a.centroid(d);
  				})
				.raise();

			g.selectAll("paths")
				.data(topojson.feature(topo, topo.objects.counties).features)
				.enter()
				.append("path")
  				.attr("d", function(d) {
					const pathFunction = pathFunctions[d.properties.state] || pathFunctions.default;
					return pathFunction(d);
  				})
				.attr("class", "county")
				.on("click", a => clickedFunction(a.target))
				.attr("id", function(d) { var id = parseInt(d.properties.id); return id })
				.attr("data-region", "c")
				.attr("data-county", function(d) {return d.properties.county })
				.attr("data-countyname", function(d) {return d.properties.countyname })
				.attr("data-countytype", function(d) {return d.properties.countytype })
				.attr("data-state", function(d) {return d.properties.state })
				.attr("data-statefips", function(d) {return d.properties.statefips })
				.attr("data-stateabbreviation", a => a.properties.stateabbreviation)
				.attr("data-centroid", function(d) {
					const a = pathFunctions[d.properties.state] || pathFunctions.default;
					return a.centroid(d);
  				})
				.lower();

			g.selectAll("paths")
				.data(topojson.feature(topo, topo.objects.townships).features)
				.enter()
				.append("path")
				.attr("d", path)
				.on("click", function(event) {clickedFunction(event.target)})
				.attr("class", "township")
				.attr("id", function(d) {var id = parseInt(d.properties.id); return id})
				.attr("data-township", function(d) {return d.properties.township})
				.attr("data-countytype", function(d) {return d.properties.townshiptype})
				.attr("data-countyfips", function(d) {return d.properties.countyfips})
				.attr("data-state", function(d) {return d.properties.state })
				.attr("data-statefips", function(d) {return d.properties.statefips })
				.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});

			d3.selectAll('.state').raise();
			initialReset()

			d3.json("assets/maps/districts_old.topojson").then(function(topo) {
				g.selectAll()
					.data(topojson.feature(topo, topo.objects.districts).features)
					.enter()
					.append("path")
			  		.attr("d", function(d) {
						const pathF = pathFunctions[d.properties.state] || pathFunctions.default;
						return pathF(d);
  					})
					.on("click", function(event) { clickedFunction(event.target) })
					.attr("class", function(d) {return d.properties.cd })
					.attr("id", function(d) {return d.properties.district })
					.attr("data-district", function(d) {return d.properties.district })
					.attr("data-districtnumber", function(d) {return d.properties.districtnumber })
					.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge })
					.attr("data-state", function(d) {return d.properties.state })
					.attr("data-statefips", function(d) {return d.properties.statefips })
					.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});

			d3.json("assets/maps/districts_current.topojson").then(function(topo) {
				g.selectAll()
					.data(topojson.feature(topo, topo.objects.districts).features)
					.enter()
					.append("path")
			  		.attr("d", function(d) {
						const pathF = pathFunctions[d.properties.state] || pathFunctions.default;
						return pathF(d);
  					})
					.on("click", function(event) { clickedFunction(event.target) })
					.attr("class", function(d) {return d.properties.cd })
					.attr("id", function(d) {return d.properties.district })
					.attr("data-district", function(d) {return d.properties.district })
					.attr("data-districtnumber", function(d) {return d.properties.districtnumber })
					.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge })
					.attr("data-state", function(d) {return d.properties.state })
					.attr("data-statefips", function(d) {return d.properties.statefips})
					.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});

				createStateLeg();
				setHouseSVG();
				refreshFill();
				returnHome();
				createLabels();
			
				d3.select("#nationalMap").on("dblclick.zoom", null).call(zoom)
			
				g.node().appendChild(d3.select("#pathDrawn").node());
				console.clear();
				createEVBoxes();
			});
		});
	});
}

function createStateLeg() {
	d3.json("assets/maps/stateleg.topojson").then(function(topo) {
		g.selectAll()
			.data(topojson.feature(topo, topo.objects.hd).features)
				.enter()
				.append("path")
			  	.attr("d", function(d) {
					const pathF = d3.geoPath(d3.geoMercatorUsa());
					return pathF(d);
  				})
				.on("click", function(event) { clickedFunction(event.target) })
				.attr("class", function(d) {return d.properties.hd})
				.attr("id", function(d) {return "HD-" + d.properties.district})
				.attr("data-district", function(d) {return d.properties.district })
				.attr("data-districtnumber", function(d) {return d.properties.districtnumber })
				.attr("data-state", function(d) {return d.properties.state })
				.attr("data-statefips", function(d) {return d.properties.statefips })
				.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});
		g.selectAll()
			.data(topojson.feature(topo, topo.objects.sd).features)
				.enter()
				.append("path")
			  	.attr("d", function(d) {
					return d3.geoPath(d3.geoMercatorUsa())(d);
  				})
				.on("click", function(event) { clickedFunction(event.target) })
				.attr("class", function(d) {return d.properties.sd})
				.attr("id", function(d) {return "SD-" + d.properties.district})
				.attr("data-district", function(d) {return d.properties.district })
				.attr("data-districtnumber", function(d) {return d.properties.districtnumber })
				.attr("data-state", function(d) {return d.properties.state })
				.attr("data-statefips", function(d) {return d.properties.statefips })
				.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});
			});
}

function createHouse() {
		d3.json("assets/maps/districts_historical.topojson").then(function(topo) {
			const pathFunctions = {
				Alaska: d3.geoPath(d3.geoMercatorUsaAlaska()),
				Hawaii: d3.geoPath(d3.geoMercatorUsaHawaii()),
				default: d3.geoPath(d3.geoMercatorUsa())
			};
				g.selectAll()
					.data(topojson.feature(topo, topo.objects.districts).features)
					.enter()
					.append("path")
			  		.attr("d", function(d) {
						const pathF = pathFunctions[d.properties.state] || pathFunctions.default;
						return pathF(d);
  					})
					.on("click", function(event) { clickedFunction(event.target) })
					.attr("class", function(d) {return d.properties.cd })
					.attr("id", function(d) {return d.properties.district })
					.attr("data-district", function(d) {return d.properties.district })
					.attr("data-districtnumber", function(d) {return d.properties.districtnumber })
					.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge })
					.attr("data-state", function(d) {return d.properties.state })
					.attr("data-statefips", function(d) {return d.properties.statefips })
					.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});
})
}

function zoomed(event) {
	d3.select("svg").on("mousedown.zoom", null);

	const {transform} = event;
	const cScale = transform.k;
	g.attr("transform", transform)
	g.selectAll("circle").attr("r", 5 / cScale)

	g.selectAll(".labelText")
		.attr("transform", function() {
			var scale = 6.66 / cScale - 1;
			var x = - +this.getAttribute("x") * scale, y = - +this.getAttribute("y") * scale;
			switch(this.getAttribute("data-label_pos")) {
				case "T": y -= 18 / cScale; break;
				case "B": y += 24 / cScale; break;
				case "L": x -= 12 / cScale; break;
				case "R": x += 12 / cScale; break;
			}
			return `translate(${x},${y}) scale(${6.66/cScale})`;
		})

	if(cScale < 2) {
		g.selectAll(".labelText").style("opacity", function() {return cScale - 1})
		g.selectAll("circle").style("opacity", function() {return cScale - 1})
	} else {
		g.selectAll("circle").style("opacity", 1);
		g.selectAll(".labelText").style("opacity", 1);
	}
}

function createHouseOrigi() {
	console.log("Creating historical congressional district paths");
	var districtFiles = ["assets/maps/district1.topojson", "assets/maps/district2.topojson", "assets/maps/district3.topojson", "assets/maps/district4.topojson",
		"assets/maps/district5.topojson", "assets/maps/district6.topojson", "assets/maps/district7.topojson", "assets/maps/district8.topojson",
		"assets/maps/district9.topojson"];

	var path = d3.geoPath(d3.geoMercatorUsa());
	var pathAlaska = d3.geoPath(d3.geoMercatorUsaAlaska());
	var pathHawaii = d3.geoPath(d3.geoMercatorUsaHawaii());

	districtFiles.forEach(function(url) {
		var objectName = url.split("/").pop().split(".")[0];

		d3.json(url)
			.then(function(topo) {
				var geojson = topojson.feature(topo, topo.objects[objectName]);
				var cdPaths = g.selectAll()
					.data(geojson.features)
					.enter()
					.append("path")
					.attr("d", function(d) {
							if (d.properties.state == "Alaska") {
								return pathAlaska(d);
							} else if (d.properties.state == "Hawaii") {
								return pathHawaii(d);
							} else {
								return path(d);
							}
						})
					.on("click", function(event) {clickedFunction(event.target)})
					.attr("class", function(d) {return d.properties.cd})
					.attr("id", function(d) {return d.properties.district})
					.attr("data-district", function(d) {return d.properties.district})
					.attr("data-districtnumber", function(d) {return d.properties.districtnumber})
					.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge})
					.attr("data-state", function(d) {return d.properties.state})
					.attr("data-statefips", function(d) {return d.properties.statefips})
					.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});
				console.log("Created CD paths from file " + objectName.slice(-1));
			});
	});
}

function createHouseAlt() {
	var districtFiles = ["assets/maps/district1.topojson", "assets/maps/district2.topojson", "assets/maps/district3.topojson", "assets/maps/district4.topojson",
		"assets/maps/district5.topojson", "assets/maps/district6.topojson", "assets/maps/district7.topojson", "assets/maps/district8.topojson",
		"assets/maps/district9.topojson"];

	var batchSize = 2; var batchIndex = 0; var features = [];

	function generatePaths() {
		var path = d3.geoPath(d3.geoMercatorUsa());
		var pathAlaska = d3.geoPath(d3.geoMercatorUsaAlaska());
		var pathHawaii = d3.geoPath(d3.geoMercatorUsaHawaii());

		var cdPaths = g.selectAll()
			.data(d3.merge(features.slice(batchIndex, batchIndex + batchSize).map(function(d) {return d.features})))
			.enter()
			.append("path")
			.attr("d", function(d) {
				if (d.properties.state == "Alaska") {return pathAlaska(d);
				} else if (d.properties.state == "Hawaii") {return pathHawaii(d);
				} else {return path(d);}
			})
			.on("click", function(event) {clickedFunction(event.target)})
			.attr("class", function(d) {return d.properties.cd})
			.attr("id", function(d) {return d.properties.district})
			.attr("data-district", function(d) {return d.properties.district})
			.attr("data-districtnumber", function(d) {return d.properties.districtnumber})
			.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge})
			.attr("data-state", function(d) {return d.properties.state})
			.attr("data-statefips", function(d) {return d.properties.statefips})
			.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});

		console.log("Created CD paths batch "+(batchIndex/batchSize + 1)+" of "+Math.ceil(features.length / batchSize));
		batchIndex += batchSize;

		if (batchIndex < features.length) {generatePaths()} else {setHouseSVG(); houseListeners()}
	}

	Promise.all(districtFiles.map(url => d3.json(url)))
		.then(function(data) {
			features = data.map(function(topo, i) {
				var objectName = districtFiles[i].split("/").pop().split(".")[0];
				return topojson.feature(topo, topo.objects[objectName]);
			});
			generatePaths();
		});
}

function houseListeners() {
	var countyPaths = document.querySelectorAll('.cd');
	countyPaths.forEach(path => {
		path.addEventListener('mousedown', (event) => {
			clickStartTime = new Date().getTime();
			dataElement.setAttribute("drag-status", "true")
		});
		path.addEventListener('mouseup', (event) => {
			const clickDuration = new Date().getTime() - clickStartTime;
			if(clickDuration > 250) {
				event.preventDefault();
				dataElement.setAttribute("drag-status", "true")
			} else {
				dataElement.setAttribute("drag-status", "false")
			}
		});
	});
}

function createLabels() {
	var proj = d3.geoMercator().center([-98.583333, 39.833333]).translate([992.6783104207782 * 0.753, 345]).scale(840 * 1.595);
	var projAlaska = d3.geoMercator().center([-152.2782, 64.0685]).translate([992.6783104207782 * 0.32, 655]).scale(840 * 0.3);
	var projHawaii =  d3.geoMercator().center([-156.3737, 20.2927]).translate([992.6783104207782 * 0.56, 682]).scale(840*1.7);

	d3.json("assets/maps/cities.geojson")
		.then(function(data) {
			g.selectAll("circle")
				.data(data.features)
				.enter()
				.append("circle")
				.attr("class", "label")
				.attr("r", 5)
				.style("opacity", 0)
				.attr("cx", function(d) {
					var projection;
					switch (d.p.fips) {
						case "02": projection = projAlaska; break;
						case "15": projection = projHawaii; break;
						default: projection = proj; break;
    					}
					return projection(d.coordinates)[0];
				})
				.attr("cy", function(d) {
					var projection;
					switch (d.p.fips) {
						case "02": projection = projAlaska; break;
						case "15": projection = projHawaii; break;
						default: projection = proj; break;
    					}
					return projection(d.coordinates)[1]
				})
				.attr("data-state", function(d) {return fipsState[parseInt(d.p.fips)]});

			g.selectAll("text")
				.data(data.features)
				.enter()
				.append("text")
				.attr("text-anchor", "middle")
				.attr("alignment-baseline", "middle")
				.html(function(d) {return d.p.title;})
				.attr("class", "label labelText")
				.attr("x", function(d) {
					var projection;
					switch (d.p.fips) {
						case "02": projection = projAlaska; break;
						case "15": projection = projHawaii; break;
						default: projection = proj; break;
    					}
					return projection(d.coordinates)[0];
				})
				.attr("y", function(d) {
					var projection;
					switch (d.p.fips) {
						case "02": projection = projAlaska; break;
						case "15": projection = projHawaii; break;
						default: projection = proj; break;
    					}
					return projection(d.coordinates)[1]
				})
				.attr("data-city", function(d) {return d.p.title})
				.attr("data-statefips", function(d) {return d.p.fips})
				.attr("data-state", function(d) {return fipsState[parseInt(d.p.fips)]})
				.attr("data-fips", function(d) {return d.p.fips})
				.attr("data-label_pos", function(d) {return d.p.pos})
				.attr("data-inside", function(d) {return d.p.inside});

			establishPointLabels();
		});
}

function createHistoryPanels() {
	var d = [{id:"One"},{id:"Two"},{id:"Three"},{id:"Four"}];
	var historyPanel = d3.select("#historyPanel")
		.selectAll("div").data(d).enter()
		.append("div").attr("id", t => `historyPanel${t.id}`).attr("class", "historyPanel");

	var historyPanels = d3.selectAll(".historyPanel");
	historyPanels.append("div").attr("id", t => `historyPanel${t.id}Title`).attr("class", "historyPanelTitle");

	for (let i = 1; i < 4; i++) {
		historyPanels.append('div')
			.attr('id', d => `historyPanel${d.id}Cand${i}`)
			.attr('class', 'historyPanelCand');
	}

	d3.selectAll(".historyPanelTitle")
		.append("span")
		.attr("id", function() {return d3.select(this.parentNode.parentNode).attr("id") + "Year"})
		.attr("class", "historyYear");

	d3.selectAll(".historyPanelTitle")
		.append("span")
		.attr("id", function() {return d3.select(this.parentNode.parentNode).attr("id") + "Contest"})
		.attr("class", "historyMargin");

	d3.selectAll(".historyPanelTitle")
		.append("span")
		.attr("id", function() {return d3.select(this.parentNode.parentNode).attr("id") + "Total"})
		.attr("class", "historyTotal");

	var pCand = d3.selectAll(".historyPanelCand");
	pCand
		.append("span")
		.attr("id", function() {return d3.select(this.parentNode).attr("id") + "Name"})
		.attr("class", "historyCandName");

	pCand
		.append("span")
		.attr("id", function() {return d3.select(this.parentNode).attr("id") + "Perc"})
		.attr("class", "historyCandPerc");

	pCand
		.append("span")
		.attr("id", function() {return d3.select(this.parentNode).attr("id") + "Vote"})
		.attr("class", "historyCandVote");
}

function createYearButtons() {
	const t = d3.select("#controlBarYear"); const tY = new Date().getFullYear();
	for (let n = tY+2; n > 1918; n--) {
		t.append("span")
			.attr("id", "buttonYear" + n)
			.attr("class", "controlButton yearButton")
			.on("click", clickButtonYear)
			.style("display", n > tY+1 ? "none" : n % 4 !== 0 ? "none" : null)
			.html(n);
	}

	const tPY = Math.floor(tY / 4) * 4;
	dataElement.setAttribute("button-year", tPY);
	d3.select("#buttonYear" + tPY).attr("class", "yearButton controlButton controlButtonSelected");
	window.buttonsYear = document.querySelectorAll('[id^="buttonYear"]');
}

function houseListeners() {
	var countyPaths = document.querySelectorAll('.cd');
	countyPaths.forEach(path => {
		path.addEventListener('mousedown', (event) => {
			clickStartTime = new Date().getTime();
			dataElement.setAttribute("drag-status", "true")
		});
		path.addEventListener('mouseup', (event) => {
			const clickDuration = new Date().getTime() - clickStartTime;
			if(clickDuration > 250) {
				event.preventDefault();
				dataElement.setAttribute("drag-status", "true")
			} else {
				dataElement.setAttribute("drag-status", "false")
			}
		});
	});
}

function sevenPM() {

	data_house['2024-CO-04'] = {};
	data_house['2024-CO-04']['cand1_party'] = "r";
	data_house['2024-CO-04']['cand2_party'] = "d";
	data_house['2024-CO-04']['cand1_firstname'] = "r";
	data_house['2024-CO-04']['cand2_firstname'] = "r";
	data_house['2024-CO-04']['cand1_lastname'] = "r";
	data_house['2024-CO-04']['cand2_lastname'] = "r";
	data_house['2024-CO-04']['cand1_vote'] = 250;
	data_house['2024-CO-04']['cand2_vote'] = 700;
	data_house['2024-CO-04']['total_vote'] = 1000;
	data_house['2024-CO-04']['winner'] = "";

	data_president['Indiana']['w24'] = "r";
	data_president['Tennessee']['w24'] = "";
	data_president['Virginia']['w24'] = "d";

	data_president['13121']['w24'] = "r";
	data_president['13121']['t24'] = 30;
	data_president['13121']['d24'] = 14;
	data_president['13121']['r24'] = 15;

	data_president['Kentucky']['w24'] = "r";
	data_president['Kentucky']['t24'] = 0;
	data_president['Kentucky']['d24'] = 0;
	data_president['Kentucky']['r24'] = 0;

	data_president['South Carolina']['w24'] = "r";
	data_president['West Virginia']['w24'] = "r";
	data_president['Vermont']['w24'] = "d"

	data_president['Tennessee']['t24'] = 27;
	data_president['Tennessee']['d24'] = 14;
	data_president['Tennessee']['r24'] = 13;
	data_president['Tennessee']['reporting'] = 1;

	data_sen['2024-Indiana']['winner'] = "r";
	data_sen['2024-Vermont']['winner'] = "i";
	data_sen['2024-Virginia']['winner'] = "d";

	data_gov['2024-Indiana']['winner'] = "r";
	data_gov['2024-Vermont']['winner'] = "r";

//	data_sen['2024-California']['winner'] = "d";

	data_president['47037']['t24'] = 0;
	data_president['47037']['d24'] = 0;
	data_president['47037']['r24'] = 0;
	data_president['47037']['w24'] = "";
	data_president['47037']['reporting'] = 13;

	data_president['Georgia']['t24'] = 7;
	data_president['Georgia']['r24'] = 6;
	data_president['Georgia']['d24'] = 1;

	data_president['Alabama']['t24'] = 1053;
	data_president['Alabama']['d24'] = 616;
	data_president['Alabama']['r24'] = 429;

	data_president['Florida']['t24'] = 7;
	data_president['Florida']['d24'] = 6;
	data_president['Florida']['r24'] = 1;
	getResults(); refreshFill();
}

function eightPM() {
	data_house['2024-KY-03']['winner'] = "d";
	data_house['2024-PA-14']['winner'] = "r";
	data_house['2024-PA-14']['gain'] = 1;
	data_house['2024-KY-05']['winner'] = "r";
	data_president['Illinois']['w24'] = "d";
	data_president['New Jersey']['w24'] = "d";
	data_president['Massachusetts']['w24'] = "d";
	data_president['Maryland']['w24'] = "d";
	data_president['Connecticut']['w24'] = "d";
	data_president['Rhode Island']['w24'] = "d";
	data_president['Delaware']['w24'] = "d";
	data_president['District of Columbia']['w24'] = "d";
	data_president['Maine']['w24'] = "d";

	data_sen['2024-Delaware']['winner'] = "d";
	data_sen['2024-Massachusetts']['winner'] = "d";
	data_sen['2024-Maryland']['winner'] = "d";
	data_sen['2024-Connecticut']['winner'] = "d";
	data_sen['2024-Rhode Island']['winner'] = "d";
	data_sen['2024-Maine']['winner'] = "i";
	data_sen['2024-Tennessee']['winner'] = "r";
	data_sen['2024-New Jersey']['winner'] = "d";

	data_gov['2024-Delaware']['winner'] = "d";
	data_gov['2024-Missouri']['winner'] = "r";
	data_gov['2024-New Hampshire']['winner'] = "r";

	data_president['Georgia']['t24'] = 7;
	data_president['Georgia']['d24'] = 6;
	data_president['Georgia']['r24'] = 1;

	data_president['11001']['w24'] = "d";
	data_president['Alabama']['reporting'] = 1;
	data_president['District of Columbia']['t24'] = 335818;
	data_president['District of Columbia']['d24'] = 317323;
	data_president['District of Columbia']['r24'] = 18586;

	data_president['Missouri']['w24'] = "r";
	data_president['Mississippi']['w24'] = "r";
	data_president['Alabama']['w24'] = "r";
	data_president['Oklahoma']['w24'] = "r";

	data_president['Tennessee']['w24'] = "r";
	data_president['Tennessee']['t24'] = 27;
	data_president['Tennessee']['d24'] = 14;
	data_president['Tennessee']['r24'] = 13;

	data_president['Florida']['t24'] = 7;
	data_president['Florida']['r24'] = 6;
	data_president['Florida']['d24'] = 1;

	data_president['Michigan']['t24'] = 105;
	data_president['Michigan']['r24'] = 61;
	data_president['Michigan']['d24'] = 42;

	data_president['47037']['t24'] = 27;
	data_president['47037']['d24'] = 14;
	data_president['47037']['r24'] = 13;
	data_president['47037']['w24'] = "d";
	data_president['47037']['reporting'] = 82;

	getResults(); refreshFill();
}

function ninePM() {
	data_president['1057']['t24'] = 1053;
	data_president['1057']['d24'] = 616;
	data_president['1057']['r24'] = 429;
	data_president['1057']['w24'] = "d";

	data_sen['2024-New York']['winner'] = "d";
	data_sen['2024-New Jersey']['winner'] = "d";
	data_sen['2024-Minnesota']['winner'] = "d";
	data_sen['2024-Pennsylvania']['winner'] = "d";
	data_sen['2024-North Dakota']['winner'] = "r";
	data_sen['2024-Nebraska']['winner'] = "r";
	data_sen['2024-Wyoming']['winner'] = "r";
	data_sen['2024-New Mexico']['winner'] = "d";

	data_president['Florida']['w24'] = "r";
	data_president['New Hampshire']['w24'] = "d";

	data_president['Georgia']['t24'] = 7;
	data_president['Georgia']['r24'] = 6;
	data_president['Georgia']['d24'] = 1;

	data_president['Michigan']['t24'] = 1053;
	data_president['Michigan']['r24'] = 616;
	data_president['Michigan']['d24'] = 429;
	data_president['Michigan']['reporting'] = 1;

	data_president['Pennsylvania']['t24'] = 7;
	data_president['Pennsylvania']['d24'] = 6;
	data_president['Pennsylvania']['r24'] = 1;

	data_president['North Carolina']['t24'] = 7;
	data_president['North Carolina']['d24'] = 6;
	data_president['North Carolina']['r24'] = 1;

	data_president['Iowa']['t24'] = 7;
	data_president['Iowa']['r24'] = 6;
	data_president['Iowa']['d24'] = 1;

	data_president['New York']['w24'] = "d";
	data_president['Colorado']['w24'] = "d";

	data_president['Louisiana']['w24'] = "r";
	data_president['North Dakota']['w24'] = "r";
	data_president['South Dakota']['w24'] = "r";
	data_president['Kansas']['w24'] = "r";
	data_president['Nebraska']['w24'] = "r";
	data_president['Wyoming']['w24'] = "r";
	data_president['Arkansas']['w24'] = "r";

	getResults(); refreshFill();
}

function setCSScolors() {

// 	STATE COLORS HAVE L (HSL) VALUE OF 0.45

// 	STATE NOT SELECT COLORS HAVE L (HSL) VALUE OF 0.27
	var stylesheet = document.styleSheets[0];
	var boxColorFills = {}; var textColorFills = {};
	for (let key in candColors) {
		if (candColors.hasOwnProperty(key)) {
			var thisParty = key; var boxColor = candColors[key];
			var fillColor = darkenColor(boxColor, 0.14);
			var textColor = darkenColor(fillColor, 0.14);
			var notSelectedColor = darkenColor(fillColor, 0.1);

			boxColorFills[key] = boxColor; textColorFills[key] = textColor;

			if (candColorClass[key]) {var thisParty = candColorClass[key];}
			var fillTest = "rgb(255,255,255)";
			setInnerHTML('headingTextSubtitle', fillColor)
			var fillClass = key + "State";
			stylesheet.insertRule(`.${fillClass} {fill: ${fillColor}}`);
		}
	}
}

function darkenColor(color, amount) {
	const delta = Math.round(amount * 255);
	const channels = color.match(/\d+/g).map(Number);
	const darkened = channels.map(channel => Math.max(0, channel - delta));
	return `rgb(${darkened.join(", ")})`;
}

function hideResults(){
	d3.select("#results").classed("hidden", true)
}

function showResults(){
	d3.select("#results").classed("hidden", false);
	d3.select("#resultsCandidates").property("scrollTop", 0);
}

function plural(c, n){return `${n}${c !== 1 ? 's' : ''}`}

d3.selectAll('.resultsHouseButton').on('click', houseButtons);

function houseButtons(){
	d3.selectAll('.resultsHouseButton').classed('selected', false);
	d3.select(this).classed('selected', true);

	var b = this.textContent; var text, suffix;
	switch (b) {
		case "AHD": text = "Leading the vote"; break;
		case "CLD": text = "Called Races"; break;
		case "UCD": text = "Uncalled Races"; break;
	}

	d3.select("#resultsBoxHouseHeadingText").html(text);
}

function getAttr(e, a){
	return document.getElementById(e).getAttribute(a);
}

function getResults(contest) {
	if (contest == null) {var contest = "president"}
	var selectedYear = d3.select("#data").attr("button-year");
	var selectedContest = d3.select("#data").attr("button-contest");
	var clickLevel = d3.select("#data").attr("data-level");
	var clicked = d3.select("#data").attr("last-clicked");

	if(d3.select("#headingTextContest").html() == ""){updateContestText(); scaleHeadingText();}

	if(selectedContest == "PRESIDENT BY CD" && clicked !== "United States"){
		var clickedState = getAttr(clicked, "data-stateabbreviation");
		if(clickedState == undefined){return}
		var clickedCD = document.getElementById(clicked).getAttribute("data-districtnumber");
		var dataResultsPCD = data_pres_house[selectedYear][clickedState][clickedCD];
	}

	if(selectedContest == "PRESIDENT BY CD" && clicked == "United States"){
		var dataResultsPCD = data_pres_house[selectedYear]['United States'];
		reorderDistrictBox();
	}

	if(selectedYear >= new Date().getFullYear()){
		reorderDistrictBox();
		var reportingDisplay = "initial"
	} else {
		var reportingDisplay = "none"
	}

	d3.select("#headingReportingText").style("display", reportingDisplay)
	if(selectedContest == "HOUSE" && selectedYear == "2024" && clicked == "United States"){
		hideResults()
	} else {
		if(clicked !== "United States" && dataElement.getAttribute("button-road270") !== "true"){
			if(selectedContest !== "HOUSE"){
				showResults()
			}
		}
	}

	if (selectedYear == null || selectedContest == null) {
		dataElement.setAttribute("button-year", "2024");
		dataElement.setAttribute("button-contest", "PRESIDENT");
	}

	var dataResults, dataFile;

	switch (selectedContest) {
		case "GOVERNOR": dataFile = data_gov, dataResults = data_gov[selectedYear + '-' + clicked];  break;
		case "HOUSE": var dataResults = data_house[selectedYear + '-' + clicked]; var dataFile = data_house; break;
		case "SENATE": var dataResults = data_sen[selectedYear + '-' + clicked]; var dataFile = data_sen; break;
		case "SENATE SPECIAL": var dataFile = data_sen_sp; break;
		case "SENATE RUNOFF": var dataFile = data_sen_r; break;
		case "SENATE SPECIAL RUNOFF": var dataFile = data_sen_sp_r; break;
		case "DEM PRESIDENT": var dataFile = data_president_dem; break;
		case "GOP PRESIDENT": var dataFile = data_president_rep; break;
		case "SECRETARY OF STATE": var dataFile = data_sos; break;
		case "GOVERNOR RECALL": var dataFile = data_gov_recall; break;
		case "LIEUTENANT GOVERNOR": var dataFile = data_gov_lt; break;
		case "GOVERNOR DEM": var dataFile = data_gov_dem; break;
		case "GOVERNOR REP": var dataFile = data_gov_rep; break;
		case "SENATE DEM": var dataFile = data_sen_dem; break;
		case "SENATE REP": var dataFile = data_sen_rep; break;
		case "D-HOUSE": var dataFile = data_house_dem; break;
		case "R-HOUSE": var dataFile = data_house_rep; break;
		case "SECRETARY OF STATE DEM": var dataFile = data_sos_dem; break;
		case "SECRETARY OF STATE REP": var dataFile = data_sos_rep; break;
		case "ATTORNEY GENERAL": var dataFile = data_attorney_general; break;
		case "LIEUTENANT GOVERNOR DEM": var dataFile = data_gov_lt_dem; break;
		case "LIEUTENANT GOVERNOR REP": var dataFile = data_gov_lt_rep; break;
		case "SUPREME COURT JUSTICE": var dataFile = data_supreme_court; break;
		case "SUPERIOR COURT": var dataFile = data_superior_court; break;
		case "BALLOT MEASURE": var dataFile = data_ballot; break;
		case "BALLOT MEASURE ABORTION": var dataFile = data_ballot_abortion; break;
		case "STATE HOUSE": var dataFile = data_state_house; break;
		case "STATE SENATE": var dataFile = data_state_senate; break;
	}

	switch (selectedContest) {
		case "PRESIDENT": var dataResults = data_president[clicked]; break;
		case "PRESIDENT BY CD": var dataResults = dataResultsPCD; break;
		case "SENATE SPECIAL": var dataResults = data_sen_sp[selectedYear + '-' + clicked]; break;
		case "SENATE RUNOFF": var dataResults = data_sen_r[selectedYear + '-' + clicked]; break;
		case "SENATE SPECIAL RUNOFF": var dataResults = data_sen_sp_r[selectedYear + '-' + clicked]; break;
		case "DEM PRESIDENT": var dataResults = data_president_dem[selectedYear + '-' + clicked]; break;
		case "GOP PRESIDENT": var dataResults = data_president_rep[selectedYear + '-' + clicked]; break;
		case "SECRETARY OF STATE": var dataResults = data_sos[selectedYear + '-' + clicked]; break;
		case "GOVERNOR RECALL": var dataResults = data_gov_recall[selectedYear + '-' + clicked]; break;
		case "LIEUTENANT GOVERNOR": var dataResults = data_gov_lt[selectedYear + '-' + clicked]; break;
		case "GOVERNOR DEM": var dataResults = data_gov_dem[selectedYear + '-' + clicked]; break;
		case "GOVERNOR REP": var dataResults = data_gov_rep[selectedYear + '-' + clicked]; break;
		case "SENATE DEM": var dataResults = data_sen_dem[selectedYear + '-' + clicked]; break;
		case "SENATE REP": var dataResults = data_sen_rep[selectedYear + '-' + clicked]; break;
		case "SECRETARY OF STATE DEM": var dataResults = data_sos_dem[selectedYear + '-' + clicked]; break;
		case "SECRETARY OF STATE REP": var dataResults = data_sos_rep[selectedYear + '-' + clicked]; break;
		case "ATTORNEY GENERAL": var dataResults = data_attorney_general[selectedYear + '-' + clicked]; break;
		case "LIEUTENANT GOVERNOR DEM": var dataResults = data_gov_lt_dem[selectedYear + '-' + clicked]; break;
		case "LIEUTENANT GOVERNOR REP": var dataResults = data_gov_lt_rep[selectedYear + '-' + clicked]; break;
		case "D-HOUSE": var dataResults = data_house_dem[selectedYear + '-' + clicked]; break;
		case "R-HOUSE": var dataResults = data_house_rep[selectedYear + '-' + clicked]; break;
		case "SUPREME COURT JUSTICE": var dataResults = data_supreme_court[selectedYear + '-' + clicked]; break; 
		case "SUPERIOR COURT": var dataResults = data_superior_court[selectedYear + '-' + clicked]; break; 
		case "BALLOT MEASURE": var dataResults = data_ballot[selectedYear + '-' + clicked]; break;
		case "BALLOT MEASURE ABORTION": var dataResults = data_ballot_abortion[selectedYear + '-' + clicked]; break;
		case "STATE HOUSE": var dataResults = data_state_house[selectedYear + '-' + clicked]; break;
		case "STATE SENATE": var dataResults = data_state_senate[selectedYear + '-' + clicked]; break;
	}

	var shortYear = selectedYear.slice(-2).toString();
	var vote = []; var party = ['d','r'];

	if (selectedContest == "HOUSE") {
		var wCount = {"d":0,"r":0}, gainCounts = {"d":0,"r":0}; var reportingCount = 0, gainCount = 0;
		const abbrev = d3.select("#data").attr("data-stateabbreviation");
		for (const cd in data_house) {
			if(!abbrev || cd.substring(5,7) !== abbrev){continue}
			if(cd.startsWith(selectedYear + "-") && cd.length == 10 && !/\d/.test(cd.charAt(5))) {
				let w = dataFile[cd].winner, gain = dataFile[cd].gain;
				wCount["total"]++;
				if(dataFile[cd].total_vote > 0){reportingCount++}
				if(wCount.hasOwnProperty(w)) {wCount[w]++; if(gain == 1){gainCounts[w]++; gainCount++;}}
			}
		}

		setInnerHTML("resultsBoxHouseTotalsOneSeats", wCount.d)
		setInnerHTML("resultsBoxHouseTotalsTwoSeats", wCount.r)

		d3.select(".totalsOne .totalLabel").html(plural(wCount.d,"democrat"))
		d3.select(".totalsTwo .totalLabel").html(plural(wCount.r,"republican"))

		if(gainCount > 0){
			d3.select(".detailsOne .detailsFig").html(gainCounts.d)
			d3.select(".detailsTwo .detailsFig").html(gainCounts.r)

			d3.select(".detailsOne .detailsText").html(plural(gainCounts.d,"pickup"))
			d3.select(".detailsTwo .detailsText").html(plural(gainCounts.r,"pickup"))

			d3.selectAll(".totalDetails").style("display","flex")		
		} else {
			d3.selectAll(".totalDetails").style("display","none")
		}
	}

	if(dataResults && selectedContest == "PRESIDENT"){
		if(dataResults['t'+shortYear] == undefined || dataResults['t'+shortYear] === ""){
			if(dataResults['d'+shortYear] == undefined){
				dataResults['r'+shortYear] = 0; dataResults['d'+shortYear] = 0; dataResults['t'+shortYear] = 0;
			}
		}
	}

	var noTick, gainTick;
	if(!dataResults){
		const specialElections = ['GOVERNOR', 'SENATE', 'SENATE RUNOFF'];
		if (specialElections.includes(selectedContest)) {
			let suffix;
			switch (selectedContest) {
				case "GOVERNOR":
					dataResults = data_gov_recall[selectedYear + '-' + clicked]; suffix = "RECALL"; break;
				case "SENATE":
					dataResults = data_sen_sp[selectedYear + '-' + clicked]; suffix = "SPECIAL"; break;
				case "SENATE RUNOFF":
					dataResults = data_sen_sp_r[selectedYear + '-' + clicked]; suffix = "SPECIAL"; break;
			}
			
			if(dataResults){
				d3.select("#data").attr("button-contest-suffix", suffix);
				updateContestText();
			} else {
				hideResults();
				if(d3.select("#data").attr("button-contest-suffix") !== null){
					d3.select("#data").attr("button-contest-suffix", null);
					updateContestText();
				}
				return;
			}
		} else {
			if(selectedContest == "HOUSE" && clicked !== "United States"){
				clearInnerHTML('headingReportingText');
				if(clickLevel !== "state"){
					showResults();
				}
			} else {
				if(selectedContest !== "PRESIDENT"){
					hideResults();
				} else {
					for (a in numMap){d3.selectAll("#resultsBox" + numMap[a]).style("display", "none")}
					showResults();
				}
				if(d3.select("#data").attr("button-contest-suffix") !== null){
					d3.select("#data").attr("button-contest-suffix",null);
					updateContestText();
				}
			}
			return;
		}
	} else {
		if(d3.select("#data").attr("button-contest-suffix") !== null){
			d3.select("#data").attr("button-contest-suffix", null);
			updateContestText();
		}
	}

	if(dataResults){
		d3.selectAll(".resultsBadge span").style('display','none');
		d3.select('#resultsBoxUncontestedRace').style('display', 'none');
		d3.select('#resultsBoxRunoffElection').style('display', 'none');
		d3.select('#resultsBoxRankedChoiceVoting').style('display', 'none');
		d3.select("#resultsBoxLegislatureSelection").style('display','none');
		for (a in numMap){d3.selectAll("#resultsBox" + numMap[a]).style("display", "none")}

	if(selectedContest == "PRESIDENT") {
		d3.select("#resultsPollClosing").text("");
		$(".historyPanelTitle").css("height", "11.05vh")

		var reporting = dataResults['reporting']; var totalCandVote = 0;

		if(typeof dataResults['t'+shortYear] == 'undefined'){var totalVotes = 100} else {
		var totalVotes = dataResults['t'+shortYear]}

		if(dataResults['w'+shortYear] == undefined){dataResults['w'+shortYear] = ""};

		sY = shortYear, dR = dataResults;
		let candVote = 	{
			"d":dR['d'+sY],"r":dR['r'+sY],"u":dR['u'+sY],"gw":dR['gw'+sY],"l":dR['l'+sY],
			"em":dR['em'+sY],"rp":dR['rp'+sY],"g":dR['g'+sY]
		};

		t = totalVotes;
		for (let a in candVote) {
			let i = candVote[a];
			if(i === undefined || (t > 0 && i < t*0.005)) {delete candVote[a]} else {totalCandVote += i}
		};

		const candCountTick = Object.keys(candVote).length;

		var candVoteList = Object.keys(candVote).sort((a, b) => candVote[b] - candVote[a]);

		var dRwSY = dataResults['w' + shortYear];
		if(dRwSY!== "" && dRwSY !== "tie"){
			var winnerStatus = "true"; let b = candVoteList, w = dRwSY;
			b.splice(b.indexOf(w), 1); b.unshift(w);
		}

		if(clickLevel == "county"){var winnerStatus = "true"}

		var otherVotes = totalVotes - totalCandVote, candidateCount = candVoteList.length;
		var party = ["d","r"], vote = [0,0];

		for (var i = 0; i < candVoteList.length; i++) {
			let tP = candVoteList[i], v = dataResults[tP + shortYear], tMap = numMap[i+1];
			party[i+1] = tP; vote[i+1] = v;

			if(isNaN(v)){vote[i+1] = 0; d3.select('#resultsBox'+tMap).style("display","none"); continue;}

			if(typeof dataResults['t'+shortYear] == 'undefined'){
				d3.select('#resultsVotesBox'+tMap).style("display","none")
				var voteBoxDisplay = "none"; var percBoxDisplay = "1/3"; 
			}

			let a = presCandidates[selectedYear];
			setInnerHTML('results'+ tMap +'FirstName', a[tP + 'FirstName']);
			setInnerHTML('results'+ tMap +'LastName', a[tP + 'Surname']);
		}

		if (dataResults['w' + shortYear] == '' || dataResults['w' + shortYear] == undefined) {var noTick = "yes";}

	} else if(selectedContest == "PRESIDENT BY CD") {
		var totalCandVote = 0; var totalVotes = dataResults['t']; var noTick = "yes"; 

		let candVote = {"d": dataResults['d'], "r": dataResults['r']};
		
		for (let a in candVote) {if(candVote[a] === undefined) {delete candVote[a]} else {totalCandVote += candVote[a]}};
		var candVoteList = Object.keys(candVote).sort(function(a, b) {return candVote[b] - candVote[a]});

		if(dataResults['w'] !== "" && dataResults['w'] !== "runoff"){
			var winnerCand = dataResults['w'];
			var restOfArray = candVoteList.filter((el) => el !== winnerCand);
			var candVoteList = [winnerCand, ...restOfArray];
		}

		var otherVotes = totalVotes - totalCandVote; var candidateCount = candVoteList.length;
		var party = ["d","r"]; var vote = [0,0];

		if (dataResults['w'] == '' || dataResults['w'] == undefined) {var noTick = "yes";}

		for (var i = 0; i < candVoteList.length; i++) {
			var thisParty = candVoteList[i]; var thisVote = dataResults[thisParty];
			party[i+1] = thisParty; vote[i+1] = thisVote;

			if(isNaN(thisVote)){
				vote[i+1] = 0; document.getElementById('resultsBox' + numMap[i + 1]).style.display = "none";
			}

			if(typeof dataResults['t'] == 'undefined'){
				document.getElementById('resultsVotesBox' + numMap[i + 1]).style.display = "none";
				var voteBoxDisplay = "none";
			}

			setInnerHTML('results'+numMap[i + 1]+'FirstName', presCandidates[selectedYear][thisParty + 'FirstName']);
			setInnerHTML('results'+numMap[i + 1]+'LastName', presCandidates[selectedYear][thisParty + 'Surname']);
		}
	} else {
		var reporting = dataResults['reporting'], totalCandVote = 0;
		var incumbent = dataResults['incumbent'] || "", advances = dataResults['advances'] || "";
		var tW = dataResults['winner'];

		if(clicked !== "United States"){
			if(primaryContests.includes(selectedContest)){
				var data = d3.select("#data"), state = data.attr("data-stateclick");
				var dataLevel = data.attr("data-level");
				if ((dataLevel == "state" && calendar[selectedYear] !== undefined) || (dataLevel == "county" && selectedContest.includes("HOUSE"))){

					var pD = "", pcText;
					if(selectedYear == "2024"){pD = calendar[selectedYear]['C'][state]}
					switch (selectedContest) {
						case "DEM PRESIDENT": pD = calendar[selectedYear]['P'][state]['d'] || ""; break;
						case "GOP PRESIDENT": pD = calendar[selectedYear]['P'][state]['r'] || ""; break;
					}

					if(pD !== ""){
						let pT = pollClosingTimes[state];
						var a = moment.tz(selectedYear + pD, 'America/New_York').add(pT + 12, 'hours');
						a = moment.tz(selectedYear + pD, 'America/New_York').add(pT + 12, 'hours')
						var timeNow = moment.tz("America/New_York"), diff = a.diff(timeNow, 'hours');
						if (diff < 24) {
							var t = a.format('h:mm a');
							if(diff > 0){
								pcText = "POLLS CLOSE " + t;
							} else if(diff > -24){
								if(tW !== ""){pcText = "POLLS CLOSED " + t}
							} else {
								pcText = a.format('MMMM D, YYYY');
							}
						} else {
							pcText = a.format('MMMM D, h:mm a')
						}
					} else {
						pcText = ""
					}
					d3.select("#resultsPollClosing").text(pcText);
					$(".historyPanelTitle").css("height", "15.05vh");
				} else {
					d3.select("#resultsPollClosing").text("");
					$(".historyPanelTitle").css("height", "11.05vh")
				}
			} else {
				d3.select("#resultsPollClosing").text("");
				$(".historyPanelTitle").css("height", "11.05vh")
			}
		}

		if(incumbent !== undefined && incumbent !== ""){
			incumbent = incumbent.split(','); var tempInc = [];
			for (let i = 0; i < incumbent.length; i++) {
				let tC = incumbent[i], x;
				if(!tC.startsWith("cand")){
					x = Object.keys(dataResults).find(a => dataResults[a] == tC).replace("_party", "");
				} else {
					x = tC;
				}
				tempInc.push(x)
			}
			incumbent = tempInc
		}

		if(advances !== undefined && advances !== ""){
			advances = advances.split(','); var tempInc = [];
			for (let i = 0; i < advances.length; i++) {
				let tC = advances[i], x;
				if(!tC.startsWith("cand")){
					x = Object.keys(dataResults).find(a => dataResults[a] == tC).replace("_party", "");
				} else {
					x = tC;
				}
				tempInc.push(x)
			}
			advances = tempInc
		}

		if (tW && tW !== "tie" && tW !== "runoff"){
			noTick = "no";
			var winnerStatus = "true";
			if (dataResults['gain'] == 1){gainTick = "yes"; noTick = "yes"}
		} else {
			noTick = "yes"
		}

		if(dataResults['runoff'] == 1){
			d3.select("#data").attr("button-contest-suffix","runoff");
			updateContestText();
		}

		d3.select('#resultsBoxRunoffElection').style("display", dataResults['winner'] == "runoff" ? "initial" : "none");
		d3.select('#resultsBoxLegislatureSelection').style("display", dataResults['legislature'] == 1 ? "initial":"none");
		d3.select('#resultsBoxRankedChoiceVoting').style("display", dataResults['ranked'] == 1 ? "initial" : "none");

		var candVote = {}, pA = ['o','l','g'], tV = dataResults['total_vote'];
		for (let i = 1; i <= 10; i++) {
			let tC = "cand" + i, tN = dataResults[tC + "_lastname"] + dataResults[tC + "_firstname"];
			let tP = dataResults[tC + "_party"], tI = 0, thV = dataResults[tC + "_vote"];
			if(dataResults['ranked'] !== 1 && thV < tV * 0.005){continue}
			if(tV == 0 && tP){if(pA.includes(tP)) {tP = "z"} else {tP = tP.charAt(0)}} else {tP = "a"}
			if(incumbent.includes(tC)){tI = 1}
			candVote[tC] = {"vote": dataResults[tC + "_vote"], "name": tN, "party": tP, "i":tI};
		}

		for (let i in candVote) {
			let a = candVote[i].vote;
			if (a == undefined) {delete candVote[i]} else {totalCandVote += a}
		}

		const candCountTick = Object.keys(candVote).length;
		var candVoteList = Object.keys(candVote).sort(function(a, b) {
			let x = candVote[a], y = candVote[b];
			return y.vote - x.vote || y.i - x.i || d3.ascending(x.party,y.party) || d3.ascending(x.name,y.name);
		})

		var drW = dataResults.winner; 
		if (tW && candVoteList.length > 0 && tW !== "runoff" && tW !== "tie") {
			var winnerStatus = "true"; let b = candVoteList;
  			const c = Object.keys(dataResults).find(a => dataResults[a] == drW).replace("_party", "");
			b.splice(b.indexOf(c), 1); b.unshift(c);
		}

		candVoteList = candVoteList.slice(0,10);

		if((!drW || drW !== "") && totalCandVote > 0 && drW !== "runoff"){
			if(candVote[candVoteList[0]+'_vote'] == candVote[candVoteList[1]+'_vote']){drW = "tie"}
		}

		var party = [], vote = [];
		for (var i = 0; i < candVoteList.length; i++) {
			let j = i+1;
			let cL = candVoteList[i], tP = dataResults[cL + '_party'], tM = 'results'+ numMap[j];
			party[j] = tP; vote[j] = dataResults[cL + '_vote'];

			if(incumbent.includes(cL)){
				d3.select("#" + tM + "Name .incumbentBadge").style('display','inline-block');
			}
			if(advances.includes(cL)){
				d3.select("#" + tM + "Name .runoffBadge").style('display','inline-block');
			}
 			setInnerHTML(tM + 'FirstName', dataResults[cL + '_firstname'] || "");
			setInnerHTML(tM + 'LastName', dataResults[cL + '_lastname'] || genPartyName[tP]);
		}

		var totalVotes = dataResults['total_vote'], otherVotes = totalVotes - totalCandVote;
		if(dataResults['runoff_count']){otherVotes -= dataResults['runoff_count']}
		if(dataResults['uncalled']){otherVotes -= dataResults['uncalled']}
		if(dataResults['independents']){otherVotes -= dataResults['independents']}

		var candVoteList = candVoteList.filter(a => a !== "winner"), candidateCount = candVoteList.length;

		if(dataResults['cand1_vote'] > 0 && vote[1] === totalVotes && vote[1] > 1){candidateCount = 1};

		if(totalVotes > 0){d3.select('#resultsOne').style("display","flex")}

		if(candCountTick){candidateCount = candCountTick}

		if(candidateCount == 1 && clicked !== "United States"){
			if(d3.select("#data").attr("data-level") == "state" || selectedContest == "HOUSE"){
				d3.select('#resultsBoxUncontestedRace').style('display', 'inline-flex');
				otherVotes = 0;
			}
			var noTick = "yes", winnerStatus = "false";
		}
	}}

	d3.selectAll('[id^="resultsVotes"]').style("display", "flex");

	var margin = Math.abs(((vote[1] - vote[2])/totalVotes)*100).toFixed(1);
//	if(margin < 0.25){var percDP = 2} else {var percDP = 1}

	for (var i = 0; i < candVoteList.length; i++) {
		let thisVote = vote[i+1], thisNum = numMap[i+1], percDP;

		switch (true) {
			case (margin < 0.25 && margin > 0):
				percDP = 2; break;
			case (thisVote === totalVotes && totalVotes > 0):
				percDP = 0; break;
			case (thisVote / totalVotes > 0.9995):
				percDP = 0; break;
			case (thisVote / totalVotes < 0.001 && thisVote > 0):
				percDP = 2; break;
			default:
				percDP = 1; break;
		}

		var thisPerc;
		if(totalVotes == undefined){totalVotes = 0}
		if(totalVotes == 0){thisPerc = 0} else {thisPerc = (thisVote / totalVotes) * 100}
	
		if(voteBoxDisplay == undefined){
			setInnerHTML('resultsPercBox' + thisNum, thisPerc.toFixed(percDP) + '<a1>%</a1>')
		} else {
			animatePercent(thisPerc, 'resultsPercBox' + thisNum)
		}

		animateNumber(thisVote, 'resultsVotesBox' + thisNum);

		let rVis;
		if((totalVotes == 0 || totalVotes == null) && winnerStatus !== "true"){rVis = "none"} else {rVis = "grid"}
		d3.select('#results' + thisNum).style("display", rVis);

		if(!(party[i+1])){party[i+1] = "o"}

		d3.select('#resultsBox' + thisNum)
			.style("display", "flex")
			.style('background-color', candColors['box'][party[i+1]]);

		d3.selectAll('#results' + thisNum + ' span')
			.style('color', candColors['text'][party[i+1]]);
	}

	d3.select('#resultsBoxOther').style("display", otherVotes > 0 ? "flex" : "none");

	var aheadMargin = margin;
	if(margin < 1){aheadMargin = Math.abs(((vote[1] - vote[2])/totalVotes)*100).toPrecision(2)}
	if(margin < 0.05){aheadMargin = Math.abs(((vote[1] - vote[2])/totalVotes)*100).toPrecision(1)}

	if(voteBoxDisplay == undefined){
		if ((!(vote[2] > 0) || vote[1] == vote[2]) && winnerStatus !== "true") {
			clearInnerHTML('resultsAhead')
		} else if ((vote[1] !== vote[2]) || (winnerStatus == "true" && vote[1] == 0)) {
			if(d3.select("#data").attr("data-aheadvalue") == "total"){
				animateTotalNumber(totalVotes);
			} else {
				if(isNaN(aheadMargin)){
					clearInnerHTML('resultsAhead')
				} else {
					let a = numF.format(Math.abs(vote[1] - vote[2]));
					setInnerHTML('resultsAhead',"DIFF: "+ a +" ("+aheadMargin+"%)")
				}
			}
		} else {
			clearInnerHTML('resultsAhead')
		}
	} else {
		clearInnerHTML('resultsAhead')
	}

	switch (true){
		case (reporting > 100): reporting = "99"; break;
		case (reporting < 1 && totalVotes > 0): reporting = "<1"; break;
		case (reporting == 0): reporting = "0"; break;
	}

	if(reporting){
		setInnerHTML('headingReportingText', reporting + "<in>% IN</in>")
	} else {
		clearInnerHTML('headingReportingText')
	}

	var othPerc = otherVotes / totalVotes; var othDP;
	if(othPerc > 0.1){othDP = 3} else if (othPerc > 0.01){othDP = 2} else {othDP = 1}
	var votePercOther = Math.abs((otherVotes / totalVotes * 100)).toPrecision(othDP);
	setInnerHTML('resultsPercBoxOther', votePercOther + '<a1>%</a1>'); animateNumber(otherVotes, 'resultsVotesBoxOther');

	if(margin < 0.25 && margin > 0){var percScale = 0.6} else {var percScale = 0.7}

	d3.selectAll('[id^="resultsPerc"]')
		.style('transform', 'scaleX(' + percScale + ')')
		.style('width', 'calc(100% / ' + percScale + ')');
	
	if (dataResults['uncalled'] > 0) {d3.select('#resultsUncalledNumber').text(dataResults['uncalled'])}
	d3.select('#resultsBoxRunoff').style("display", dataResults['uncalled'] > 0 ? "flex" : "none");

	if (dataResults['runoff_count'] > 0) {d3.select('#resultsRunoffNumber').text(dataResults['runoff_count'])}
	d3.select('#resultsBoxRunoff').style("display", dataResults['runoff_count'] > 0 ? "flex" : "none");

	if (dataResults['independents'] > 0) {d3.select('#resultsIndependentsNumber').text(dataResults['independents'])}
	d3.select('#resultsBoxIndependents').style("display", dataResults['independents'] > 0 ? "flex" : "none");

	var tickDisplay, gainDisplay;
	if(noTick == "yes"){tickDisplay = "none"} else {tickDisplay = "flex"}

	if (d3.select("#data").attr("data-level") == "county" && !selectedContest.endsWith("HOUSE") && selectedContest !== "HOUSE" && selectedContest !== "STATE HOUSE" && selectedContest !== "STATE SENATE") {
		tickDisplay = "none";
	}

	if(gainTick == "yes"){
		tickDisplay = "none", gainDisplay = "flex";
	} else {
		gainDisplay = "none";
	}

	d3.select('#resultsOneTick').style('display', tickDisplay);
	d3.select('#resultsOneTickGain').style('display', gainDisplay);

	if ((selectedContest !== "PRESIDENT" && clicked == "United States") || (selectedContest == "HOUSE" && clickLevel !== "county")) {
		clearInnerHTML('resultsAhead');
		var voteBoxDisplay = "none", percBoxDisplay = "none";

		d3.selectAll('[id^="resultsPerc"]')
			.style('transform', 'scaleX(0.75)')
			.style('width', 'calc(100% / 0.75)');

		for (var i = 0; i < vote.length; i++) {setInnerHTML('resultsPercBox' + numMap[i+1], vote[i+1])}
		setInnerHTML('resultsPercBoxOther', otherVotes);

		d3.select('#resultsOneTick').style('display', "none")
	}
	
	// FINDER
//	d3.selectAll('[id^="resultsVotes"]').style("display", voteBoxDisplay);

	scaleTextWH('resultsOneFirstName', 0.235);
	scaleTextWH('resultsTwoFirstName', 0.235);
	scaleTextWH('resultsThreeFirstName', 0.235);
	scaleTextWH('resultsFourFirstName', 0.235);
	scaleTextWH('resultsFiveFirstName', 0.235);
	scaleTextWH('resultsSixFirstName', 0.235);
	scaleTextWH('resultsSevenFirstName', 0.235);
	scaleTextWH('resultsEightFirstName', 0.235);
	scaleTextWH('resultsOneLastName', 0.235);
	scaleTextWH('resultsTwoLastName', 0.235);
	scaleTextWH('resultsThreeLastName', 0.235);
	scaleTextWH('resultsFourLastName', 0.235);
	scaleTextWH('resultsFiveLastName', 0.235);
	scaleTextWH('resultsSixLastName', 0.235);
	scaleTextWH('resultsSevenLastName', 0.235);
	scaleTextWH('resultsEightLastName', 0.235);
	scaleTextWH('resultsOtherName', 0.235);
	setTimeout(function(){scaleTextWH('resultsOtherName', 0.235)}, 1);
	setTimeout(function(){scaleTextWH('resultsBoxTopText', 0.235)}, 1);
	scaleHeadingText();
	document.getElementById('buttonYear' + selectedYear).scrollIntoViewIfNeeded();
}

function toggleAheadNumber() {
	let s;
	if(d3.select("#data").attr("data-aheadvalue") == "ahead"){s = "total"} else {s = "ahead"}
	d3.select("#data").attr("data-aheadvalue", s); getResults();
}

var mapSettings = {"filters":"","stats":""};

function refreshFill() {
	if(d3.select("#data").attr("button-road270") == "true"){
		updateRoadMapProjections();
		return;
	}

	if(d3.select("#data").attr("button-pollclosing") == "true"){
		colorPollClosingHour(d3.select("#data").attr("poll-closinghour") || 7);
		return;
	}
	if(d3.select("#data").attr("button-graphics") == "true"){
		updateStateGraphic(d3.select("#data").attr("data-stateclick"));
		updateRoadMapProjections();
		return;
	}

	if(d3.select("#data").attr("button-presidentProjections") == "true"){createProjections(); return;}

	var selectedYear = d3.select("#data").attr("button-year");
	var selectedContest = d3.select("#data").attr("button-contest");
	var selectedRemaining = d3.select("#data").attr("button-voteRemaining");
	var selectedVsPresident = d3.select("#data").attr("button-verspresident");
	var selectedStatePop = d3.select("#data").attr("button-statepop");
	var selectedLatinoPop = d3.select("#data").attr("button-latinopop");
	var selectedBlackPop = d3.select("#data").attr("button-blackpop");
	var selectedWhitePop = d3.select("#data").attr("button-whitepop");
	var selectedTurnout = d3.select("#data").attr("button-turnout");

	var filters = mapSettings['filters'], stat = mapSettings['stats'];

	var shortYear = selectedYear.slice(-2).toString();
	var shortYearPrev = (selectedYear-4).toString().slice(-2).toString();

	if (selectedYear % 4 === 0) {
		var shortPresYear = selectedYear.slice(-2).toString();
		var presYear = selectedYear.toString();
		var shortPresYearPrev = (selectedYear-4).toString().slice(-2).toString();
	} else {
		var shortPresYear = (Math.floor(selectedYear / 4) * 4).toString().slice(-2)
		var shortPresYearPrev = (Math.floor(selectedYear / 4) * 4).toString().slice(-2)
		var presYear = (Math.floor(selectedYear / 4) * 4).toString()
	}

	var y = shortYear, dataFile = {};
	if(!selectedContest.endsWith("STATE HOUSE") && selectedContest.endsWith("HOUSE") || selectedContest == "PRESIDENT BY CD"){
		d3.selectAll(`.cd.cd${y}`).nodes().forEach(d => dataFile[d.id] = d);
	} else if(selectedContest == "STATE HOUSE"){
		d3.selectAll(`.hd.hd${y}`).nodes().forEach(d => dataFile[d.id] = d);
	} else if(selectedContest == "STATE SENATE"){
		d3.selectAll(`.sd.sd${y}`).nodes().forEach(d => dataFile[d.id] = d);
	} else {
		dataFile = data_president;
	}
	
	const dataResults = Object.keys(dataFile);

	let dataResultsFile;
	switch (selectedContest) {
		case "PRESIDENT BY CD": dataResultsFile = data_pres_house; break;
		case "HOUSE": dataResultsFile = data_house; break;
		case "GOVERNOR": dataResultsFile = data_gov; break;
		case "SENATE": dataResultsFile = data_sen; break;
		case "SENATE SPECIAL": dataResultsFile = data_sen_sp; break;
		case "SENATE RUNOFF": dataResultsFile = data_sen_r; break;
		case "SENATE SPECIAL RUNOFF": dataResultsFile = data_sen_sp_r; break;
		case "DEM PRESIDENT": dataResultsFile = data_president_dem; break;
		case "GOP PRESIDENT": dataResultsFile = data_president_rep; break;
		case "SECRETARY OF STATE": dataResultsFile = data_sos; break;
		case "GOVERNOR RECALL": dataResultsFile = data_gov_recall; break;
		case "LIEUTENANT GOVERNOR": dataResultsFile = data_gov_lt; break;
		case "GOVERNOR DEM": dataResultsFile = data_gov_dem; break;
		case "GOVERNOR REP": dataResultsFile = data_gov_rep; break;
		case "SENATE DEM": dataResultsFile = data_sen_dem; break;
		case "SENATE REP": dataResultsFile = data_sen_rep; break;
		case "SECRETARY OF STATE DEM": dataResultsFile = data_sos_dem; break;
		case "SECRETARY OF STATE REP": dataResultsFile = data_sos_rep; break;
		case "ATTORNEY GENERAL": dataResultsFile = data_attorney_general; break;
		case "LIEUTENANT GOVERNOR DEM": dataResultsFile = data_gov_lt_dem; break;
		case "LIEUTENANT GOVERNOR REP": dataResultsFile = data_gov_lt_rep; break;
		case "D-HOUSE": dataResultsFile = data_house_dem; break;
		case "R-HOUSE": dataResultsFile = data_house_rep; break;
		case "SUPREME COURT JUSTICE": dataResultsFile = data_supreme_court; break;
		case "SUPERIOR COURT": dataResultsFile = data_superior_court; break;
		case "BALLOT MEASURE": dataResultsFile = data_ballot; break;
		case "BALLOT MEASURE ABORTION": dataResultsFile = data_ballot_abortion; break;
		case "STATE HOUSE": dataResultsFile = data_state_house; break;
		case "STATE SENATE": dataResultsFile = data_state_senate; break;
	}

	var displayStatus = (mapSettings['filters'].length > 0 || mapSettings['stats'].length > 0) ? "flex" : "none";
	d3.select("#controlButtonRemoveFilters").style("display", displayStatus);

	const dataResultsLength = dataResults.length;
	for (var i = 0; i < dataResultsLength; i++) {
		var thisIndex = dataResults[i], thisState = dataFile[thisIndex];
		var thisWinner = thisState['w' + shortYear];
		if(thisIndex == "United States"){continue}
		const thisElement = document.getElementById(thisIndex);
		if(thisElement){
			thisElement.classList.remove("redState", "blueState", "orangeState", "indState","rpState", "runoffState","yesState","noState","noProjection","rpState","uState","d1State","d2State","d3State","d4State","d5State","d6State","d7State","d8State","d9State","d10State","d11State","r1State","r2State","r3State","r4State","r5State","r6State","r7State","r8State","r9State","r10State","r11State","pollsClosed","gopLead","demLead","indLead","othLead","tieState","noContest");
			thisElement.style.fill = "";
		}

		let cScale;
		if(stat == "statePop"){
			cScale = d3.scaleLinear().domain([0,0.5]).range(["#F8F2FF", "#6A0D98"]);
			thisElement.style.fill = cScale(demographics[thisIndex]['st']); continue;
		}
		if(selectedLatinoPop == "true"){
			cScale = d3.scaleLinear().domain([0,0.5]).range(["#FFFFD4", "#8C2D04"]);
			thisElement.style.fill = cScale(latinoScale[thisIndex]['pL']); continue;
		}
		if(selectedBlackPop == "true"){
			cScale = d3.scaleLinear().domain([0,0.5]).range(["#DCFFDC", "#0D350D"]);
			thisElement.style.fill = cScale(demographics[thisIndex]['pB']); continue;
		}

		if (selectedContest == "PRESIDENT") {
			const tS = thisState, tW = thisWinner, sY = shortYear, sYP = shortYearPrev;

			if(filters == "gain"){
				if(tS['w'+ sYP] == tS['w'+ sY] && tS['w'+ sY] !== ""){
					continue
				} 
			} else if (filters == "obamaTrump") {
				if(tS['w16'] == "r" && tS['w12'] == "d" && tS['w08'] == "d"){
					if (tW == "") {thisElement.classList.add("noProjection"); continue;}
				} else {
					continue
				}
			} else if (filters == "trumpBiden") {
				if(tS['w16'] == "r" && tS['w20'] == "d"){
					if (tW == "") {thisElement.classList.add("noProjection"); continue;}
				} else {
					continue
				}
			}

			let cV = {
				"d":tS['d'+sY],"r":tS['r'+sY],"u":tS['u'+sY],"gw":tS['gw'+sY],"l":tS['l'+sY],
				"em":tS['em'+sY],"rp":tS['rp'+sY],"g":tS['g'+sY]
			};

			var cand = Object.keys(cV).filter(a => cV[a] !== undefined).sort((a, b) => cV[b] - cV[a]);
			var vA = Object.values(cV).filter(a => a !== undefined).sort((a,b) => b-a);
			var tV = vA.reduce((a,b) => a+b,0); var margin = Math.abs(vA[0] - vA[1]) / tV;
			if(tV == 0){margin = 0}

			if (stat == "margin") {
				var s;
				switch (cand[0]) {
					case "d": s = d3.scaleLinear().range(["#e6f2ff", "#0069d9"]); break;
					case "r": s = d3.scaleLinear().range(["#ffe6e6", "#E00000"]); break;
					case "rp": s = d3.scaleLinear().range(["#cfb3ff", "#6a29a3"]); break;
					case "gw": s = d3.scaleLinear().range(["#ffebd9", "#FF7B00"]).clamp(true); break;
					default: s = ""; break;
				}
				if(s !== ""){thisElement.style.fill = s.domain([0,0.25])(margin)}
			} else if (stat == "turnout") {
				let v = (tS['t'+ sY] / tS['t'+previousYears[sY]])-1;
				let s = d3.scaleLinear()
					.domain([-0.35, -0.01, 0.01, 0.35])
					.range(["#E00000", "#fff0f0", "#f0fff0", "#00E000"]).clamp(true);

				thisElement.style.fill = s(v);
			} else if (stat == "reporting" && shortYear == "24") {
				let s = d3.scaleLinear().domain([0,100]).range(["#6A0D98","#F8F2FF"]);
				thisElement.style.fill = s(thisState['reporting']);
			} else if (stat == "demVote") {
				let ratio = tS['d'+sY] / tS['t'+sY];
				let scale = d3.scaleLinear().domain([0.25, 0.6]).range(["#e6f2ff", "#0069d9"]);
				thisElement.style.fill = scale(ratio);
			} else if (stat == "repVote") {
				let ratio = tS['r'+sY] / tS['t'+sY];
				let scale = d3.scaleLinear().domain([0.25, 0.6]).range(["#ffe6e6", "#E00000"]);
				thisElement.style.fill = scale(ratio);
			} else if (stat == "otherVote") {
				let ratio = (tS['t'+sY] - tS['d'+sY] - tS['r'+sY]) / tS['t'+sY];
				let scale = d3.scaleLinear().domain([0,0.01, 0.25]).range(["#ffffff","#cfb3ff", "#6a29a3"]);
				thisElement.style.fill = scale(ratio);
			} else if (stat == "swing") {
				let sPY = previousYears[shortYear];
				let DV = tS['d'+sY],RV=tS['r'+sY],TV=tS['t'+sY],DVP=tS['d'+sPY],RVP=tS['r'+sPY],TVP=tS['t'+sPY];
				let swing = (DV-RV)/TV-(DVP-RVP)/TVP;
				let scale = d3.scaleLinear()
					.domain([-0.25, -0.01, 0, 0.01, 0.25])
					.range(["#E00000", "#FFE6E6", "#f0f0f0", "#E6F2FF", "#0069D9"]);
				thisElement.style.fill = scale(swing);
			} else {
				if (tV > 0 && vA[0] == vA[1] && vA[0] + vA[1] !== 0){
					addClassFromWinner(thisElement, "tie")
					data_president[thisIndex]['w'+sY] = "tie";
					continue;
				} else {
					var tC = thisElement.classList;
					if(tC.contains("county") || tC.contains("township")) {
						if(tV > 0){
							addClassFromWinner(thisElement, cand[0]);
						} else {
							continue;
						}
					} else {
						addClassFromWinner(thisElement, thisWinner);
					}
					if (tW == "" || !tW){
						if(!tW){data_president[thisIndex]['w'+sY] = ""}
						if(vA[0] > 0){
							var tL = cand[0]; 
							if(tC.contains("county") || tC.contains("township")) {
								addClassFromWinner(thisElement, tL)
							} else {
								if (tL == "r") {tC.add("gopLead")}
								if (tL == "d") {tC.add("demLead")}
							}
						}
					}
				}
			}
		} else if(selectedContest == "PRESIDENT BY CD"){
			var clickedState = document.getElementById(thisIndex).getAttribute("data-stateabbreviation");
			var clickedCD = document.getElementById(thisIndex).getAttribute("data-districtnumber");
			var thisUnit = data_pres_house[selectedYear][clickedState][clickedCD];

			const tS = thisUnit;
			let cV = {"d":tS['d'],"r":tS['r'],"rp":tS['rp']};

			var cand = Object.keys(cV).filter(a => cV[a] !== undefined).sort((a, b) => cV[b] - cV[a]);
			var vA = Object.values(cV).filter(a => a !== undefined).sort((a,b) => b-a);
			var tV = vA.reduce((a,b) => a+b,0); var margin = Math.abs(vA[0] - vA[1]) / tV;
			if(tV == 0){margin = 0}

			if (stat == "margin") {
				var s;
				switch (cand[0]) {
					case "d": s = d3.scaleLinear().range(["#e6f2ff", "#0069d9"]); break;
					case "r": s = d3.scaleLinear().range(["#ffe6e6", "#E00000"]); break;
					case "rp": s = d3.scaleLinear().range(["#cfb3ff", "#6a29a3"]); break;
					default: s = ""; break;
				}
				if(s !== ""){thisElement.style.fill = s.domain([0,0.25])(margin)}
			} else {
				addClassFromWinner(thisElement, thisUnit.w);
			}
		} else {
			var thisUnit, sY = selectedYear, tI = thisIndex, cL = thisElement.classList;
			thisUnit = dataResultsFile[selectedYear + '-' + thisIndex]}
			if (!thisUnit){
				let sE = ['GOVERNOR','SENATE','SENATE RUNOFF'];
				if (sE.includes(selectedContest)) {
					switch (selectedContest) {
						case "GOVERNOR": thisUnit = data_gov_recall[sY + '-' + tI]; break;
						case "SENATE": thisUnit = data_sen_sp[sY + '-' + tI]; break;
						case "SENATE RUNOFF": thisUnit = data_sen_sp_r[sY + '-' + tI]; break;
					}
				}

				if (!thisUnit){
					let nationalRaces = ['PRESIDENT','HOUSE','PRESIDENT BY CD']
					if(!nationalRaces.includes(selectedContest)){
						if(!(cL.contains("county")) && !(cL.contains("township"))){
							cL.add("noContest");
						}
					}
					continue;
				}
			}
			
			var thisWinner = thisUnit['winner'], tW = thisWinner; const tU = thisUnit;

			if(filters == "gain"){
				let cL = thisElement.classList;
				if(thisUnit['gain'] !== 1 && !(cL.contains("county")) && !(cL.contains("township"))){
					if(selectedContest == "HOUSE"){
						if(selectedYear == "2024"){
							let tGBox = document.getElementById("groupBox-" + thisIndex);
							if (tGBox) {tGBox.classList = "cdBox cdGroupBoxPollsClosed"}
						} else {
							let tEBox = document.getElementById("box-" + thisIndex)
							if(tEBox){tEBox.classList = "districtBox districtBoxPollsClosed"}
						}
					}
					continue;
				} 
			} else if (filters == "uncontested") {
				var v = 0; for (let i = 1; i <= 5; i++) {if(tU["cand" + i + "_party"]){v++}}
				if(v !== 1 && !(cL.contains("county")) && !(cL.contains("township"))){
					if(selectedContest == "HOUSE"){
						if(selectedYear == "2024"){
							let tGBox = document.getElementById("groupBox-" + thisIndex);
							if (tGBox) {tGBox.classList = "cdBox cdGroupBoxPollsClosed"}
						} else {
							let tEBox = document.getElementById("box-" + thisIndex)
							if(tEBox){tEBox.classList = "districtBox districtBoxPollsClosed"}
						}
					}
					continue;
				} else  {
					if (tW == "") {thisElement.classList.add("noProjection")}
					continue;
				}
			} else if (filters == "obamaTrump") {
				if(selectedContest == "HOUSE"){mapSettings['filters'] = ""; refreshFill(); return}
				if(thisState['w16'] == "r" && thisState['w12'] == "d" && thisState['w08'] == "d"){
					if (tW == "") {thisElement.classList.add("noProjection"); continue;}
					addClassFromWinner(thisElement, thisWinner);
				} else {
					continue
				}
			} else if (filters == "trumpBiden") {
				if(selectedContest == "HOUSE"){
					var clickedState = d3.select("#"+thisIndex).attr("data-stateabbreviation");
					var clickedCD = d3.select("#"+thisIndex).attr("data-districtnumber");
					let tCD = data_pres_cd[selectedYear][clickedState + "-" + clickedCD];
					if(tCD){
						if(tCD['d20'] > tCD['r20']){w20 = "d"} else {w20 = "r"}
						if(tCD['d16'] > tCD['r16']){w16 = "d"} else {w16 = "r"}
					}
				} else {
					var w16 = thisState['w16'], w20 = thisState['w20'];
				}

				if(w16 == "r" && w20 == "d"){
					if (thisWinner == "") {thisElement.classList.add("noProjection"); continue;}
					addClassFromWinner(thisElement, thisWinner)
				} else {
					if(selectedContest == "HOUSE"){
						if(selectedYear == "2024"){
							let tGBox = document.getElementById("groupBox-" + thisIndex);
							if (tGBox) {tGBox.classList = "cdBox cdGroupBoxPollsClosed"}
						} else {
							let tEBox = document.getElementById("box-" + thisIndex)
							if(tEBox){tEBox.classList = "districtBox districtBoxPollsClosed"}
						}
					}
					continue;
				}
			} else if (filters == "ticketSplit") {
				var wC = "", wP = "";
				if(selectedContest == "HOUSE"){
					if(selectedYear == "2024"){mapSettings['filters'] = ""; refreshFill(); return;}
					var clickedState = d3.select("#"+thisIndex).attr("data-stateabbreviation");
					var clickedCD = d3.select("#"+thisIndex).attr("data-districtnumber");
					var thisUnitCD = data_pres_cd[selectedYear][clickedState + "-" + clickedCD];
					if(thisUnitCD){
						if(thisUnitCD['d'+shortPresYearPrev] > thisUnitCD['r'+shortPresYearPrev]){
							wP = "d"
						} else {
							wP = "r"
						}
						
						wC = data_house[selectedYear+"-"+clickedState +"-"+clickedCD].winner;
					}
				} else {
					var wP = thisState['w' + shortPresYear]; var wC = thisUnit.winner;
				}
					
				if(wP !== "" && wC !== "runoff" && wC !== "" && wC !== wP){
					addClassFromWinner(thisElement, thisWinner);
					addClassFromWinnerHouseBox(thisIndex, thisUnit, thisWinner);
				} else {
					if(selectedContest == "HOUSE"){
						if(selectedYear == "2024"){
							let tGBox = document.getElementById("groupBox-" + thisIndex);
							if (tGBox) {tGBox.classList = "cdBox cdGroupBoxPollsClosed"}
						} else {
							let tEB = document.getElementById("box-" + thisIndex)
							if(tEB){tEB.classList = "districtBox districtBoxPollsClosed"}
						}
					}
					continue;
				}
			}

			var cV = {};
			for (let i = 1; i <= 12; i++) {
				let name = "cand" + i, tVote = tU[name + "_vote"];
				cV[name] = tVote || 0;
			}

			var vA = Object.values(cV)
				.filter(a => a !== undefined)
				.sort((a,b) => b-a);

			var candA = Object.keys(cV)
				.sort((a, b) => cV[b] - cV[a])
				.map(a => tU[a + "_party"])
				.filter(a => a !== undefined);

			var vT = vA.reduce((a,b) => a+b,0);

			var margin = Math.abs(vA[0] - vA[1]) / vT;
			if(vT == 0 && candA.length > 1){margin = 0}
			if(candA.length == 1){
				margin = 1;
				addClassFromWinner(thisElement, candA[0]);
				if(selectedContest == "HOUSE"){
					data_house['2024' + '-' + thisIndex.toString()]['winner'] = 'd'
//					data_house['2024' + '-' + thisIndex]['winner'] = candA[0];
				}
				if(selectedYear == "XXXX"){
				// To fill in uncontested races, move the following line to before the if statement

					var thisGroupBox = document.getElementById("groupBox-" + thisIndex);
					if(thisGroupBox){
						if(candA[0] == "r"){thisGroupBox.classList.add("cdGroupBoxRep")}
						if(candA[0] == "d"){thisGroupBox.classList.add("cdGroupBoxDem")}
						if(candA[0] == "i"){thisGroupBox.classList.add("cdGroupBoxInd")}
					}
				}
			}

			if (thisWinner == "" || !thisWinner){
				if(!thisWinner){tU['winner'] = ""}
				if(tU['total_vote'] > 0){
					let tECL = thisElement.classList;
					if(tU['advances'] && tU['advances'] !== ""){
						addClassFromWinner(thisElement, "runoff");
						tU['winner'] = "runoff";
						getResults();
						continue;
					}
					if(tECL.contains("county") || tECL.contains("township")) {
						addClassFromWinner(thisElement, candA[0]);
						if(candA[0] !== "o"){thisUnit['winner'] = candA[0]}
					}
				} else {
					// addClassFromWinner(thisElement, "", true);
				}
			}

			if (stat == "reporting") {
				if(selectedYear !== "2024"){mapSettings['filters'] = ""; refreshFill(); return;}
				let s = d3.scaleLinear().domain([100,0]).range(["#F8F2FF", "#6A0D98"]);
				thisElement.style.fill = s(tU['reporting']);
				continue;
			} else if (stat == "margin"){
				if(vA.length == 1){if(vA[0] == 0){vA = [100,0]} else {vA.push(0)}};
				var s;
				switch (candA[0]) {
					case "d": s = d3.scaleLinear().range(["#e6f2ff", "#0069d9"]); break;
					case "r": s = d3.scaleLinear().range(["#ffe6e6", "#E00000"]); break;
					case "rp": s = d3.scaleLinear().range(["#cfb3ff", "#6a29a3"]); break;
					case "o": s = d3.scaleLinear().range(["#DEDEDE", "#808080"]); break;
					case "i": s = d3.scaleLinear().range(["#cfb3ff", "#6a29a3"]); break;
					case "yes": s = d3.scaleLinear().range(["#fde5ce", "#e66f00"]).clamp(true); break;
					case "no": s = d3.scaleLinear().range(["#e5cefd", "#4b1683"]).clamp(true); break;
					default: s = ""; break;
				}
				if(margin == 0){continue}
				if(s !== ""){thisElement.style.fill = s.domain([0,0.3])(margin)}

				if(selectedContest == "HOUSE" || selectedContest == "PRESIDENT BY CD"){
					var thisElementBox = document.getElementById("box-" + thisIndex);
					if(thisElementBox){
						if(thisWinner == "r"){thisElementBox.classList.add("districtBoxRep")}
							if(thisWinner == "d"){thisElementBox.classList.add("districtBoxDem")}
							if(thisWinner == "i"){thisElementBox.classList.add("districtBoxInd")}
					}
				}
			} else if (stat == "turnout") {
				if(!thisUnit['total_vote']){
					var voteShift = 0;
				} else {
					var voteShift = (thisUnit['total_vote'] / thisState['t'+ shortPresYear])-1;
				}
				let s = d3.scaleLinear()
					.domain([-0.35, -0.01, 0.01, 0.35])
					.range(["#E00000", "#fff0f0", "#f0fff0", "#00E000"]).clamp(true);

				thisElement.style.fill = s(voteShift);
			} 

			if (d3.select("#data").attr("button-trumpDem") == "true") {
					var w22 = "", w20 = "";
					if(selectedContest == "HOUSE"){
						var tI = d3.select("#"+thisIndex);
						var clickedState = tI.attr("data-stateabbreviation");
						var clickedCD = tI.attr("data-districtnumber");
						var thisCD = clickedState + "-" + clickedCD;
						var thisUnitCD = data_pres_cd[selectedYear][thisCD];
						if(thisUnitCD){
							if(thisUnitCD['d' + shortPresYearPrev] > thisUnitCD['r' + shortPresYearPrev]){
								w20 = "d"
							} else {
								w20 = "r"
							}
							if(selectedYear == "2024"){
								w22 = data_house["2022-"+thisCD].winner;
							} else {
								w22 = data_house[selectedYear+"-"+thisCD].winner;
							}
						}
					} else {
						var w20 = thisState['w' + shortPresYear]; var w22 = thisUnit.winner;
					}
					
					if(w22 !== "runoff" && w22 !== "" && w22 !== "r" && w20 == "r"){
						addClassFromWinner(thisElement, thisWinner);
						addClassFromWinnerHouseBox(thisIndex, thisUnit, thisWinner);
					} else {
						if(selectedContest == "HOUSE"){
							if(selectedYear == "2024"){
								let tGBox = document.getElementById("groupBox-" + thisIndex);
								if (tGBox) {tGBox.classList = "cdBox cdGroupBoxPollsClosed"}
							} else {
								let thisElementBox = document.getElementById("box-" + thisIndex)
								if(tEBox){tEBox.classList = "districtBox districtBoxPollsClosed"}
							}
						}
						if(selectedYear !== "2024"){thisElement.classList.add("noProjection")}
						continue;
					}
				} else if (d3.select("#data").attr("button-bidenGop") == "true") {
					var w22 = "", w20 = "";
					if(selectedContest == "HOUSE"){
						var clickedState = d3.select("#"+thisIndex).attr("data-stateabbreviation");
						var clickedCD = d3.select("#"+thisIndex).attr("data-districtnumber");
						var thisUnitCD = data_pres_cd[selectedYear][clickedState + "-" + clickedCD];
						if(thisUnitCD){
							if(thisUnitCD['d' + shortPresYearPrev] > thisUnitCD['r' + shortPresYearPrev]){
								w20 = "d"
							} else {
								w20 = "r"
							}
							if(selectedYear == "2024"){
							w22 = data_house["2022-"+clickedState +"-"+clickedCD].winner;
							} else {
							w22 = data_house[selectedYear+"-"+clickedState +"-"+clickedCD].winner;
							}
						}
					} else {
						var w20 = thisState['w' + shortPresYear]; var w22 = thisUnit.winner;
					}
					
					if(w22 !== "runoff" && w22 !== "" && w22 !== "d" && w20 == "d"){
						addClassFromWinner(thisElement, thisWinner);
						addClassFromWinnerHouseBox(thisIndex, thisUnit, thisWinner);
					} else {
						if(selectedContest == "HOUSE"){
							if(selectedYear == "2024"){
								let tGBox = document.getElementById("groupBox-" + thisIndex);
								if (tGBox) {tGBox.classList = "cdBox cdGroupBoxPollsClosed"}
							} else {
								let tEBox = document.getElementById("box-" + thisIndex)
								if(tEBox){tEBox.classList = "districtBox districtBoxPollsClosed"}
							}
						}
						if(selectedYear !== "2024"){thisElement.classList.add("noProjection")}
						continue;
					}
				} else if (stat == "swing") {
					var vote = {};
					vote[thisUnit['cand1_party']] = thisUnit['cand1_vote'];
					if(thisUnit['cand2_party']){vote[thisUnit['cand2_party']] = thisUnit['cand2_vote'];
					if(thisUnit['cand3_party']){vote[thisUnit['cand3_party']] = thisUnit['cand3_vote'];
					if(thisUnit['cand4_party']){vote[thisUnit['cand4_party']] = thisUnit['cand4_vote']}}}

					var tVote = thisUnit['total_vote']; var presTotalVote = thisState['t' + shortPresYear];
					var thisD = vote['d'] / tVote; var prevD = thisState['d' + shortPresYear] / presTotalVote;
					var thisR = vote['r'] / tVote; var prevR = thisState['r' + shortPresYear] / presTotalVote;

					var swing = (thisD-thisR) - (prevD-prevR); var absSwing = Math.abs(swing)
					if(absSwing >= 0.25){var marginProg = 1} else {var marginProg = absSwing / 0.25};

					let scale = d3.scaleLinear()
						.domain([-0.25, -0.01, 0, 0.01, 0.25])
						.range(["#E00000", "#FFE6E6", "#f0f0f0", "#E6F2FF", "#0069D9"]);
					thisElement.style.fill = scale(swing);
				} else {
				if(selectedContest == "HOUSE" || selectedContest == "PRESIDENT BY CD"){
					var thisElementBox = document.getElementById("box-" + thisIndex)
					if(thisElementBox){
					thisElementBox.classList = "districtBox";
					if (thisUnit['gain'] == "1") {thisElementBox.classList.add("districtBoxGain")}
//					if (thisUnit['reporting'] <= 0){thisElementBox.classList.add("districtBoxPollsClosed")}
					if (thisWinner == "r") {thisElementBox.classList.add("districtBoxRep")}
					if (thisWinner == "d") {thisElementBox.classList.add("districtBoxDem")}
					if (thisWinner == "i") {thisElementBox.classList.add("districtBoxInd")}

					var thisGroupBox = document.getElementById("groupBox-" + thisIndex)
					if(thisGroupBox){
						if(selectedYear == "2024"){
							if(thisGroupBox.classList.contains("cdGroupBoxPollsClosed") == "true"){
								thisGroupBox.classList = "cdBox cdGroupBoxPollsClosed";
							} else {
								thisGroupBox.classList = "cdBox"
							}
							if (thisUnit['gain'] == "1") {thisGroupBox.classList.add("cdGroupBoxGain")}
							if(thisWinner == "r"){thisGroupBox.classList.add("cdGroupBoxRep")}
							if(thisWinner == "d"){thisGroupBox.classList.add("cdGroupBoxDem")}
							if(thisWinner == "i"){thisGroupBox.classList.add("cdGroupBoxInd")}
						}
					}
				}}

				if(thisUnit['total_vote'] > 0){
					let voteObj = [];
					for (let i = 1; i <= 8; i++) {let cN = "cand"+i; voteObj.push(thisUnit[cN + "_vote"])}
					voteObj = voteObj.filter(Boolean); voteObj.sort(function(a, b) {return b - a;});
					if(voteObj[0] - voteObj[1] == 0 && voteObj[0] + voteObj[1] !== 0){thisWinner = "tie"; thisUnit['winner'] = "tie"}
				}

				// if(selectedContest == "HOUSE"){reorderDistrictBox()};
				if (thisIndex !== "United States" && thisElement){
					if (thisWinner == "tie") {
						thisElement.classList.add("tieState");
						if(selectedContest == "HOUSE"){
							var tCB = document.getElementById("box-" + thisIndex);
							tCB.classList.add("districtBoxTie");
						}
					}

					addClassFromWinner(thisElement, thisWinner)
				}	
			}
	}
}

function addClassFromWinner(e, w, b) {
	var d = d3.select("#data");
	if(b == true){if(w == ""){e.classList.add("noProjection")}}
	if(w !== ""){
	let c;
	switch(w) {
		case "r": c = "redState"; break;
		case "d": c = "blueState"; break;
		case "gw": c = "orangeState"; break;
		case "tie": c = "tieState"; break;
		case "o": c = "othState"; break;
		case "i": c = "indState"; break;
		case "yes": c = "yesState"; break;
		case "no": c = "noState"; break;
		case "runoff": c = "runoffState"; break;
		case "u": c = "uState"; break;
		case "rp": c = "rpState"; break;
		case "d1": c = "d1State"; break;
		case "d2": c = "d2State"; break;
		case "d3": c = "d3State"; break;
		case "d4": c = "d4State"; break;
		case "d5": c = "d5State"; break;
		case "d6": c = "d6State"; break;
		case "d7": c = "d7State"; break;
		case "d8": c = "d8State"; break;
		case "d9": c = "d9State"; break;
		case "d10": c = "d10State"; break;
		case "d11": c = "d11State"; break;
		case "r1": c = "r1State"; break;
		case "r2": c = "r2State"; break;
		case "r3": c = "r3State"; break;
		case "r4": c = "r4State"; break;
		case "r5": c = "r5State"; break;
		case "r6": c = "r6State"; break;
		case "r7": c = "r7State"; break;
		case "r8": c = "r8State"; break;
		case "r9": c = "r9State"; break;
		case "r10": c = "r10State"; break;
		case "r11": c = "r11State"; break;
	}
	if(c !== ""){e.classList.add(c)}
	}
}

function addClassFromWinnerHouseBox(i, u, w) {
	var d = d3.select("#data");
	if(d.attr("button-contest") == "HOUSE") {
		let tGBox = document.getElementById("groupBox-" + i);
		if(tGBox) {
			if(d.attr("button-year") == "2024") {
				tGBox.classList = "cdBox"
				let gBoxClass = "";
				if(u['gain'] == 1) {gBoxClass += "cdGroupBoxGain"}
				switch(w) {
					case "r": gBoxClass += "Rep"; break;
					case "d": gBoxClass += "Dem"; break;
					case "i": gBoxClass += "Ind"; break;
				}
				if(gBoxClass) {tGBox.classList.add("cdGroupBox" + gBoxClass)}
			}
		}
	}
}

function clickedFunction(input) {
	var dragStatus = d3.select("#data").attr("drag-status");
	if(d3.select("#data").attr("button-road270") == "true") {
		var clickedState = input.getAttribute('id'), cA = document.getElementById(clickedState).classList,
		party = d3.select("#data").attr("data-road270-party");

		switch(party) {
			case 'm':
				if(cA.contains('redState')) {cB='state'} else if(cA.contains('blueState')) {cB='r'} else {cB='d'}
				break;
			case 'd':
				if(cA.contains('blueState') || cA.contains('blueProj')) {cB='state'} else {cB='d'}; break;
			case 'r':
				if(cA.contains('redState') || cA.contains('redProj')) {cB='state'} else {cB='r'}; break;
			case 't':
				cB = ''; break;
		}

		dataElement.setAttribute("clicked-270", clickedState);
		addElectoralVoteMap(clickedState, cB);
		return;
	} else if(d3.select("#data").attr("button-graphics") == "true") {
		var clickedState = input.getAttribute('id'); 
		d3.select("#data").attr("data-stateclick", clickedState);
//		d3.select("#headingBoxRoadTo270").style("display","none");
//		d3.select("#headingTextTitle").text(clickedState);
		showStateGraphic(clickedState);
	} else {
		var thisState = input.getAttribute('data-state');
		var countyMap = d3.select("#data").attr("button-county");
		var selectedYear = d3.select("#data").attr("button-year");
		var selectedContest = d3.select("#data").attr("button-contest");
		var clickedState = d3.select("#data").attr("data-stateclick");
		const lastClicked = d3.select("#data").attr("last-clicked");
		var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();

		var clicked = input.getAttribute('id'); if(clicked == "drawIcon" || clicked == pathDrawn) {return};
	//	console.log(clicked);
		if(countyMap == "true" && thisState !== clickedState) {
			var clicked = input.getAttribute('data-state'), input = document.getElementById(clicked);
			zoomToPath(clicked, 750);

			if(lastClicked !== "United States") {d3.select("[id='" + lastClicked + "']").lower()}
			if(clickedState !== "United States") {d3.select("[id='" + clickedState + "']").lower()}
		};

		if((selectedContest == "STATE HOUSE" || selectedContest == "STATE SENATE" || selectedContest == "HOUSE" || selectedContest == "D-HOUSE" || selectedContest == "R-HOUSE" || selectedContest == "PRESIDENT BY CD") && thisState !== clickedState) {
			var district = (input.getAttribute('data-district')).substring(3, 5);
			var atLarge = input.getAttribute('data-districtatlarge');
			var svgZoom = d3.zoomTransform(d3.select("#mainG").node()).k;

			if(atLarge !== "true") {
				d3.select("#data").attr("data-levelcd", null);
				var thisState = input.getAttribute('data-state');
				var clicked = thisState; var input = document.getElementById(clicked);
			} else {
				d3.select("#data").attr("data-levelcd", "atlarge");
			}

			d3.select("#buttonHistory").style("display", "none");

			if(clicked !== "United States"){
				d3.selectAll(`.hd:not([data-state="${thisState}"]), .sd:not([data-state="${thisState}"])`)
					.classed("notSelectedState", true);
			}

			if(clickedState !== "United States") {
				d3.select("[id='" + clickedState + "']").lower().classed("selectedState", false);
				d3.select(input).lower();
			}

		} else if(+selectedYear >= 2018) {d3.select("#buttonHistory").style("display","flex")}

		d3.selectAll(".selectedCounty").classed("selectedCounty", false);
		d3.select("#data").attr("last-clicked", clicked);

		if(input.getAttribute('data-countyname') || input.getAttribute('data-township')) {
			setCountyName(input, thisState);
		} else if(input.getAttribute('data-region')) {
			showResults()

			var tAbbrev = input.getAttribute('data-stateabbreviation');

			d3.select("#data")
				.attr("data-state", null)
				.attr("data-level", "state")
				.attr("data-stateabbreviation", tAbbrev)
				.attr("data-stateclick", thisState);

//			updateContestText();

			if(!selectedContest.includes("HOUSE") && selectedContest !== "STATE SENATE" && selectedContest !== "PRESIDENT BY CD") {
				getYearsContest();
				document.getElementById('buttonYear' + selectedYear).scrollIntoViewIfNeeded();

				setResultsBoxTopTextState(tAbbrev);
//				setElectoralVoteText(thisState);

				if(countyMap !== "true") {
					d3.selectAll(`.county:not([data-state="${thisState}"])`).style("display", "none");
					d3.selectAll(`.township:not([data-state="${thisState}"])`).style("display", "none");
				}

				d3.selectAll('.county[data-state="' + clicked + '"]').style('display', 'initial');
				d3.selectAll('.township[data-state="' + clicked + '"]').style('display', 'initial');
				d3.selectAll(".state").classed("notSelectedState", true);
				d3.selectAll(".selectedState").classed("selectedState", false);

				scaleHeadingText();

			} else if(selectedContest == "HOUSE" || selectedContest == "PRESIDENT BY CD") {

				highlightStateDistrict(yrShort, thisState);

				d3.selectAll(".districtBox:not([data-district-state='"+thisState+"'])").style("display", "none");
				d3.selectAll(".districtBox[data-district-state='"+thisState+"']").style("display", "initial");
				// reorderDistrictBox();

				if(selectedContest == "HOUSE") {
					clearInnerHTML('resultsBoxTopText');
					d3.selectAll(".votesBox").html("0");
					d3.select("#resultsBoxHouse").classed("hidden", false)
				}
			} else if(selectedContest == "STATE HOUSE") {
				d3.selectAll(".state").classed("notSelectedState", true);
				highlightStateDistrict(yrShort, thisState, "hd");
			} else if(selectedContest == "STATE SENATE") {
				d3.selectAll(".state").classed("notSelectedState", true);
				highlightStateDistrict(yrShort, thisState, "sd");
			}

			d3.select("[id='" + thisState + "']")
				.classed("selectedState", true)
				.raise();

			zoomToState(thisState, 750);
			setPointLabels(thisState);

		} else if(input.getAttribute('data-district')) {
			d3.select('#resultsBoxTopText')
				.text("District " + +(input.getAttribute('data-districtnumber')))
				.style("transform", 'scaleX(1)');

			if(d3.select("#data").attr("data-levelcd") == "atlarge"){setPointLabels(thisState)}
			if(input.getAttribute('data-districtatlarge') == "true"){
				zoomToDistrict(clicked);
				d3.select("#data").attr("data-stateclick", thisState)
			} else {
				if(d3.select("#data").attr("data-level") == "state"){
					if(selectedYear == "2024" || selectedContest == "PRESIDENT BY CD"){
						d3.select("#data").attr("data-state", thisState).attr("data-level", "county");
						zoomToState(thisState, 666)
					}
				}
			}

			d3.select("#data")
				.attr("data-state", thisState)
				.attr("data-level", "county");

			showResults();
			d3.select("#resultsBoxHouse").classed("hidden", true)
			d3.selectAll(".cd").classed("notSelectedState", true);

			d3.select("[id='" + thisState + "']").lower();

			d3.select(input)
				.raise()
				.classed("notSelectedState", false)
				.classed("selectedCounty", true);
		}

		if(countyMap == "true") {d3.selectAll(".county").style("display", "initial")}

		setInnerHTML('headingTextTitle', thisState); scaleHeadingText();
		refreshLabelsPath();
		getResults();
		if(d3.select("#data").attr("button-history") == "true") {updateHistory()}
	}
}

function setCountyName(input, state){
	var type = countyTypes[input.getAttribute('data-countytype')] || " ";
	var name = input.getAttribute('data-township') || input.getAttribute('data-county');

	d3.select("#data").attr("data-state", state).attr("data-level", "county");
	d3.select("[id='" + state + "']").raise();
	d3.select(input).classed("selectedCounty", true).raise();

	setInnerHTML('resultsBoxTopText', name + " <ct>" + type + "</ct>");
	scaleTextWH('resultsBoxTopText', 0.235);
}

function setElectoralVoteText(i){
	var data = d3.select("#data"), year = data.attr("button-year");
	var a = stateAbbreviation[i]; if(i == "United States"){a = "US"}

	var selectedContest = data.attr("button-contest");

	var display = "hidden";
	if(selectedContest == "PRESIDENT"){
		if(year >= 1952){display = "visible"}
		if(i == "United States"){
			var eV = electoralVotes['United States'][year];
			var evText = "needed<br>to win";
		} else {
			var eV = electoralVotes[i][year];
			var evText = "electoral<br>votes";
			if(i == "Maine" || i == "Nebraska") {evText = "split<br>elec. votes"}
		}
		setInnerHTML('headingElectoralVotesNumber', eV);
		setInnerHTML('headingElectoralVotesText', evText);
	} else if (year == "2024") {
		if(selectedContest == "DEM PRESIDENT") {
			display = "visible";
			if(i !== "United States"){
				setInnerHTML('headingElectoralVotesText', "pledged<br>delegates")
			} else {
				setInnerHTML('headingElectoralVotesText', "needed for<br>nomation")
			}
			var dC = delegates[year]['D'][a]['delegates'];
			setInnerHTML('headingElectoralVotesNumber', numF.format(dC));
		} else if(selectedContest == "GOP PRESIDENT") {
			display = "visible";
			if(i !== "United States"){
				setInnerHTML('headingElectoralVotesText', "pledged<br>delegates")
			} else {
				setInnerHTML('headingElectoralVotesText', "needed for<br>nomation")
			}
			var dC = delegates[year]['R'][a]['delegates'];
			setInnerHTML('headingElectoralVotesNumber', numF.format(dC));
		}
	}
	d3.select("#headingElectoralVotes").style('visibility', display);
}

d3.select('#resultsBoxTop').on('click', toggleTownships);

function toggleTownships(){
	var currentStatus = d3.select("#data").attr("data-township");
	if(currentStatus == "show"){
		d3.select("#data").attr("data-township","hide");
		d3.selectAll(".township")
			.lower().attr("visibility","hidden")
			.style("display","none")
			.attr("pointer-events", "none");
		var clickedState = d3.select("#data").attr("data-stateclick");
		d3.selectAll(".county").raise();
		d3.select("[id='" + clickedState + "']").raise();
		refreshLabelsPath();
	} else {
		d3.select("#data").attr("data-township","show");
		var clickedState = d3.select("#data").attr("data-stateclick");
		d3.selectAll('.township')
			.attr("visibility","visible").attr("pointer-events", "painted")
			.style('display', 'initial').raise();
		d3.selectAll('.state').raise();
		d3.select("[id='" + clickedState + "']").raise()
		refreshLabelsPath();
	}
}

function showTownships(){
	d3.select("#data").attr("data-township","show");
	if(dataElement.getAttribute("button-county") !== "true"){
		var clickedState = d3.select("#data").attr("data-stateclick");
		d3.selectAll('.township')
			.attr("visibility","visible").attr("pointer-events", "painted")
			.style('display', 'initial').raise();
		d3.selectAll('.state').raise();
		d3.select("[id='" + clickedState + "']").raise()
	}

	var lastClicked = d3.select("#data").attr("last-clicked");
	d3.select("[id='" + lastClicked + "']").raise();
}

function hideTownships(){
	d3.select("#data").attr("data-township","hide");
	d3.selectAll(".township")
		.attr("visibility","hidden")
		.lower()
		.style("display","none")
		.attr("pointer-events", "none");

	var clickedState = d3.select("#data").attr("data-stateclick");
	var lastClicked = d3.select("#data").attr("last-clicked");

	d3.selectAll(".county").raise();
	d3.select("[id='" + clickedState + "']").raise();
	d3.select("[id='" + lastClicked + "']").raise();
}

function returnHome() {
	var attributeState = d3.select("#data").attr("data-level");
	dataElement.setAttribute("drag-status", "false");

	var dE = d3.select("#data");
	var selectedYear = d3.select("#data").attr("button-year");
	var selectedContest = d3.select("#data").attr("button-contest");
	var historyStatus = d3.select("#data").attr("button-history");
	var countyStatus = d3.select("#data").attr("button-county");
	var stateClick = d3.select("#data").attr("data-stateclick");
	var statStatus = d3.select("#data").attr("button-stats");
	var filterStatus = d3.select("#data").attr("status-filter");
	var aheadStatus = d3.select("#data").attr("data-aheadvalue");

	if (d3.select("#data").attr("button-graphics") == "true"){
		d3.select("#data").attr("data-stateclick", "United States");
		d3.select("#appGraphics_bkgd").style('display','none');
		d3.select("#appGraphics_bkgd_gradient").style('display','none');
		d3.selectAll(".aG_imageBox, .aG_imageBorder").style('display','none');
		d3.selectAll("#appGraphics img").style('display','none');

		d3.select("#nationalMap").style('display','initial');
		d3.select("#appGraphics_heading").style('display','none');
		d3.select("#appGraphics_text").style('display','none');
		d3.select("#appGraphics_tetc_text").style('display','none');
/*		d3.selectAll(".state")
			.classed('noProjection',false)
			.style('display','initial')
			.style("stroke-width", null);
		resetBox(0.345,0.635,1,1,0);
*/
		return;
	}

	if (dE.attr("button-voteview") == null){dE.attr("button-voteview","vote")}
	if (countyStatus == null) {dE.attr("button-county", "false")}
	if (aheadStatus == null) {dE.attr("data-aheadvalue", "ahead")}
	if (dataElement.getAttribute("button-road270") == "true"){resetBox(0.255,0.745,750,0.95)} else {
	if (dE.attr("button-stats") == "true" || dE.attr("button-filters") == "true"){hideStats()} else {
	if (countyStatus == "true" && stateClick == "United States"){clickCounty()} else {
	if (historyStatus == "true"){hideHistory()} else {
	if (stateClick == "United States" && filterStatus == "true"){removeFilters()} else {

	hideStats();

	if(d3.select("#data").attr("data-levelcd") == "atlarge"){
		var thisCountyState = "United States";
		var lastClicked = d3.select("#data").attr("last-clicked");
	
		d3.select("[id='" + lastClicked + "']").classed("selectedCounty", false);
		d3.select("#data")
			.attr("last-clicked", "United States")
			.attr("data-stateclick", "United States")
			.attr("data-state", null)
			.attr("data-level", null)
			.attr("data-stateabbreviation", null);

		refreshLabelsPath();

		d3.select("#buttonHistory").style("display", "none");

		if (countyStatus !== "true") {d3.selectAll('.county .township').style("display", "none")}

		d3.selectAll('.districtBox').style('display', 'initial');
		d3.selectAll(".state.selectedState").classed("selectedState", false);
		d3.selectAll('.notSelectedState').classed('notSelectedState', false);

		reset(1000);
		hideResults()
		clearPointLabels();
	} else {

	if (attributeState == "county") {
		var candidateLength = 2;
		var lastClicked = d3.select("#data").attr("last-clicked");
		var thisCountyState = d3.select("#data").attr("data-state");
		var stateAbbreviation = d3.select("#data").attr("data-stateabbreviation");

		if(!selectedContest.includes("HOUSE")){
			setResultsBoxTopTextState(stateAbbreviation);
		} else {
			d3.selectAll(".votesBox").html("0")
		}

		d3.selectAll("#headingElectoralVotesNumber, #headingElectoralVotesText").style("display", "initial");
		d3.select("[id='" + lastClicked + "']").classed("selectedCounty", false).classed("selectedState", false);

		d3.select("#data")
			.attr("data-state", null)
			.attr("data-level", "state")
			.attr("drag-status", "false")
			.attr("last-clicked", thisCountyState);

		zoomToState(stateClick, 750);
		refreshLabelsPath();

		if(selectedContest.includes("HOUSE") || selectedContest == "PRESIDENT BY CD"){
//			d3.selectAll(".districtBox:not([data-district-state='" + stateClick + "'])").style("display", "none");
//			d3.selectAll(".districtBox[data-district-state='" + stateClick + "']").style("display", "initial");

	// FLAG 01-05
			if(selectedContest !== "PRESIDENT BY CD"){
				d3.select("#resultsBoxHouse").classed("hidden",false);
			}

			d3.select("#buttonHistory").style("display", "none")
			var yrShort = selectedYear.slice(-2).toString();
			highlightStateDistrict(yrShort, stateClick);
		}

		d3.select("[id='" + stateClick + "']").classed("selectedState", true).raise();
		getResults();
	} else if (d3.select("#data").attr("last-clicked") == "United States") {
		hideResults();
	} else {
		hideResults()
		d3.select("#data").attr("last-clicked", "United States");
		var dataResults = data_president['United States'];

		setElectoralVoteText("United States");

		if(selectedContest !== "HOUSE" && selectedContest !== "PRESIDENT BY CD"){
			d3.selectAll(".state").classed("notSelectedState", false);
		}

		if(countyStatus !== "true"){
			d3.selectAll(".county, .township").style("display", "none");
		}

		d3.selectAll(".state.selectedState").classed("selectedState", false);
		d3.selectAll(".hd.selectedState").classed("selectedCounty", false);
//		d3.selectAll(".sd.selectedState").classed("selectedState", false);
		d3.selectAll(".notSelectedState").classed("notSelectedState", false);

		d3.select("#pathDrawn").raise();
		if(stateClick){d3.select("[id='" + stateClick + "']").lower()}

		d3.select("#data")
			.attr("data-state", null)
			.attr("data-stateabbreviation", null)
			.attr("data-level", null)
			.attr("data-stateclick", "United States");

		reset(1000);
		getYearsContest();
		clearPointLabels();
	}}}}

	if(thisCountyState) {setInnerHTML('headingTextTitle', thisCountyState); scaleHeadingText();}

	}

	dataElement.removeAttribute("data-levelcd")

	if(d3.select("#data").attr("last-clicked") == "United States"){
		if(selectedContest !== "HOUSE") {
			d3.select("#data").attr("button-contest-suffix",null)
			updateContestText();
		} else {
//			if(selectedYear == "2024"){
//	 			d3.select("#headingTextContest").html(null);
//		 		d3.select("#headingTextTitle").text("HOUSE")
//			} else {
				d3.select("#headingTextContest").html(selectedYear + " HOUSE");
		 		d3.select("#headingTextTitle").text("United States")			
//			}
		}
	}
	

	}}
}

function highlightStateDistrict(a, b, c){
	var c = c || "cd";
	d3.selectAll(`.${c}${a}`).classed("notSelectedState", false);
	d3.selectAll(`.${c}${a}:not([data-state="${b}"])`).classed("notSelectedState", true);
}

function setResultsBoxTopTextState(a){
	d3.select('#resultsBoxTopText').html("");
	var resText = a + ' STATEWIDE';
	if (a == "DC") {resText = 'WASHINGTON, D.C.'}
	d3.select('#resultsBoxTopText').text(resText);
	scaleTextWH('resultsBoxTopText', 0.235);
}

function setInnerHTML(i, a){document.getElementById(i).innerHTML = a}
function clearInnerHTML(i){document.getElementById(i).innerHTML = ""}

function updateHistory(){
	var year = d3.select("#data").attr("button-year"), contest = d3.select("#data").attr("button-contest");
	if (year !== "2024" && contest !== "PRESIDENT") {
		if (year % 4 == 0 && contest !== "PRESIDENT") {year = +year + 1}
	}

	if (year % 4 !== 0) {year = Math.ceil(year / 4) * 4}

	var a = year-4, b = year - 8, c = year - 12, d = year - 16;

	setHistoryResultsYear(a.toString(), "One"); setHistoryResultsYear(b.toString(), "Two");
	setHistoryResultsYear(c.toString(), "Three"); setHistoryResultsYear(d.toString(), "Four");
}

function setHistoryResultsYear(year, slot){
	var r = getHistoryResultsYear(year, slot);
	if(r == undefined){
		d3.selectAll("#historyPanel" + slot + " span").html("");
		d3.select('#historyPanel'+slot).style("display","none"); return;
	};

	var tP = 'historyPanel' + slot, tPC = tP + "Cand";
	setInnerHTML(tP + 'Year', year);
	setInnerHTML(tP + 'Contest', r.margin); setInnerHTML(tP + 'Total', numF.format(r.totalVotes));

	setInnerHTML(tPC + '1Name', r.name1); setInnerHTML(tPC + '2Name', r.name2); setInnerHTML(tPC + '3Name', r.name3);

	setInnerHTML(tPC + '1Perc', r.perc1 + "<a1p>%</a1p>");
	setInnerHTML(tPC + '2Perc', r.perc2 + "<a1p>%</a1p>");
	setInnerHTML(tPC + '3Perc', r.perc3 + "<a1p>%</a1p>");

	setInnerHTML(tPC + '1Vote', numF.format(r.vote1));
	setInnerHTML(tPC + '2Vote', numF.format(r.vote2));
	setInnerHTML(tPC + '3Vote', numF.format(r.vote3));

	scaleTextWH(tPC + '1Name', 0.12, 0.75); scaleTextWH(tPC + '2Name', 0.12, 0.75); scaleTextWH(tPC + '3Name', 0.12, 0.75);

	colorHistoryPanel(slot, r.party1, r.party2, r.party3, r.margin);
}

function getHistoryResultsYear(year, slot){
	var clickedYear = d3.select("#data").attr("button-year"), lastClicked = d3.select("#data").attr("last-clicked");
	var contest = d3.select("#data").attr("button-contest");

	var yearS = year.toString(); var sYear = yearS.slice(-2);

	if(contest == "HOUSE"){if(typeof data_pres_cd[clickedYear] !== 'undefined'){var results = data_pres_cd[clickedYear][lastClicked]} else {hideHistory(); return}} else {var results = data_president[lastClicked]}

	if (typeof results == 'undefined') {
		document.getElementById('historyPanel' + slot).style.display = "none"; return;
	}
	
	if(results["d" + sYear] == undefined){historyPanelDisplay = "none"} else {historyPanelDisplay = "initial"}
	d3.select('#historyPanel' + slot).style('display', historyPanelDisplay);

	if(results["t" + sYear] == undefined){var historyPanelVoteDisplay = "none"} else {var historyPanelVoteDisplay = "initial"}	
	d3.select('#historyPanel' + slot + 'Total').style('display', historyPanelVoteDisplay);
	d3.select('#historyPanel' + slot + 'Cand1Vote').style('display', historyPanelVoteDisplay);
	d3.select('#historyPanel' + slot + 'Cand2Vote').style('display', historyPanelVoteDisplay);
	d3.select('#historyPanel' + slot + 'Cand3Vote').style('display', historyPanelVoteDisplay);

	if (results["r" + sYear] == undefined){document.getElementById('historyPanel' + slot).style.display = "none"}
	if (results["t" + sYear] !== undefined || results["t" + sYear] < 0){var totalVotes = results["t" + sYear]} else {var totalVotes = 100}
	var dVotes = results["d" + sYear], rVotes = results["r" + sYear], gwVotes = results["r" + sYear];

	let candidateVote = {"d": results["d" + sYear], "r": results["r" + sYear], "gw": results["gw" + sYear], "g": results["g" + sYear], "o": results["o" + sYear], "u": results["u" + sYear], "rp": results["rp" + sYear], "l": results["l" + sYear], "em": results["em" + sYear]};

	for (let a in candidateVote) {if(candidateVote[a] === undefined) {delete candidateVote[a]}}

	const cand = Object.keys(candidateVote).sort(function(a, b) {return candidateVote[b] - candidateVote[a]});
	const vote = Object.values(candidateVote).sort((a, b) => b - a);

	var name1 = presCandidates[year][cand[0] + 'Surname']; var name2 = presCandidates[year][cand[1] + 'Surname'];
	var votes1 = vote[0]; var votes2 = vote[1]; var otherVote = totalVotes - vote[0] - vote[1];

	if(vote[2] > otherVote-vote[2]){
		var votes3 = vote[2], name3 = presCandidates[year][cand[2] + 'Surname'], party3 = cand[2];
	} else {
		var name3 = "Others", votes3 = otherVote, party3 = "o";
	};

	var perc1 = (votes1 / totalVotes * 100).toFixed(1); var perc2 = (votes2 / totalVotes * 100).toFixed(1);
	var perc3 = (votes3 / totalVotes * 100).toFixed(1);
	var margin = ((votes1 - votes2) / totalVotes * 100).toFixed(1);

	if(totalVotes == 0){perc1=perc2=perc3=0}

	if(margin < 1){var margin = ((votes1 - votes2) / totalVotes * 100).toPrecision(2)}
	if(margin < 0.05){var margin = ((votes1 - votes2) / totalVotes * 100).toPrecision(1)}
	if(isNaN(margin) == true){var margin = "--"} else if(margin == 0){var margin = "EVEN"} else {var margin = cand[0] + "+ " + margin}
	
	return {"margin": margin,"totalVotes":totalVotes,"party1":cand[0],"party2":cand[1],"party3": party3,"name1":name1,"perc1":perc1,"vote1":votes1,"name2":name2,"perc2":perc2,"vote2":votes2,"name3":name3,"perc3":perc3,"vote3":votes3};
}

function prevYear(year, ago){return (year - 4 *ago).toString().slice(-2)}

function colorHistoryPanel(slot, party1, party2, party3, margin) {
	const colors = {"d":"rgb(10,65,125)","r":"rgb(129,10,20)","l":"rgb(179,125,0)","em":"rgb(79,36,122)", "o":"rgb(45,45,45)","i":"rgb(79,36,122)","rp":"rgb(79,36,122)","gw":"rgb(179,87,0)","u":"rgb(179,125,0)","g":"rgb(46,83,7)"};

	var mC, tP = '#historyPanel' + slot;
	if(margin == "EVEN"){mC = "rgb(45,45,45)"} else {mC = colors[party1]}

	d3.select(tP + 'Contest').style("color",mC);
	d3.selectAll(tP +"Cand1 span").style("color",colors[party1]);
	d3.selectAll(tP +"Cand2 span").style("color",colors[party2]);

	if(party3 !== undefined){
		d3.selectAll(tP +"Cand3 span").style("color",colors[party3]);
	} else {
		d3.selectAll(tP +"Cand3 span").style("color",colors.o);
	}
}

const previousYears = {"24":"20","20":"16","16":"12","12":"08","08":"04","04":"00","00":"96","96":"92","92":"88","88":"84","84":"80","80":"76","76":"72","72":"68"}

const genPartyName = {"d":"Democratic<br>Candidate","d1":"Democratic<br>Candidate","d2":"Democratic<br>Candidate","r":"Republican<br>Candidate","r1":"Republican<br>Candidate","r2":"Republican<br>Candidate","i":"Other","g":"green","l":"Libertarian"};

var presCandidates = {"2024":{"dFirstName":"Joe","dSurname":"Biden","rFirstName":"","rSurname":"REPUBLICAN"},"2020":{"dFirstName":"Joe","dSurname":"Biden","rFirstName":"Donald","rSurname":"Trump","lFirstName":"Jo","lSurname":"Jorgensen"},"2016":{"dFirstName":"Hillary","dSurname":"Clinton","rFirstName":"Donald","rSurname":"Trump","lFirstName":"Gary","lSurname":"Johnson","emFirstName":"Evan","emSurname":"McMullin","gFirstName":"Jill","gSurname":"Stein"},"2012":{"dFirstName":"Barack","dSurname":"Obama","rFirstName":"Mitt","rSurname":"Romney"},"2008":{"dFirstName":"Barack","dSurname":"Obama","rFirstName":"John","rSurname":"McCain"},"2004":{"dFirstName":"John","dSurname":"Kerry","rFirstName":"George","rSurname":"Bush"},"2000":{"dFirstName":"Al","dSurname":"Gore","rFirstName":"George","rSurname":"Bush","gFirstName":"Ralph","gSurname":"Nader"},"1996":{"dFirstName":"Bill","dSurname":"Clinton","rFirstName":"Bob","rSurname":"Dole","rpFirstName":"Ross","rpSurname":"Perot"},"1992":{"dFirstName":"Bill","dSurname":"Clinton","rFirstName":"George H.W.","rSurname":"Bush","rpFirstName":"Ross","rpSurname":"Perot"},"1988":{"dFirstName":"Michael","dSurname":"Dukakis","rFirstName":"George H.W.","rSurname":"Bush"},"1984":{"dFirstName":"Walter","dSurname":"Mondale","rFirstName":"Ronald","rSurname":"Reagan"},"1980":{"dFirstName":"Jimmy","dSurname":"Carter","rFirstName":"Ronald","rSurname":"Reagan"},"1976":{"dFirstName":"Jimmy","dSurname":"Carter","rFirstName":"Gerald","rSurname":"Ford"},"1972":{"dFirstName":"George","dSurname":"McGovern","rFirstName":"Richard","rSurname":"Nixon"},"1968":{"dFirstName":"Hubert","dSurname":"Humphrey","gwFirstName":"George","gwSurname":"Wallace","rFirstName":"Richard","rSurname":"Nixon"},"1964":{"dFirstName":"Lyndon","dSurname":"Johnson","rFirstName":"Barry","rSurname":"Goldwater","uFirstName":"Unpledged","uSurname":"Democratic Electors"},"1960":{"dFirstName":"John","dSurname":"Kennedy","rFirstName":"Richard","rSurname":"Nixon","uFirstName":"Unpledged","uSurname":"Democratic Electors"},"1956":{"dFirstName":"Adlai","dSurname":"Stevenson","rFirstName":"Dwight","rSurname":"Eisenhower","uFirstName":"Unpledged","uSurname":"Democratic Electors"},"1952":{"dFirstName":"Adlai","dSurname":"Stevenson","rFirstName":"Dwight","rSurname":"Eisenhower","uFirstName":"Unpledged","uSurname":"Democratic Electors"},"1948":{"dFirstName":"Harry","dSurname":"Truman","rFirstName":"Thomas","rSurname":"Dewey","uFirstName":"Strom","uSurname":"Thurmond"},"1944":{"dFirstName":"Franklin","dSurname":"Roosevelt","rFirstName":"Thomas","rSurname":"Dewey","uFirstName":"Unpledged","uSurname":"Electors"},"1940":{"dFirstName":"Franklin","dSurname":"Roosevelt","rFirstName":"Wendell","rSurname":"Willkie"},"1936":{"dFirstName":"Franklin","dSurname":"Roosevelt","rFirstName":"Alf","rSurname":"Landon"},"1932":{"dFirstName":"Franklin","dSurname":"Roosevelt","rFirstName":"Herbert","rSurname":"Hoover"},"1928":{"dFirstName":"Al","dSurname":"Smith","rFirstName":"Herbert","rSurname":"Hoover"},"1924":{"dFirstName":"John","dSurname":"Davis","rFirstName":"Calvin","rSurname":"Coolidge"},"1920":{"dFirstName":"James","dSurname":"Cox","rFirstName":"Warren","rSurname":"Harding"}};

var countyTypes = {"99":"D.C.","06":"CO.","03":"CY.","05":"AREA","04":"Born.","12":"","15":"PAR.","25":"CY.","00":"DCT.","43":""}

d3.selectAll('[id^="buttonContest"]').on('click', clickButtonContest);
d3.select('#buttonPrev').on('click', clickButtonPrevNext);
d3.select('#buttonNext').on('click', clickButtonPrevNext);
d3.select('#buttonHistory').on('click', clickHistory);
d3.select('#buttonCounty').on('click', clickCounty);
d3.select('#buttonRoad270').on('click', click270);
d3.select('#buttonPollClosing').on('click', clickPollClosing);
d3.select('#buttonSenateWhatIf').on('click', clickSenateWhatIf);
d3.select('#buttonProjections').on('click', clickPresidentProjections);
d3.select('#buttonGraphics').on('click', clickGraphics);

function clickButtonPrevNext() {
	var thisID = this.getAttribute('id'); var clickedButtonID = document.getElementById(thisID).innerHTML;

	var currentYear = +d3.select("#data").attr("button-year");
	var selectedContest = d3.select("#data").attr("button-contest");

	var increments = {"PRESIDENT":4,"SENATE":6,"GOVERNOR":4,"HOUSE":2}; var step = increments[selectedContest];

	if(clickedButtonID == "PREV"){var newYear = currentYear - step};
	if(clickedButtonID == "NEXT"){var newYear = currentYear + step};

	selectButtonYear(newYear);
}

function selectButtonYear(inputYear) {
	dataElement.setAttribute("button-year", inputYear);
	d3.selectAll('[id^="buttonYear"]').classed('controlButtonSelected', false);

	document.getElementById('buttonYear' + inputYear).scrollIntoViewIfNeeded();
	d3.select('#buttonYear' + inputYear).classed('controlButtonSelected', true);

	updateContestText();
	getResults();
	refreshFill();
	updateTicketSplitButtons();

	if(d3.select("#data").attr("button-history") == "true") {updateHistory()}
}

function updateTicketSplitButtons(){
	var selectedYear = d3.select("#data").attr("button-year");
	if (selectedYear % 4 == 0) {
		var presYear = selectedYear.toString()
	} else {
		var presYear = (Math.floor(selectedYear / 4) * 4).toString()
	}

	d3.select("#buttonPresDGop").html(presCandidates[presYear]['dSurname'] + " - GOP" || "PRES D - GOP")
	d3.select("#buttonPresRDem").html(presCandidates[presYear]['rSurname'] + " - DEM" || "PRES R - DEM")
}

	var townshipContests = ["SENATE", "GOVERNOR", "SENATE SPECIAL", "SENATE RUNOFF", "SENATE SPECIAL RUNOFF", "DEM PRESIDENT", "GOP PRESIDENT", "SECRETARY OF STATE", "GOVERNOR RECALL", "LIEUTENANT GOVERNOR", "ATTORNEY GENERAL", "SUPREME COURT JUSTICE", "SUPERIOR COURT", "SENATE DEM", "SENATE REP", "GOVERNOR DEM", "GOVERNOR REP", "HOUSE", "D-HOUSE", "SECRETARY OF STATE DEM", "SECRETARY OF STATE REP", "PRESIDENT BY CD", "BALLOT MEASURE", "SECRETARY OF STATE REP", "SECRETARY OF STATE DEM", "ATTORNEY GENERAL", "LIEUTENANT GOVERNOR DEM", "LIEUTENANT GOVERNOR REP", "GOP PRESIDENT", "DEM PRESIDENT"];

	var primaryContests = ["DEM PRESIDENT", "GOP PRESIDENT", "SENATE DEM", "SENATE REP", "GOVERNOR DEM", "GOVERNOR REP", "R-HOUSE", "D-HOUSE", "SECRETARY OF STATE DEM", "SECRETARY OF STATE REP", "LIEUTENANT GOVERNOR DEM", "LIEUTENANT GOVERNOR REP"];

function clickButtonYear() {
	var thisID = this.getAttribute('id');
	var clickedButtonID = document.getElementById(thisID).innerHTML;

	var selectedContest = d3.select("#data").attr("button-contest");
	var selectedYear = d3.select("#data").attr("button-year");
	var clicked = d3.select("#data").attr("last-clicked");
	var stateClicked = d3.select("#data").attr("data-stateclick");

	dataElement.setAttribute("button-year", clickedButtonID);
	d3.selectAll('[id^="buttonYear"]').classed('controlButtonSelected', false);

	d3.select("#" + thisID).attr("class", "yearButton controlButton controlButtonSelected");

	var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
	var otherYearDistricts = d3.selectAll(`.cd:not(.cd${yrShort})`);
	otherYearDistricts.each(function() {
		const district = d3.select(this).attr("data-district");
		d3.select(this).attr("id", `${yrShort}_${district}`).style("display", "none");
	});

	if(selectedContest == "PRESIDENT") {
		if(clickedButtonID >= 2000) {
			showTownships()
		} else {
			hideTownships()
		}
	} else if(selectedContest == "GOP PRESIDENT" || selectedContest == "DEM PRESIDENT") {
			showTownships()
	} else if(townshipContests.includes(selectedContest)) {
		if(clickedButtonID >= 2016) {showTownships()} else {hideTownships()}
	}

	if(selectedContest == "HOUSE" && clickedButtonID == "2024"){
		document.getElementById("resultsHouseGroups").scrollTop = "0";
		d3.select("#resultsHouseGroups").classed("visible", true);
		if(clicked == "United States"){reset(500)} else if(stateClicked !== null && stateClicked !== "United States"){zoomToState(stateClicked,500)}
	} else {
		if(d3.select("#resultsHouseGroups").classed("visible")){
			if(clicked == "United States"){reset(500)} else if(stateClicked !== null){zoomToState(stateClicked,500)}
			d3.select("#resultsHouseGroups").classed("visible", false);
		}
	}

	if(selectedContest == "HOUSE" || selectedContest == "D-HOUSE" || selectedContest == "R-HOUSE") {
		document.getElementById("resultsBoxHouse").classList.remove('hidden');
		if(data_pres_cd[clickedButtonID] === undefined) {
			hideHistory();
			d3.select("buttonHistory").style("display", "none");
		} else {
			d3.select("buttonHistory").style("display", "intial")
		}

		d3.selectAll('.cd.selectedCounty, .cd.selectedState, .cd.notSelectedCounty, .cd.notSelectedState')
			.classed('selectedCounty', false).classed('selectedState', false)
			.classed('notSelectedCounty', false).classed('notSelectedState', false);

		if(clicked !== "United States"){d3.selectAll(`.cd:not([data-state="${stateClicked}"])`).classed("notSelectedState", true)};

		d3.selectAll(`.cd.cd${yrShort}`)
			.raise()
			.attr("id", function() {return d3.select(this).attr("data-district"); })
			.style("display", "initial");

		d3.selectAll(".township, .county").lower().style("display", "none");
		d3.selectAll(".state").style("fill", "rgb(107, 112, 123)");

		if(d3.select("#data").attr("data-level") !== "county" && clicked.includes("-") == false) {
			dataElement.setAttribute("data-stateclick", stateClicked);
		} else {
			var thisDistrictThisYear = document.querySelector(`[data-district="${clicked}"].cd.cd${yrShort}`);
			if(thisDistrictThisYear) {
				clickDistrictBox(clicked);
			} else {
				d3.select("#data").attr("data-stateclick", stateClicked).attr("last-clicked", stateClicked);
				zoomToState(stateClicked, 750);
				clearInnerHTML('resultsBoxTopText');
				if(clicked.includes("-") == false) { d3.select("[id='" + stateClicked + "']").raise() }
			}
		}

		if(stateClicked && stateClicked !== "United States") {
			if(!clicked.includes("-")) { d3.select("[id='" + stateClicked + "']").raise() };
			d3.selectAll(`.districtBox:not([data-district-state="${stateClicked}"])`).style("display", "none");
			d3.selectAll(`.districtBox[data-district-state="${stateClicked}"]`).style("display", "initial");
		}

		refreshLabelsPath();
		generateDistrictBoxes();
	} else if(selectedContest == "STATE HOUSE"){
		d3.select("#resultsBoxHouse").classList = "hidden";
		d3.select("#buttonHistory").style("display", "none");
		d3.select("#buttonCounty").style("display", "none");

		d3.selectAll('.hd.selectedState, .hd.notSelectedCounty, .hd.notSelectedState')
			.classed('selectedCounty', false).classed('selectedState', false)
			.classed('notSelectedCounty', false).classed('notSelectedState', false);

		if (clicked !== "United States") {
			d3.selectAll(`.hd:not([data-state="${stateClicked}"])`).classed("notSelectedState", true)
		}

		if(d3.select("#data").attr("button-county") == "true"){clickCounty()};

		d3.selectAll(".township, .county").lower().style("display","none");
		d3.selectAll(".state").lower().style("fill","rgb(107, 112, 123");

		const dataLevel = d3.select("#data").attr("data-level");
		if(dataLevel == "state" || dataLevel == "county"){d3.select("[id='" + stateClicked + "']").raise()}

		var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
		d3.selectAll(`.hd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`hd${yrShort}`)) {
      					d3.select(this)
        					.attr("id", "HD-" + district)
        					.style("display", "initial")
        					.raise();
				} else {
      					d3.select(this)
        					.attr("id", yrShort + "_" + "HD-" + district)
        					.style("display", "none");
    				}
  		});

		refreshLabelsPath();

	} else if(selectedContest == "STATE SENATE"){
		d3.select("#resultsBoxHouse").classList = "hidden";
		d3.select("#buttonHistory").style("display", "none");
		d3.select("#buttonCounty").style("display", "none");

		d3.selectAll('.sd.selectedState, .sd.notSelectedCounty, .sd.notSelectedState')
			.classed('selectedCounty', false).classed('selectedState', false)
			.classed('notSelectedCounty', false).classed('notSelectedState', false);

		if (clicked !== "United States") {
			d3.selectAll(`.sd:not([data-state="${stateClicked}"])`).classed("notSelectedState", true)
		}

		if(d3.select("#data").attr("button-county") == "true"){clickCounty()};

		d3.selectAll(".township, .county").lower().style("display","none");
		d3.selectAll(".state").lower().style("fill","rgb(107, 112, 123");

		const dataLevel = d3.select("#data").attr("data-level");
		if(dataLevel == "state" || dataLevel == "county"){d3.select("[id='" + stateClicked + "']").raise()}

		var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
		d3.selectAll(`.sd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`sd${yrShort}`)) {
      					d3.select(this)
        					.attr("id", "SD-" + district)
        					.style("display", "initial")
        					.raise();
				} else {
      					d3.select(this)
        					.attr("id", yrShort + "_" + "SD-" + district)
        					.style("display", "none");
    				}
  		});

		refreshLabelsPath();

	} else if(selectedContest == "PRESIDENT BY CD") {
		document.getElementById("resultsBoxHouse").classList.add('hidden');

		if(data_pres_cd[clickedButtonID] == undefined) {
			hideHistory();
			document.getElementById("buttonHistory").style.display = "none"
		} else { document.getElementById("buttonHistory").style.display = "initial" }

		d3.selectAll('.cd.selectedCounty, .cd.selectedState, .cd.notSelectedCounty, .cd.notSelectedState')
			.classed('selectedCounty', false).classed('selectedState', false)
			.classed('notSelectedCounty', false).classed('notSelectedState', false);

		if(clicked !== "United States") {
			var otherStateCD = document.querySelectorAll(`.cd:not([data-state="${stateClicked}"])`);
			for(let i = 0; i < otherStateCD.length; i++) { otherStateCD[i].classList.add("notSelectedState") }
		}

		d3.selectAll(`.cd.cd${yrShort}`)
			.attr("id", function() {return d3.select(this).attr("data-district"); })
			.raise()
			.style("display", "initial");

		if(d3.select("#data").attr("data-level") !== "county" && clicked.includes("-") == false) {
			dataElement.setAttribute("data-stateclick", stateClicked);
		} else {
			var thisDistrictThisYear = document.querySelector(`[data-district="${clicked}"].cd.cd${yrShort}`);
			if(thisDistrictThisYear) {
				clickDistrictBox(clicked);
			} else {
				dataElement.setAttribute("data-stateclick", stateClicked);
				dataElement.setAttribute("last-clicked", stateClicked);
				zoomToState(stateClicked, 750);
				clearInnerHTML('resultsBoxTopText');
				if(clicked.includes("-") == false) { d3.select("[id='" + stateClicked + "']").raise() }
			}
		}

		if(stateClicked && stateClicked !== "United States") {
			if(!clicked.includes("-")) { d3.select("[id='" + stateClicked + "']").raise() };
			d3.selectAll(`.districtBox:not([data-district-state="${stateClicked}"])`).style("display", "none");
			d3.selectAll(`.districtBox[data-district-state="${stateClicked}"]`).style("display", "initial");
		}

		refreshLabelsPath();
		generateDistrictBoxes();
	}

	if(d3.select("#data").attr("button-history") == "true") {updateHistory()}

	updateTicketSplitButtons();
	updateContestText();
	getResults();
	refreshFill();
	refreshLabelsPath();
}

function clickButtonContest() {
	
	var thisID = this.getAttribute('id'); var clickedButtonID = document.getElementById(thisID).innerHTML;
	
	var headingText = document.getElementById('headingTextContest').innerHTML;

	var contestTypes = {"PRES":"PRESIDENT","SEN":"SENATE","GOV":"GOVERNOR","SEN S":"SENATE SPECIAL","SEN R":"SENATE RUNOFF","SEN SR":"SENATE SPECIAL RUNOFF","PRES-D":"DEM PRESIDENT","PRES-R":"GOP PRESIDENT","HOUSE":"HOUSE","SOS":"SECRETARY OF STATE","GOV RC":"GOVERNOR RECALL","LT GOV":"LIEUTENANT GOVERNOR","AG":"ATTORNEY GENERAL","SCJ":"SUPREME COURT JUSTICE","SC":"SUPERIOR COURT","SEN-D":"SENATE DEM","SEN-R":"SENATE REP","GOV-D":"GOVERNOR DEM","GOV-R":"GOVERNOR REP","HOUSE":"HOUSE","HOU-D":"D-HOUSE","HOU-R":"R-HOUSE","SOS-D":"SECRETARY OF STATE DEM","SOS-R":"SECRETARY OF STATE REP","P CD":"PRESIDENT BY CD","PROP":"BALLOT MEASURE","ABORT":"BALLOT MEASURE ABORTION","SOS-R":"SECRETARY OF STATE REP","SOS-D":"SECRETARY OF STATE DEM","AG":"ATTORNEY GENERAL","LT-D":"LIEUTENANT GOVERNOR DEM","LT-R":"LIEUTENANT GOVERNOR REP","ST HD":"STATE HOUSE","ST SD":"STATE SENATE"};

	dataElement.setAttribute("button-contest", contestTypes[clickedButtonID]);
	
	var selectedYear = d3.select("#data").attr("button-year");
	var stateClicked = d3.select("#data").attr("data-stateclick");
	var clicked = d3.select("#data").attr("last-clicked");

	if (clickedButtonID == "PRES") {
		var previousYearPres = +selectedYear - 4; var shortPreviousPresYear = previousYearPres.toString().slice(-2);
		document.getElementById("buttonSwing").innerHTML = "SWING";
	} else {
		document.getElementById("buttonSwing").innerHTML = "VS. PRESIDENT";
	}

	var townshipContests = ["SEN","GOV","SEN S","SEN R","SEN SR","PRES-D","PRES-R","SOS","GOV RC","LT GOV","AG","SCJ","SC","SEN-D","SEN-R","GOV-D","GOV-R","SOS-D","SOS-R","P CD","PROP","SOS-R","SOS-D","AG","LT-D","LT-R"];

	if(clickedButtonID == "PRES") {
		if(selectedYear >= 2000) {showTownships()} else {hideTownships()}
	} else if(clickedButtonID == "PRES-D" || clickedButtonID == "PRES-D") {
		showTownships()
	} else if(townshipContests.includes(clickedButtonID)) {
		if(selectedYear >= 2016) {showTownships()} else {hideTownships()}
	}

	if(clickedButtonID == "HOUSE" && selectedYear == "2024"){
		d3.select("#resultsHouseGroups").classed("visible", true);
		document.getElementById("resultsHouseGroups").scrollTop = "0";

		if(clicked == "United States"){reset(500)} else if(stateClicked !== null){zoomToState(stateClicked,500)}
	} else {
		if(d3.select("#resultsHouseGroups").classed("visible")){
			if(clicked == "United States"){reset(500)} else if(stateClicked !== null){zoomToState(stateClicked,500)}
			d3.select("#resultsHouseGroups").classed("visible", false);
		}
	}
	
	if((clickedButtonID !== "ST HD" && clickedButtonID !== "HOUSE" && clickedButtonID !== "P CD") || (clickedButtonID !== "ST HD" && clickedButtonID !== "HOUSE" && headingText.endsWith("PRESIDENT BY CD"))){
		document.getElementById("resultsBoxHouse").classList = "hidden";
		document.getElementById("buttonHistory").style.display = "flex";
		document.getElementById("buttonCounty").style.display = "flex";
		
		d3.selectAll('.cd.selectedCounty, .cd.selectedState, .cd.notSelectedCounty, .cd.notSelectedState')
			.classed('selectedCounty', false).classed('selectedState', false)
			.classed('notSelectedCounty', false).classed('notSelectedState', false);

		d3.selectAll(".cd, .sd, .hd").style("display", "none");
		d3.selectAll(".state").classed("selectedState", false);

		if(clicked !== "United States"){
			if(d3.select("#data").attr("data-stateclick") !== stateClicked){
				d3.select("[id='" + clicked + "']").classed("selectedCounty", true)
			}

			if(d3.select("#data").attr("data-level") !== "county" && clicked.includes("-") == false){
				d3.select("#data").attr("last-clicked", stateClicked);
				document.getElementById(stateClicked).classList.add("selectedState")
				setInnerHTML("resultsBoxTopText", stateAbbreviation[stateClicked] + " STATEWIDE");
			}

			if(d3.select("#data").attr("data-level") == "county" && clicked.includes("-") == true){
				d3.select("#data").attr("last-clicked", stateClicked).attr("data-level", "state");
				document.getElementById(stateClicked).classList.add("selectedState")
				setInnerHTML("resultsBoxTopText", stateAbbreviation[stateClicked] + " STATEWIDE");
			}

			if (headingText.endsWith("PRESIDENT BY CD") || headingText.endsWith("HOUSE")) {
				zoomToState(stateClicked, 750);
			}

			d3.selectAll('.county[data-state="' + stateClicked + '"]').style('display', 'initial').raise();
			if(d3.select("#data").attr("data-township") !== "hide"){
				d3.selectAll('.township[data-state="' + stateClicked + '"]').style('display', 'initial').raise();
			}
			d3.selectAll(".state").classed("notSelectedState", true).style("display", "intiial");

			d3.select("[id='" + stateClicked + "']").classed("selectedState", true).raise();

			const dataTownship = d3.select("#data").attr("data-township");
			const clickedElement = d3.select(`[id='${clicked}']`);

			if (dataTownship == "hide") {
				clickedElement.raise();
			} else if (!clickedElement.classed("township")) {
				clickedElement.lower();
			}

			if(stateClicked && stateClicked !== "United States"){
				if(d3.select("#data").attr("data-level") !== "county"){
					d3.select("[id='" + stateClicked + "']").raise();
				}
			}

			refreshLabelsPath();
		}
	}

	d3.selectAll('[id^="buttonContest"]').attr('class', "controlButton");

	document.getElementById(thisID).classList = "controlButton controlButtonSelected";

	if(clickedButtonID == "HOUSE" || clickedButtonID == "HOU-D" || clickedButtonID == "HOU-R"){

	//	if(d3.select("#data").attr("data-level") == "state"){
	//		let stateAbbr = d3.select("#data").attr("data-stateabbreviation");
	//		if(stateAbbr){
	//			let cdAL = d3.select("#" + stateAbbr + "-01").attr("data-districtatlarge");
	//			if (cdAL == "true") {
	//				clicked = stateAbbr + "-01";
	//				d3.select("#data").attr("data-levelcd", "atlarge");
	//			}
	//		}
	//	}

		generateDistrictBoxes();

		d3.select("#resultsBoxHouse").classed('hidden', false);
		d3.select("#buttonHistory").style("display", "none");
		d3.select("#buttonCounty").style("display", "none");

		if(!(headingText.endsWith("PRESIDENT BY CD"))) {

			d3.selectAll('.cd.selectedCounty, .cd.selectedState, .cd.notSelectedCounty, .cd.notSelectedState')
				.classed('selectedCounty', false).classed('selectedState', false)
				.classed('notSelectedCounty', false).classed('notSelectedState', false);

			if(clicked !== "United States" && !headingText.endsWith("PRESIDENT BY CD")){
				d3.selectAll(`.cd:not([data-state="${stateClicked}"])`).classed("notSelectedState", true);
			}
		}

		if(d3.select("#data").attr("button-county") == "true"){clickCounty()};

		if(clicked !== "United States" && !headingText.endsWith("PRESIDENT BY CD")){clearInnerHTML('resultsBoxTopText')}
		if(headingText.endsWith("PRESIDENT BY CD") && d3.select("#data").attr("data-level") == "county"){
			d3.select("#resultsBoxHouse").attr('class','hidden');
		};

		if (selectedYear % 2 !== 0) {
			let year = Math.floor(selectedYear / 2) * 2;
			d3.select("#controlBarYear").selectAll(".controlButton").classed("controlButtonSelected", false);
			d3.select('#buttonYear' + year).classed("controlButtonSelected", true);;
			d3.select("#data").attr("button-year", year.toString());
			selectedYear = year;
		}

		var yrShort = selectedYear.slice(-2).toString();
		d3.selectAll('.cd')
  			.each(function() {
    				let district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`cd${yrShort}`)) {
      					d3.select(this)
        					.attr("id", district)
        					.style("display", "initial")
        					.raise();
				} else {
      					d3.select(this)
        					.attr("id", yrShort + "_" + district)
        					.style("display", "none");
    				}
  		});

		d3.selectAll(".township").lower().style("display","none");
		d3.selectAll(".county").lower().style("display","none");
		d3.selectAll(".state").lower();

		const dataLevel = d3.select("#data").attr("data-level");
		if(dataLevel == "state" || dataLevel == "county"){d3.select("[id='" + stateClicked + "']").raise().classed('selectedState', true)}

		if(!headingText.endsWith("PRESIDENT BY CD")){
			dataElement.setAttribute("data-stateclick", stateClicked)
		}

		if(stateClicked && stateClicked !== "United States"){
			if(headingText.endsWith("PRESIDENT BY CD") && dataLevel !== "county"){
//				d3.select("[id='" + stateClicked + "']").raise();
				d3.selectAll(`.districtBox:not([data-district-state="${stateClicked}"])`).style("display", "none");
				d3.selectAll(`.districtBox[data-district-state="${stateClicked}"]`).style("display", "initial");
			}
		}

		if(d3.select("#data").attr("data-level") !== "county" && clicked.includes("-") == false) {
			dataElement.setAttribute("data-stateclick", stateClicked);
		} else {
			var thisDistrictThisYear = document.querySelector(`[data-district="${clicked}"].cd.cd${yrShort}`);
			if(thisDistrictThisYear) {
				clickDistrictBox(clicked);
			} else {
				d3.select("#data").attr("data-stateclick", stateClicked).attr("last-clicked", stateClicked);
				zoomToState(stateClicked, 750);
				clearInnerHTML('resultsBoxTopText');
				if(clicked.includes("-") == false) { d3.select("[id='" + stateClicked + "']").raise() }
			}
		}


		refreshLabelsPath();

	} else if(clickedButtonID == "ST HD"){

		d3.select("#resultsBoxHouse").classList = "hidden";

		document.getElementById("buttonHistory").style.display = "none";
		document.getElementById("buttonCounty").style.display = "none";

		d3.selectAll('.hd.selectedState, .hd.notSelectedCounty, .hd.notSelectedState')
			.classed("selectedCounty", false)
			.classed("selectedState", false)
			.classed("notSelectedCounty", false)
			.classed("notSelectedState", false);

		if(clicked !== "United States"){
			d3.selectAll(`.hd:not([data-state="${stateClicked}"])`).classed("notSelectedState", true);
		}

		var countyStatus = d3.select("#data").attr("button-county"); if(countyStatus == "true"){clickCounty()};

		d3.selectAll(".cd").style("display", "none");
		d3.selectAll(".township").lower().style("display","none");
		d3.selectAll(".county").lower().style("display","none");
		d3.selectAll(".state").lower().style("fill","rgb(107, 112, 123");

		const dataLevel = d3.select("#data").attr("data-level");
		if(dataLevel == "state" || dataLevel == "county"){d3.select("[id='" + stateClicked + "']").raise()}

		var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
		d3.selectAll(`.hd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`hd${yrShort}`)) {
      					d3.select(this)
        					.attr("id", district)
        					.style("display", "initial")
        					.raise();
				} else {
      					d3.select(this)
        					.attr("id", yrShort + "_" + district)
        					.style("display", "none");
    				}
  		});

		d3.selectAll(`.sd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`sd${yrShort}`)) {
      					d3.select(this).attr("id", "SD-" + district)
				}
  		});


		refreshLabelsPath()

	} else if(clickedButtonID == "ST SD"){

		d3.select("#resultsBoxHouse").classList = "hidden";

		document.getElementById("buttonHistory").style.display = "none";
		document.getElementById("buttonCounty").style.display = "none";

		var selected = document.querySelectorAll('.sd.selectedState, .sd.notSelectedCounty, .sd.notSelectedState');
		for (let i = 0; i < selected.length; i++) {
			selected[i].classList.remove("selectedCounty","selectedState","notSelectedCounty","notSelectedState");
		}

		if(clicked !== "United States"){
			var otherStateCD = document.querySelectorAll(`.sd:not([data-state="${stateClicked}"])`);
			for (let i = 0; i < otherStateCD.length; i++) {otherStateCD[i].classList.add("notSelectedState")}
		}

		var countyStatus = d3.select("#data").attr("button-county"); if(countyStatus == "true"){clickCounty()};

		d3.selectAll(".cd").style("display", "none");
		d3.selectAll(".township").lower().style("display","none");
		d3.selectAll(".county").lower().style("display","none");
		d3.selectAll(".state").lower().style("fill","rgb(107, 112, 123");

		const dataLevel = d3.select("#data").attr("data-level");
		if(dataLevel == "state" || dataLevel == "county"){d3.select("[id='" + stateClicked + "']").raise()}

		var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();

		d3.selectAll(`.hd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`hd${yrShort}`)) {
      					d3.select(this).attr("id", "HD-" + district)
				}
  		});

		d3.selectAll(`.sd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`sd${yrShort}`)) {
      					d3.select(this)
        					.attr("id", district)
        					.style("display", "initial")
        					.raise();
				} else {
      					d3.select(this)
        					.attr("id", yrShort + "_" + "SD-" + district)
        					.style("display", "none");
    				}
  		});

		refreshLabelsPath()

	} else if(clickedButtonID == "ABORT"){
/*
		var selectedYear = d3.select("#data").attr("button-year");
		var state = "Ohio"; var stateE = document.getElementById(state);

		zoomToState("Ohio");
		d3.select("#data")
			.attr("last-clicked", "Ohio")
			.attr("data-level", "state")
			.attr("data-stateclick", "Ohio")
			.attr("data-state", "Ohio")
			.attr("data-stateabbreviation", "OH");

		setInnerHTML('headingTextTitle', "Ohio");
		setInnerHTML('resultsBoxTopText', "OH STATEWIDE");

		d3.selectAll(".county").style("display", "none");
		d3.selectAll('.county[data-state="Ohio"]').style('display', 'initial');
		d3.selectAll(".state").classed("notSelectedState", true);
		d3.selectAll(".selectedState").classed("selectedState", false);
		d3.select("#resultsBoxHouse").classed("hidden", true);

		d3.select("#Ohio").classed("selectedState", true).raise();
		getResults(); setPointLabels(state); refreshLabelsPath();
*/
	} 
/*
	else if(clickedButtonID == "LT GOV"){

		var selectedYear = d3.select("#data").attr("button-year");
		var state = "Mississippi"; var stateE = document.getElementById(state);

		zoomToState("Mississippi");
		d3.select("#data")
			.attr("last-clicked", "Mississippi")
			.attr("data-level", "state")
			.attr("data-stateclick", "Mississippi")
			.attr("data-state", "Mississippi")
			.attr("data-stateabbreviation", "MS");

		setInnerHTML('headingTextTitle', "Mississippi");
		setInnerHTML('resultsBoxTopText', "MS STATEWIDE");

		d3.selectAll(".county").style("display", "none");
		d3.selectAll('.county[data-state="Mississippi"]').style('display', 'initial');
		d3.selectAll(".state").classed("notSelectedState", true);
		d3.selectAll(".selectedState").classed("selectedState", false);
		d3.select("#resultsBoxHouse").classed("hidden", true);

		d3.select("#Mississippi").classed("selectedState", true);
		getResults(); setPointLabels(state); refreshLabelsPath();

	} 
		else if(clickedButtonID == "SCJ"){

		var selectedYear = d3.select("#data").attr("button-year");
		var state = "Pennsylvania"; var stateE = document.getElementById(state);

		zoomToState("Pennsylvania");
		d3.select("#data")
			.attr("last-clicked", "Pennsylvania")
			.attr("data-level", "state")
			.attr("data-stateclick", "Pennsylvania")
			.attr("data-state", "Pennsylvania")
			.attr("data-stateabbreviation", "PA");

		setInnerHTML('headingTextTitle', "Pennsylvania");
		setInnerHTML('resultsBoxTopText', "PA STATEWIDE");

		d3.selectAll(".county").style("display", "none");
		d3.selectAll('.county[data-state="Pennsylvania"]').style('display', 'initial');
		d3.selectAll(".state").classed("notSelectedState", true);
		d3.selectAll(".selectedState").classed("selectedState", false);
		d3.select("#resultsBoxHouse").classed("hidden", true);

		d3.select("#Pennsylvania").classed("selectedState", true);
		getResults(); setPointLabels(state); refreshLabelsPath();

	} 
*/
else if(clickedButtonID == "P CD"){
		
		for (let i = 0; i < buttonsYear.length; i++) {buttonsYear[i].style.display = "none"}
		if(d3.select("#data").attr("data-level") !== "county"){
		document.getElementById("resultsBoxHouse").classList.remove('hidden')}

		document.getElementById("buttonHistory").style.display = "none";
		document.getElementById("buttonCounty").style.display = "none";

		var countyStatus = d3.select("#data").attr("button-county");
		if(countyStatus == "true"){clickCounty()};

		for (let i = 0; i < buttonsYear.length; i++) {
			var thisButton = buttonsYear[i]; var thisYear = thisButton.innerHTML;
			if (thisYear % 4 == 0 && thisYear >= 1952 && thisYear <= 2020) {thisButton.style.display = "flex"} else {thisButton.style.display = "none"}
		}

		if (selectedYear % 4 === 0) {} else {
			var year = Math.floor(selectedYear / 4) * 4;
			for (let i = 0; i < buttonsYear.length; i++) {buttonsYear[i].classList = "controlButton yearButton"}
			document.getElementById('buttonYear' + year).classList = "yearButton controlButton controlButtonSelected";
			dataElement.setAttribute("button-year", year);
			document.getElementById("controlBarYear").style.scrollTop = "0px";
		}

		var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
		d3.selectAll(`.cd`)
  			.each(function() {
    				var district = d3.select(this).attr("data-district");
    				if (this.classList.contains(`cd${yrShort}`)) {
      					d3.select(this)
        					.attr("id", district)
        					.style("display", "initial")
        					.raise();
				} else {
      					d3.select(this)
        					.attr("id", yrShort + "_" + district)
        					.style("display", "none");
    				}
  		});

		if(clicked !== "United States"){
			d3.selectAll(`.cd:not([data-state="${stateClicked}"])`).classed("notSelectedState", true);
		}

		d3.selectAll(".county").lower().style("display", "none");

		refreshLabelsPath();

//		if(stateClicked && stateClicked !== "United States"){
//			if(d3.select("#data").attr("data-level") !== "county"){
				d3.select("[id='" + stateClicked + "']").raise();
//			}
//		}
	}

	updateContestText();
	getYearsContest();
	getResults();
	refreshFill();
	refreshLabelsPath();

	setTimeout(function(){
		var historyStatus = d3.select("#data").attr("button-history");
		if (historyStatus == "true"){updateHistory()}
	}, 1);
}

function districtToCounty() {
	if(d3.select("#data").attr("button-contest") !== "HOUSE"){return}
	d3.select("#resultsBoxHouse").attr("class","hidden");
	dataElement.setAttribute("button-contest","PRESIDENT");
	d3.selectAll(".cd").style("display","none");
	d3.selectAll(".state").style("fill","");
}

function getYearsContest() {
	var clicked = d3.select("#data").attr("last-clicked");
	var selectedYear = d3.select("#data").attr("button-year");
	var selectedContest = d3.select("#data").attr("button-contest");

	d3.selectAll(".yearButton").style("display", "none");
	var a = [], tY = new Date().getFullYear();
	if(selectedContest == "HOUSE") {
		for (let i = 1974; i <= tY+1; i += 2) {a.push(`#buttonYear${i}`)}
		d3.selectAll(a.join(",")).style("display", "flex");

		if (selectedYear % 2 !== 0) {
			const year = Math.floor(selectedYear / 2) * 2;
			d3.select("#controlBarYear").selectAll(".controlButton").classed("controlButtonSelected", false);
			d3.select('#buttonYear' + year).classed("controlButtonSelected", true);;
			d3.select("#data").attr("button-year", year.toString());
		}

	} else if(selectedContest == "PRESIDENT" || selectedContest == "PRESIDENT BY CD") {
		d3.selectAll(".yearButton").style("display", "none");
		for (let i = 1940; i <= tY+1; i += 4) {a.push(`#buttonYear${i}`)}
		d3.selectAll(a.join(",")).style("display", "initial");

		if (selectedYear % 4 !== 0) {
			const year = Math.floor(selectedYear / 4) * 4;
			d3.selectAll(".yearButton").classed("controlButtonSelected", false);
			d3.select('#buttonYear' + year).classed("controlButtonSelected", true);;
			d3.select("#data").attr("button-year", year.toString());
		}
	} else {
		var dataResults, dataResultsSpecial;
		switch(selectedContest) {
			case "GOVERNOR": dataResults = data_gov; break;
			case "SENATE": dataResults = data_sen; break;
			case "SENATE SPECIAL": dataResults = data_sen_sp; break;
			case "SENATE RUNOFF": dataResults = data_sen_r; break;
			case "SENATE SPECIAL RUNOFF": dataResults = data_sen_sp_r; break;
			case "SECRETARY OF STATE": dataResults = data_sos; break;
			case "DEM PRESIDENT": dataResults = data_president_dem; break;
			case "GOP PRESIDENT": dataResults = data_president_rep; break;
			case "GOVERNOR RECALL": dataResults = data_gov_recall; break;
			case "LIEUTENANT GOVERNOR": dataResults = data_gov_lt; break;
			case "GOVERNOR DEM": dataResults = data_gov_dem; break;
			case "GOVERNOR REP": dataResults = data_gov_rep; break;
			case "SECRETARY OF STATE DEM": dataResults = data_sos_dem; break;
			case "SECRETARY OF STATE REP": dataResults = data_sos_rep; break;
			case "LIEUTENANT GOVERNOR DEM": dataResults = data_gov_lt_dem; break;
			case "LIEUTENANT GOVERNOR REP": dataResults = data_gov_lt_rep; break;
			case "ATTORNEY GENERAL": dataResults = data_attorney_general; break;
			case "SENATE DEM": dataResults = data_sen_dem; break;
			case "SENATE REP": dataResults = data_sen_rep; break;
			case "D-HOUSE": dataResults = data_house_dem; break;
			case "R-HOUSE": dataResults = data_house_rep; break;
			case "SUPREME COURT JUSTICE": dataResults = data_supreme_court; break;
			case "SUPERIOR COURT": dataResults = data_superior_court; break;
			case "BALLOT MEASURE": dataResults = data_ballot; break;
			case "BALLOT MEASURE ABORTION": dataResults = data_ballot_abortion; break;
			case "STATE HOUSE": dataResults = data_state_house; break;
			case "STATE SENATE": dataResults = data_state_senate; break;
		}

		var sElections = ['GOVERNOR','SENATE','SENATE RUNOFF'];
		if (sElections.includes(selectedContest)) {
			switch (selectedContest) {
				case "GOVERNOR": dataResultsSpecial = data_gov_recall; break;
				case "SENATE": dataResultsSpecial = data_sen_sp; break;
				case "SENATE RUNOFF": dataResultsSpecial = data_sen_sp_r; break;
			}
		}

		let yearArray = [];
		if(clicked == "United States") {
			for(let k in dataResults) {let y = k.substring(0,4); if(!yearArray.includes(y)) {yearArray.push(y)}}

			if(dataResultsSpecial){
				for (let k in dataResultsSpecial) {
					if(!yearArray.includes(k.substring(0,4))) {yearArray.push(k.substring(0,4))}
				}
			}

		} else {
			if(!dataResults){return}

			yearArray = Object.keys(dataResults)
				.filter(k => k.endsWith('-' + clicked))
				.map(k => k.substring(0, 4))
				.filter((v, i, s) => s.indexOf(v) == i);

			if(dataResultsSpecial){
				Object.keys(dataResultsSpecial)
					.filter(a => a.endsWith('-' + clicked))
					.map(a => a.substring(0, 4))
					.filter((value, index, self) => self.indexOf(value) == index)
					.forEach(a => {yearArray.push(a)});
			}
		}

		d3.selectAll('.yearButton').style("display", yearArray.length == 0 ? "flex" : "none");
		yearArray.forEach(a => {d3.select("#buttonYear" + a).style("display", "flex")});
	}

	updateContestText();
	document.getElementById('buttonYear' + d3.select("#data").attr("button-year")).scrollIntoViewIfNeeded();
}

// function clickStatButton

function clickStats() {
	if(d3.select("#data").attr("button-apps") == "true"){clickApps()}
	if(d3.select("#data").attr("button-filters") == "true"){clickFilters()}

	if(mapSettings['stats'] == ""){
		var status = "false";
		document.getElementById("buttonStats").classList.add('controlButtonNotselected');
	} else {
		var status = "true";
		document.getElementById("buttonStats").classList.remove('controlButtonNotselected');
	}

	document.getElementById("statsBar").scrollTop = "0";
	dataElement.setAttribute("button-stats", status);

	document.getElementById("statsBar").classList.toggle('visible');
	d3.select("#filtersBar").classed('visible', false);
	setTimeout(function(){refreshFill()}, 5);
}

function clickFilters() {
	if(d3.select("#data").attr("button-apps") == "true"){clickApps(); refreshFill();}
	if(d3.select("#data").attr("button-stats") == "true"){clickStats(); refreshFill();}

	if(mapSettings['filters'] == ""){
		var status = "false";
		document.getElementById("buttonFilters").classList.add('controlButtonNotselected');
	} else {
		var status = "true";
		document.getElementById("buttonFilters").classList.remove('controlButtonNotselected');
	}

	document.getElementById("filtersBar").scrollTop = "0";
	dataElement.setAttribute("button-filters", status);

	document.getElementById("filtersBar").classList.toggle('visible');
	d3.select("#statsBar").classed('visible', false);
}

function clickStatePop() {

	if(document.getElementById("buttonStatePop").classList.contains('controlButtonNotselected')){
		var status = "true"} else {var status = "false"};
	
	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", status);
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonStatePop").classList.toggle('controlButtonNotselected');
	document.getElementById("buttonMargin").classList.add('controlButtonNotselected');
	document.getElementById("buttonSwing").classList.add('controlButtonNotselected');
	document.getElementById("buttonBlackPop").classList.add('controlButtonNotselected');

	setTimeout(function(){refreshFill()}, 5);
}

function clickLatinoPop() {

	if(document.getElementById("buttonLatinoPop").classList.contains('controlButtonNotselected')){
		var status = "true"} else {var status = "false"};
	
	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", status);
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonLatinoPop").classList.toggle('controlButtonNotselected');
	document.getElementById("buttonMargin").classList.add('controlButtonNotselected');
	document.getElementById("buttonSwing").classList.add('controlButtonNotselected');
	document.getElementById("buttonStatePop").classList.add('controlButtonNotselected');
	document.getElementById("buttonBlackPop").classList.add('controlButtonNotselected');

	setTimeout(function(){refreshFill()}, 5);
}

function clickBlackPop() {

	if(document.getElementById("buttonBlackPop").classList.contains('controlButtonNotselected')){
		var status = "true"} else {var status = "false"};
	
	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", "false");
	dataElement.setAttribute("button-turnout", "false");
	dataElement.setAttribute("button-blackpop", status);
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonBlackPop").classList.toggle('controlButtonNotselected');
	document.getElementById("buttonMargin").classList.add('controlButtonNotselected');
	document.getElementById("buttonSwing").classList.add('controlButtonNotselected');
	document.getElementById("buttonStatePop").classList.add('controlButtonNotselected');

	setTimeout(function(){refreshFill()}, 5);
}

function clickReporting() {

	if(document.getElementById("buttonReporting").classList.contains('controlButtonNotselected')){
		var status = "true"} else {var status = "false"};

	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", "false");
	dataElement.setAttribute("button-turnout", "false");
	dataElement.setAttribute("button-voteRemaining", status);
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonReporting").classList.toggle('controlButtonNotselected');
	setTimeout(function(){refreshFill()}, 5);
}

function clickTurnout() {

	if(document.getElementById("buttonTurnout").classList.contains('controlButtonNotselected')){
		var status = "true";} else {var status = "false";};

	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", "false");
	dataElement.setAttribute("button-voteRemaining", "false");
	dataElement.setAttribute("button-turnout", status);
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonTurnout").classList.toggle('controlButtonNotselected');
	setTimeout(function(){refreshFill()}, 5);
}

function filterButton(t) {
	d3.selectAll(".filterButton").classed("selected",false);
	var c = "filterButton", f = t;
	if(mapSettings['filters'].includes(t)){f = ""} else {c += " selected";}

	mapSettings['filters'] = f;
	d3.select(this).attr("class", c);
	dataElement.setAttribute("status-filter", status);
	setTimeout(refreshFill, 5);
}

function statButton(t) {
	d3.selectAll(".statButton").classed("selected",false);
	var c = "statButton", f = t;
	if(mapSettings['stats'].includes(t)){f = ""} else {c += " selected";}

	mapSettings['stats'] = f;
	d3.select(this).attr("class", c);
	dataElement.setAttribute("status-stats", status);
	setTimeout(refreshFill, 5);
}

function clickTrumpDem() {

	if(document.getElementById("buttonPresRDem").classList.contains('controlButtonNotselected')){
		var status = "true";} else {var status = "false";};

	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", "false");
	dataElement.setAttribute("button-voteRemaining", "false");
	dataElement.setAttribute("button-turnout", "false");
	dataElement.setAttribute("button-gain", "false");
	dataElement.setAttribute("button-obamaTrump", "false");
	dataElement.setAttribute("button-trumpBiden", "false");
	dataElement.setAttribute("button-bidenGop", "false");
	dataElement.setAttribute("button-trumpDem", status);
	dataElement.setAttribute("status-filter", status);
	dataElement.setAttribute("button-ticketSplit", "false");

	document.getElementById("buttonPresRDem").classList.toggle('controlButtonNotselected');
	setTimeout(function(){refreshFill()}, 5);
}


function clickTicketSplit() {
	if(document.getElementById("buttonTicketSplit").classList.contains('controlButtonNotselected')){
		var status = "true"} else {var status = "false";};

	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", "false");
	dataElement.setAttribute("button-voteRemaining", "false");
	dataElement.setAttribute("button-turnout", "false");
	dataElement.setAttribute("button-gain", "false");
	dataElement.setAttribute("button-obamaTrump", "false");
	dataElement.setAttribute("button-trumpBiden", "false");
	dataElement.setAttribute("button-bidenGop", "false");
	dataElement.setAttribute("button-trumpDem", "false");
	dataElement.setAttribute("button-ticketSplit", status);
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonTicketSplit").classList.toggle('controlButtonNotselected');
	setTimeout(function(){refreshFill()}, 5);
}

function clickBidenGop() {

	if(document.getElementById("buttonPresDGop").classList.contains('controlButtonNotselected')){
		var status = "true"} else {var status = "false";};

	dataElement.setAttribute("button-swing", "false");
	dataElement.setAttribute("button-lead", "false");
	dataElement.setAttribute("button-statepop", "false");
	dataElement.setAttribute("button-latinopop", "false");
	dataElement.setAttribute("button-voteRemaining", "false");
	dataElement.setAttribute("button-turnout", "false");
	dataElement.setAttribute("button-gain", "false");
	dataElement.setAttribute("button-obamaTrump", "false");
	dataElement.setAttribute("button-trumpBiden", "false");
	dataElement.setAttribute("button-bidenGop", status);
	dataElement.setAttribute("button-trumpDem", "false");
	dataElement.setAttribute("button-ticketSplit", "false");
	dataElement.setAttribute("status-filter", status);

	document.getElementById("buttonPresDGop").classList.toggle('controlButtonNotselected');
	setTimeout(function(){refreshFill()}, 5);
}

function clickApps() {
	var d = d3.select("#data");
	if(d.attr("button-stats") == "true"){clickStats()}
	if(d.attr("button-filters") == "true"){clickFilters()}
	if(d.attr("button-pollclosing") == "true"){clickPollClosing()}
	if(d.attr("button-senateWhatIf") == "true"){clickSenateWhatIf()}
	if(d.attr("button-presidentProjections") == "true"){clickPresidentProjections()}
	if(d.attr("button-graphics") == "true"){clickGraphics()}

	var status;
	if(d.attr("button-road270") == "true"){
		click270(); status = "false"
	} else if(d.attr("button-apps") !== "true"){
		d3.select("#appsBar").property("scrollTop", 0);
		status = "true"
	} else {
		status = "false"
	}

	d.attr("button-apps", status);
	d3.select("#appsBar").classed('visible', JSON.parse(status))
	setTimeout(refreshFill, 5);
}

function hideStats() {
	d3.selectAll("#buttonStats, #buttonFilters").classed('controlButtonNotselected', true);
	d3.selectAll("#filtersBar, #statsBar").classed('visible', false);

	var d = d3.select("#data");
	d.attr("button-stats", "false");
	d.attr("button-filters", "false");
}

function removeFilters() {
	mapSettings['filters'] = ""; mapSettings['stats'] = "";

	d3.selectAll(".filterButton.selected, .statButton.selected").classed("selected", false);
	d3.selectAll("#statsBar div").classed('controlButtonNotselected', true);

	setTimeout(refreshFill, 5);
	hideStats();
}


function click270() {
	districtToCounty();

	var clicked = d3.select("#data").attr("last-clicked");
	var selectedYear = d3.select("#data").attr("button-year");
	const button270 = document.getElementById("buttonRoad270");
	if(button270.classList.contains('controlButtonNotselected')){
		if (selectedYear % 4 !== 0) {
			d3.select("#data").attr("button-year", (Math.floor(selectedYear / 4) * 4).toString());
		}

		d3.select("#buttonApps").html("HOME");
		d3.select("#appsBar").classed('visible',false).style("opacity", 0);
		dataElement.setAttribute("button-road270", "true");
		resetElectoralVoteMap();

		document.getElementById('nationalMap').classList.add('roadMap');
		d3.select("#headingBoxRoadTo270").style("display","flex")

		document.getElementById("controlBars").style.right = "-10vw";
		document.getElementById("controlBar270").style.right = "0.5vw";

		resetBox(0.255,0.745,1,0.95);
		setTimeout(function(){returnHome()}, 5);

		d3.select("#results").classed('hidden', true).style("opacity", 0);
		document.getElementById("road270box").classList.remove('hidden');

		document.getElementById('buttonPollClosing').style.display = "none";
		document.getElementById('buttonStats').style.display = "none";

		if(d3.select("#data").attr("button-pollclosing") == "true"){
			document.getElementById("boxPollClosing").classList.add('hidden');
//			document.getElementById("boxPollClosing").classList.add('resultsHidden');
			dataElement.setAttribute("button-pollclosing", "false");
			buttonPollClosing.classList.add('controlButtonNotselected');
			document.getElementById("controlBarPollClosings").style.right = "-10vw";
		}
	} else {
		d3.select("#buttonApps").html("APPS");
		dataElement.setAttribute("button-road270", "false");
		document.getElementById("appsBar").style.opacity = 1;

		resetElectoralVoteMap();

		d3.select("#headingBoxRoadTo270").style("display","none")

		document.getElementById('nationalMap').classList.remove('roadMap');

		document.getElementById("controlBars").style.right = "0.5vw";
		document.getElementById("controlBar270").style.right = "-10vw";
		resetBox(0,1,1,0.925);

		setTimeout(function(){returnHome()}, 5); setTimeout(function(){returnHome()}, 10);
		d3.select("#controlBarPollClosings").style("right", "-10vw");
		d3.select("#controlBars").style("right", "0.5vw");
		d3.select('#buttonPollClosing').style("display", "flex");
		d3.select('#buttonStats').style("display", "flex");
		d3.select("#results").classed('hidden', false).style("opacity", 1);
		d3.select("#road270box").classed('hidden', true);
		d3.select("#boxPollClosing").classed('hidden', true);
		d3.select("#electoralVoteMaine").classed("visible", false);
		d3.select("#electoralVoteNebraska").classed("visible", false);
		d3.select("#Maine").classed("evBoxState", false);
		d3.select("#Nebraska").classed("evBoxState", false);
		dataElement.setAttribute("button-draw", "false");
	}

	button270.classList.toggle('controlButtonNotselected');
	refreshFill();
}

function turnOff270() {
	const button270 = document.getElementById("buttonRoad270");
	button270.classList.add('controlButtonNotselected');
	dataElement.setAttribute("button-road270", "false");
	hideHistory(); refreshFill();
}

function clickPollClosing() {

	const buttonPollClosing = document.getElementById("buttonPollClosing");

	if(buttonPollClosing.classList.contains('controlButtonNotselected')){
		districtToCounty();
		d3.select("#buttonApps").html("HOME");
		document.getElementById("appsBar").classList.remove('visible');
		document.getElementById("appsBar").style.opacity = 0;

		buttonPollClosing.classList.remove('controlButtonNotselected');

		dataElement.setAttribute("button-pollclosing", "true");
		document.getElementById("controlBars").style.right = "-10vw";
		document.getElementById("controlBarPollClosings").style.right = "0.5vw";

		setInnerHTML('headingElectoralVotesText', "ELEC. VOTES<br>AT STAKE");
		setInnerHTML('headingElectoralVotesNumber', 0);

		startPollClosingHour(); clearPointLabels();

		document.getElementById('buttonStats').style.display = "none";
		document.getElementById("results").classList.add('hidden');
		document.getElementById("boxPollClosing").classList.remove('hidden');
		document.getElementById('headingTextContest').style.display = "none";
		document.getElementById('headingTextTitle').style.display = "none";
		document.getElementById('headingTextPollClosingText').style.display = "flex";

		startTimestamps();
	} else {
		d3.select("#buttonApps").html("APPS");
		dataElement.setAttribute("button-road270", "false");
		document.getElementById("appsBar").style.opacity = 1;
		dataElement.setAttribute("button-pollclosing", "false");
		buttonPollClosing.classList.add('controlButtonNotselected');

		clearInnerHTML('headingTextPollClosingHour');
		clearInnerHTML('headingTextPollClosingPM');
		clearInnerHTML('headingTextPollClosingET');
		clearInnerHTML('headingTextSubtitle');

		clearInterval(timestampClock);
		setTimeout(function() {setInnerHTML('boxPollClosingHeading', '')}, 1000);
		
		setInnerHTML('headingElectoralVotesText', "NEEDED<br>TO WIN");

		document.getElementById('headingTextTitle').style.display = "flex";
		document.getElementById('headingTextPollClosingText').style.display = "none";

		document.getElementById("controlBarPollClosings").style.right = "-10vw";
		document.getElementById("controlBars").style.right = "0.5vw";

		document.getElementById('buttonStats').style.display = "flex";
		document.getElementById("boxPollClosing").classList.add('hidden');
		document.getElementById('headingTextContest').style.display = "flex";
		reset(); updateContestText(); refreshFill();
	}

}

function clickPresidentProjections(){
	var clicked = d3.select("#data").attr("last-clicked"), selectedYear = d3.select("#data").attr("button-year");
	const button = document.getElementById("buttonProjections");
	if(button.classList.contains('controlButtonNotselected')){
		createProjections();
		d3.select("#buttonApps").style("display","none");
		d3.select("#appsBar").classed('visible',false).style("opacity", 0);
		dataElement.setAttribute("button-presidentProjections", "true");

		d3.select("#nationalMap").style("display","none")
		d3.select("#headingBoxRoadTo270").style("display","flex")

		d3.select("#appPresidentProjections").style("display","grid")
		d3.select("#appSenateWhatIfGrid").style("display","none")
		d3.select("#appGraphics").style("display","none")

		d3.select("#controlBars").style("right", "-10vw").style("display","none")

		d3.select("#results").style("opacity", 0);
		d3.select("#buttonStats").style("display","none")
		d3.select("#buttonFilters").style("display","none")
	} else {
		d3.selectAll(".projGroup").selectAll('*').remove();
		d3.select("#buttonApps").html("APPS");
		d3.select("#buttonApps").style("display","flex");
		d3.select("#appsBar").style("opacity", 1);
		dataElement.setAttribute("button-presidentProjections", "false");

		d3.select("#nationalMap").style("display","inline")
		d3.select("#appHeadingBox").style("display","none")
		d3.select("#appSenateWhatIfGrid").style("display","none")
		d3.select("#appGraphics").style("display","none")
		d3.select("#headingBoxRoadTo270").style("display","none")
		d3.select("#appPresidentProjections").style("display","none")
		d3.select('#buttonStats').style("display", "flex");
		d3.select('#buttonFilters').style("display", "flex");
		d3.select("#results").style("opacity", 1);
		d3.select("#controlBars").style("right", "0.5vw").style("display","flex")
		d3.select("#controlBarSenateWhatIf").style("right", "-10vw").style("display","none")
		getResults();
	}

	button.classList.toggle('controlButtonNotselected');
}

function clickSenateWhatIf(){
	var clicked = d3.select("#data").attr("last-clicked");
	var selectedYear = d3.select("#data").attr("button-year");
	const buttonSenate = document.getElementById("buttonSenateWhatIf");
	if(buttonSenate.classList.contains('controlButtonNotselected')){
		updateSenateWhatIf();
		d3.select("#buttonApps").html("HOME");
		d3.select("#appsBar").classed('visible',false).style("opacity", 0);
		dataElement.setAttribute("button-senateWhatIf", "true");

		d3.select("#nationalMap").style("display","none")
		d3.select("#appHeadingBox").style("display","flex")
		d3.select("#headingSenateWhatIf").style("display","flex")
		d3.select("#appSenateWhatIfGrid").style("display","grid")

		d3.select("#controlBars").style("right", "-10vw").style("display","none")
		d3.select("#controlBarSenateWhatIf").style("right", "0.5vw").style("display","flex")

		d3.select("#results").style("opacity", 0);
		document.getElementById('buttonStats').style.display = "none";
	} else {
		d3.select("#buttonApps").html("APPS");
		d3.select("#appsBar").style("opacity", 1);
		dataElement.setAttribute("button-senateWhatIf", "false");

		d3.select("#nationalMap").style("display","inline")
		d3.select("#appHeadingBox").style("display","none")
		d3.select("#headingSenateWhatIf").style("display","none")

		d3.select("#appSenateWhatIfGrid").style("display","none")

		d3.select('#buttonStats').style("display", "flex");
		d3.select("#results").style("opacity", 1);
		d3.select("#controlBars").style("right", "0.5vw").style("display","flex")
		d3.select("#controlBarSenateWhatIf").style("right", "-10vw").style("display","none")
		getResults();
	}

	buttonSenate.classList.toggle('controlButtonNotselected');
}

function clickGraphics(){
	var clicked = d3.select("#data").attr("last-clicked");
	var selectedYear = d3.select("#data").attr("button-year");
	const button = document.getElementById("buttonGraphics");
	if(button.classList.contains('controlButtonNotselected')){
//		createProjections();
		d3.select("#buttonApps").style("display","none");
		d3.select("#appsBar").classed('visible',false).style("opacity", 0);
		dataElement.setAttribute("button-graphics", "true");

		d3.select("#controlBarShadow").style("display","none")
		resetBox(0.345,0.635,1,1,0);
		clearPointLabels();
		d3.selectAll(".county").style("display","none")
		d3.selectAll(".state").attr("class","state");

		d3.select("#headingBoxRoadTo270").style("display","flex")
		d3.select("#appGraphics").style("display","flex")

		d3.select("#controlBars").style("right", "-10vw").style("display","none")

		d3.select("#results").style("opacity", 0);
		d3.select("#buttonStats").style("display","none")
		d3.select("#buttonFilters").style("display","none")
	} else {
		d3.select("#buttonApps").html("APPS").style("display","flex");
		d3.select("#appsBar").style("opacity", 1);
		dataElement.setAttribute("button-graphics", "false");
		d3.select("#nationalMap").style('display','initial');

		reset(1);
		d3.select("#controlBarShadow").style("display","initial")
		d3.select("#headingBoxRoadTo270").style("display","none")

		d3.select("#appGraphics").style("display","none")

		d3.select('#buttonStats').style("display", "flex");
		d3.select('#buttonFilters').style("display", "flex");

		d3.select("#results").style("opacity", 1);
		d3.select("#controlBars").style("right", "0.5vw").style("display","flex")
		d3.select("#controlBarSenateWhatIf").style("right", "-10vw").style("display","none")
		getResults();
	}

	button.classList.toggle('controlButtonNotselected');
}

function showStateGraphic(i){
	d3.select("#appGraphics_bkgd_gradient").style('display','initial');
	d3.select("#appGraphics_bkgd").style('display','initial');
	d3.select("#appGraphics_heading").style('display','flex');
	d3.select("#nationalMap").style('display','none');

	updateStateGraphic(i);
}

function updateStateGraphic(i){
	if(i == "United States"){return}
	var w = data_president[i]?.w24;
	d3.select("#appGraphics").attr("class","");
	d3.select("#appGraphics_heading").html(i);
	d3.select("#appGraphics_text").style('display','none');
			d3.select("#appGraphics_candName").html("");

	d3.select("#appGraphics_tetc_text").style('display','none');
	switch (w) {
		case "r":
			d3.selectAll("#appGraphics_trump, #appGraphics_imageBox_rep, #appGraphics_imageBorder_rep")
				.style('display','initial');

			d3.selectAll("#appGraphics_biden, #appGraphics_imageBox_dem, #appGraphics_imageBorder_dem")
				.style('display','none');

			d3.select("#appGraphics_text").style('display','grid');
			d3.select("#appGraphics_candName").html("DONALD<br>TRUMP");

			d3.select("#appGraphics_heading").style('color', 'rgb(242,242,242)');

			d3.selectAll("#appGraphics_tick, #appGraphics_heading, #appGraphics_bkgd").style('background-color','rgb(189,18,28)');
			break;
		case "d":
			d3.selectAll("#appGraphics_trump, #appGraphics_imageBox_rep, #appGraphics_imageBorder_rep")
				.style('display','none');

			d3.selectAll("#appGraphics_biden, #appGraphics_imageBox_dem, #appGraphics_imageBorder_dem")
				.style('display','initial');

			d3.select("#appGraphics_text").style('display','grid');
			d3.select("#appGraphics_candName").html("JOE<br>BIDEN");

			d3.select("#appGraphics_heading").style('color', 'rgb(242,242,242)');

			d3.selectAll("#appGraphics_tick, #appGraphics_heading, #appGraphics_bkgd").style('background-color','rgb(10,105,192)');
			break;
		default:
			d3.select("#appGraphics").attr("class","tooEarlyToCall");
			d3.select("#appGraphics_tetc_text").style('display','initial');

			d3.selectAll("#appGraphics_trump, #appGraphics_biden, .aG_imageBox, .aG_imageBorder")
				.style('display','initial');

			d3.select("#appGraphics_heading")
				.style('background-color','rgb(233,233,233)')
				.style('color', 'rgb(24,24,24)');
			d3.select("#appGraphics_tick, #appGraphics_bkgd").style('background-color','rgb(166,166,166)');
			break;
	}
}

function clickHistory() {
	if(document.getElementById("buttonHistory").classList.contains('controlButtonNotselected')){
	var status = "true"; updateHistory()} else {var status = "false"};
	
	dataElement.setAttribute("button-history", status);
	document.getElementById("buttonHistory").classList.toggle('controlButtonNotselected');
	document.getElementById("historyPanel").classList.toggle('visible');
	setTimeout(function(){hideStats()}, 5);
}

function hideHistory() {
	dataElement.setAttribute("button-history", "false");
	document.getElementById("buttonHistory").classList.add('controlButtonNotselected');
	document.getElementById("historyPanel").classList.remove('visible');
	setTimeout(function(){refreshFill()}, 5);
}

function clickCounty() {
	var d = d3.select('#data');
	if(document.getElementById("buttonCounty").classList.contains('controlButtonNotselected')){
var status = "true"} else {var status = "false"};

	d.attr("button-county", status);
	document.getElementById("buttonCounty").classList.toggle('controlButtonNotselected');
	var clicked = d.attr("data-stateclick");
	var countyMap = d.attr("button-county");

	if(countyMap == "true"){
		d3.selectAll(".county").style("display", "initial").raise();
		d3.selectAll(".township").style("display", "initial").raise();
	} else {
		d3.selectAll(".selectedState").classed("selectedState", false);
		d3.selectAll(".county, .township").style("display", "none")
		if(clicked !== "United States" && clicked !== null){
			d3.selectAll('.county[data-state="' + clicked + '"]').style("display", "initial").raise();
			d3.selectAll('.township[data-state="' + clicked + '"]').style("display", "initial").raise();	
		}
	}

	d3.select("[id='" + clicked + "']").classed("selectedState",true).raise();
	refreshLabelsPath();
}

d3.select('#buttonToggleCounts').on('click', clickToggleCounts);
function clickToggleCounts(){
	var d = d3.select("#data");
	console.log("TOGGLE COUNT");
}

function updateContestText() {
	if(dataElement.getAttribute("button-pollclosing") == "true"){return}
	var data = d3.select("#data");
	var contest = data.attr("button-contest"), year = data.attr("button-year"), state = data.attr("data-stateclick");
	var contestSuffix = data.attr("button-contest-suffix"), clicked = data.attr("last-clicked");
	if(contestSuffix == null) {contestSuffix = ""} else {contestSuffix = " " + contestSuffix}

	var contestHeadings = {"DEM PRESIDENT":"democratic primaries","GOP PRESIDENT":"republican primaries"}
	if(clicked == "United States"){
 		d3.select("#headingTextContest").html(null);
		if(year == "XXXX"){
			if (Object.keys(contestHeadings).includes(contest)) {
				var contestText = contestHeadings[contest], contestSuffix = "";
			}

			let a = contestText || contest;
		 	d3.select("#headingTextTitle").text(a + contestSuffix)
		} else {
			d3.select("#headingTextContest").text(year + ' ' + contest);
			d3.select("#headingTextTitle").text("United States");
		}
	} else {
		d3.select("#headingTextContest").text(year + ' ' + contest + contestSuffix);
		scaleHeadingText();
	}

	d3.select('#buttonYear' + year).node().scrollIntoViewIfNeeded();

	setElectoralVoteText(state);

	if(year >= 1952 && contest == "PRESIDENT") {
	} else if(year >= 2024){
		var visibilityHouseHeading = "grid";
	} else {
		var visibilityHouseHeading = "none";
	}
	d3.select("#resultsBoxHouseHeading").style("display", visibilityHouseHeading)
}

function scaleTextWH(element, maxWidth, originalWidth) {
	const oW = originalWidth || 1;

	const maximumWidth = d3.select("body").node().clientWidth * maxWidth;

	const elementWidth = d3.select("[id='" + element + "']").node().clientWidth;
	const elementScale = maximumWidth / elementWidth;

	const scale = Math.min(elementScale, oW);
	d3.select("[id='" + element + "']").style("transform", `scaleX(${scale})`);
}

function scaleHeadingText() {
	var windowWidth = document.documentElement.clientWidth;
	var maxWidth = windowWidth * 0.75;

	var widthA = d3.select("#headingTextContest").node().clientWidth;
	var widthB = d3.select("#headingTextTitle").node().clientWidth;

	if(document.getElementById("headingTextTitle").innerHTML !== "United States"){
		var totalWidth = widthA + widthB;
		var scaleWidthB = (maxWidth - widthA) / widthB;
		if(maxWidth < totalWidth){var bWidth = scaleWidthB} else {var bWidth = 1}
 		document.getElementById("headingTextTitle").style.transform = `scaleX(${bWidth})`;
	} else {
		d3.select("#headingTextTitle").style("transform", "scaleX(1)")
	}
	
}

function animateNumber(value, id) {
	var obj = document.getElementById(id); var start = 0;
	if (obj.innerHTML) {start = parseFloat(obj.innerHTML.replace(/,/g, ''))}
	var current = start; var counter = 0; var increment = (value - start) / 7; var animCount = 7;
	if (value == 0){obj.innerHTML = 0} else {
	if (isNaN(increment)) {
		obj.innerHTML = obj.innerHTML = internationalNumberFormat.format(value)
	} else {
		var timer = setInterval(updateNumber, 30);
		function updateNumber() {
			counter++; current += increment;
			obj.innerHTML = internationalNumberFormat.format(Math.abs(Math.round(current)));
			if (counter === animCount || current === value) {clearInterval(timer)}
		}
	}}
}

function animateTotalNumber(value) {
	var obj = document.getElementById("resultsAhead");

	if(obj.innerHTML){var startingValue = obj.innerHTML;
	var start = parseFloat(startingValue.replace(/,/g, '').replace(" VOTES", ""))} else {var start = 0}

	var current = start; var counter = 0; var increment = (value - start) / 7; var animCount = 7;

	if(isNaN(increment)){obj.innerHTML =  internationalNumberFormat.format(value) + " VOTES"} else {

	var timer = setInterval(function() {
		counter += 1; current += increment; 
		obj.innerHTML = internationalNumberFormat.format(Math.abs(Math.round(current))) + " VOTES";
        	if (counter == animCount || current == value) {clearInterval(timer); }
	}, 30)}
}

function animatePercent(value, id) {
	var obj = document.getElementById(id);
	if(obj.innerHTML){var startingValue = obj.innerHTML; var start = parseFloat(startingValue)} else {var start = 0}
	var current = start; var counter = 0; var increment = (value - start) / 5; var animCount = 5;
	var timer = setInterval(function() {
		counter += 1; current += increment; obj.innerHTML = Math.abs(current).toFixed(1) + "<a1>%</a1>";
        	if (counter == animCount || current == value) {clearInterval(timer)}
	}, 40);
}

function refreshPage() {location.reload()}

function findPointBetween(color1, color2, position) {
	var rgb1 = hexToRgb(color1); var rgb2 = hexToRgb(color2);

	var r = Math.round(rgb1.r + (position * (rgb2.r - rgb1.r)));
	var g = Math.round(rgb1.g + (position * (rgb2.g - rgb1.g)));
	var b = Math.round(rgb1.b + (position * (rgb2.b - rgb1.b)));
	return rgbToHex(r, g, b);
}

function hexToRgb(hex) {
	var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
	return result ? {
        r: parseInt(result[1], 16), g: parseInt(result[2], 16), b: parseInt(result[3], 16)
	} : null;
}

function rgbToHex(r, g, b) {return "#" + componentToHex(r) + componentToHex(g) + componentToHex(b)}
function componentToHex(c) {var hex = c.toString(16); return hex.length == 1 ? "0" + hex : hex;}

makeFlexContainerDraggable(document.getElementById("controlBarYear"));
makeFlexContainerDraggable(document.getElementById("controlBarContest"));

function makeFlexContainerDraggable(flexContainer) {
	let isDragging = false; let startY, scrollTop;

	flexContainer.addEventListener('mousedown', (e) => {
		isDragging = true;
		startY = e.pageY - flexContainer.offsetTop;
		scrollTop = flexContainer.scrollTop;
		flexContainer.style.scrollSnapType = "none";
	});

	flexContainer.addEventListener('mouseleave', () => {isDragging = false; flexContainer.style.scrollSnapType = "both";});
	flexContainer.addEventListener('mouseup', () => {isDragging = false;});

	flexContainer.addEventListener('mousewheel', function(event) {
		flexContainer.style.scrollSnapType = "both";
	});

	flexContainer.addEventListener('mousemove', (e) => {
		if (!isDragging) return;
		e.preventDefault();
		const y = e.pageY - flexContainer.offsetTop;
		const walkY = y - startY;
		flexContainer.scrollTop = scrollTop - walkY;
	});
}

let clickStartTime;

var pathStatus = d3.select("#data").attr("button-road270");

function setListeners() {

var statePaths = document.querySelectorAll('.mapTest .state');
statePaths.forEach(path => {
	path.addEventListener('mouseup', (event) => {
		const clickDuration = new Date().getTime() - clickStartTime;
  		if (clickDuration > 250) {event.preventDefault()} else {zoomToPath(path, 750)}});
});

var paths = document.getElementsByTagName('path'); var pathsLength = paths.length;
for (let i = 0; i < pathsLength; i++) {
	paths[i].addEventListener('click', function(event) {clickedFunction(event.target)}, false)}
}

function setListenersDrag() {
	var allPaths = document.querySelectorAll('#nationalMap path');
	allPaths.forEach(path => {
		path.addEventListener('mousedown', (event) => {
			clickStartTime = new Date().getTime();
			dataElement.setAttribute("drag-status", "true")
		});
		path.addEventListener('mouseup', (event) => {
			const clickDuration = new Date().getTime() - clickStartTime;
			if (clickDuration > 250) {
				event.preventDefault();
				dataElement.setAttribute("drag-status", "true")
			} else {
				dataElement.setAttribute("drag-status", "false")
			}
		});
	});
}

function setListenersHouse() {
	var pathsCD = document.querySelectorAll('.mapTest.cd');
	pathsCD.forEach(path => {
		path.addEventListener('mouseup', (event) => {
			const clickDuration = new Date().getTime() - clickStartTime;
			if(clickDuration > 250) { event.preventDefault()} else {zoomToPath(path, 750)}
		});
	});
}

let previousViewBox = null;

function zoomToPath(path, t) {
	dur = t || 1000;
	zoomToBoundingBox(path, 0.39, 0.61, dur);
}

function zoomToState(s, t){
	dur = t || 1000;
	const bbox = document.getElementById(s).getBBox();
//	if(s == "Michigan") {bbox = {"height":120.8,"width":117.5,"x":541,"y":178.76}}
	const x0 = bbox.x, y0 = bbox.y, x1 = x0 + bbox.width, y1 = y0 + bbox.height;

	const clicked = d3.select("#data").attr("last-clicked");
	const selectedYear = d3.select("#data").attr("button-year");
	const selectedContest = d3.select("#data").attr("button-contest");
	const clickLevel = d3.select("#data").attr("data-level");

	if(selectedContest == "STATE HOUSE" || selectedContest == "STATE SENATE"){
		if(clickLevel == "state"){
			zoomToBoundingBox(s,0,1,750);
			hideResults()
		} else {
			zoomToBoundingBox(s,.39,.61,750);
			showResults()
		}
	} else if(selectedContest == "HOUSE" && selectedYear == "2024"){
		if(clickLevel == "state"){
//			zoomToBoundingBox(s, 0, .755, t);
//			hideResults()

			showResults()
			zoomToBoundingBox(s, .39, .365, t);
		} else {
			showResults()
			zoomToBoundingBox(s, .39, .365, t*.75);
		}
	} else {
		if(selectedContest !== "PRESIDENT BY CD"){
			showResults()
//	var aB = d3.selectAll(".historyPanel").filter((_, i, a) => d3.select(a[i]).style("display") !== "none").size();
			zoomToBoundingBox(s, 0.39, 0.61, 750);
		} else {
			hideResults()
			if(clickLevel == "state"){
				zoomToBoundingBox(s, 0, 1, 750)
			} else {
				zoomToBoundingBox(s, 0.39, 0.61, 500)
			}
		}
	}
}

function zoomToDistrict(district, t){
	const dur = t || 750;

	zoomToState(document.getElementById(district).getAttribute('data-state'));
}

function zoomToGroup(p, t, zS, l, w) {
	dur = t || 1000; scale = zS || 0.925;
	var left = l || 0.39, wW = w || 0.61;
	if(left + wW > 1) {wW = 1 - left};
	if(left + wW > 0.955){var rPad = (wW - 0.045) / wW} else {var rPad = 1}

	const paths = p.map(a => document.getElementById(a));

	var x = d3.min(paths, function(d) {return d.getBBox().x}),
		y = d3.min(paths, function(d) {return d.getBBox().y}),
		width = d3.max(paths, function(d) {var bb = d.getBBox(); return (bb.x + bb.width) - x}),
		height = d3.max(paths, function(d) {var bb = d.getBBox(); return (bb.y + bb.height) - y});

	const x0 = x, y0 = y, x1 = x0 + width, y1 = y0 + height;

	d3.select("#nationalMap").transition().duration(dur).call(
		zoom.transform, d3.zoomIdentity
		.translate(svgWidth * (0.5 * wW * rPad + left), 400)
		.scale(scale / Math.max((x1 - x0) / (svgWidth * wW * rPad), (y1 - y0) / 800))
		.translate(-(x0 + x1) / 2, -(y0 + y1) / 2)
	);
}

function reset(t) {
	dur = t || 1000;
	const d = d3.select("#data");
	const cl = d.attr("last-clicked"), y = d.attr("button-year"), c = d.attr("button-contest");

	if(c == "HOUSE" && y == "2024" && cl == "United States"){
		resetBox(0,0.755,dur,0.975);
	} else {
		resetBox(0,1,dur);
	}
}

function initialReset() {
	resetBox(0,100,1)
}

function zoomToBoundingBox(s, left, width, t, z) {
	dur = t || 1000; scale = z || 0.925;
	if(left + width > 1) {width = 1 - left};
	if(left + width > 0.955){rPad = (width - 0.045) / width} else {rPad = 1}
	const bbox = document.getElementById(s).getBBox();
	const x0 = bbox.x, y0 = bbox.y, x1 = x0 + bbox.width, y1 = y0 + bbox.height;

	sessionStorage.setItem("map-space", [left, width]);

	d3.select("#nationalMap").transition().duration(dur).call(
		zoom.transform, d3.zoomIdentity
		.translate(svgWidth * (0.5 * width * rPad + left), 400)
		.scale(scale / Math.max((x1 - x0) / (svgWidth * width * rPad), (y1 - y0) / 800))
		.translate(-(x0 + x1) / 2, -(y0 + y1) / 2)
	);
}

function zoomToCounty(s, t, z) {
	dur = t || 1000; scale = z || 0.925;
	var rPad = (0.61 - 0.045) / 0.61;
	const bbox = document.getElementById(s).getBBox();
	const x0 = bbox.x, y0 = bbox.y, x1 = x0 + bbox.width, y1 = y0 + bbox.height;

	d3.select("#nationalMap").transition().duration(dur).call(
		zoomA.transform, d3.zoomIdentity
		.translate(svgWidth * (0.5 * 0.61 * rPad + 0.39), 400)
		.scale(scale / Math.max((x1 - x0) / (svgWidth * 0.61 * rPad), (y1 - y0) / 800))
		.translate(-(x0 + x1) / 2, -(y0 + y1) / 2)
	);
}

function resetBox(left, width, t, z, y) {
	dur = t || 1000;
	scale = z || 0.925;
	if(left + width > 1) {width = 1 - left}
	if(left + width > 0.955 && y !== 0){var rPad = (width - 0.045) / width} else {var rPad = 1}

	d3.select("#nationalMap").transition().duration(dur).call(
		zoom.transform, d3.zoomIdentity
		.translate(svgWidth * (0.5 * width * rPad + left), 400)
		.scale(scale / Math.max(1350.56298828125 / (svgWidth * width * rPad), 0.9243587493896485))
		.translate(-811.302490234375, -399.94849967956543)
	);
}

function opacityCountyLabel(opacity) {d3.selectAll('.labelText').style('opacity', opacity)}

function setPointLabels(state) {
  	clearPointLabels();
	svg.selectAll('.label[data-state="' + state + '"]')
		.style('display', 'block')
        	.style('opacity', '1')
		.raise();
}

function establishPointLabels() {
	const labelAnchor = {"L":"end","T":"middle","B":"middle","R":"start"};
	d3.selectAll('.labelText')
		.style('text-anchor', function() {return labelAnchor[d3.select(this).attr('data-label_pos')]})
//  		.classed('outsideLabel', function() {return d3.select(this).attr('data-inside') == 'FALSE'});
	d3.selectAll('.label').style("display", "none")
}

function clearPointLabels() {
	d3.selectAll('.label').style("display", "none")
}

function sortObjectAndGetKeys(o) {
	return Object.keys(o)
		.map(k => [k, o[k]])
		.sort((a, b) => b[1] - a[1])
		.map(p => p[0]);
}

function createPollClosingArrays() {
	var pC = {}, t = d3.select("#controlBarPollClosings"),
	times =["7:00","7:30","8:00","8:30","9:00","10:00","11:00","12:00","1:00"];
	for(var a in pollClosingTimes) {
		let v = pollClosingTimes[a];
		if(pC[v]) {pC[v].push(a)} else {pC[v]=[a]}
	}

	window.pollClosings = pC;

	t.selectAll("span")
		.data(times)
		.enter()
		.append("span")
		.attr("id", (d) => "buttonPollClosing-" + d.replace(":", ""))
		.attr("class", "pollClosingButton")
		.on('click', clickPollClosingHour)
		.text((d) => d);

	t.append("span")
		.attr("class", "controlButton")
		.style("margin-top", "1vh")
		.on('click', nextPollClosingHour)
		.text("NEXT");
}

function clickPollClosingHour(input) {
	var b = document.getElementById(this.getAttribute('id')).innerHTML;
	const [hours, minutes] = b.split(':'), hour = +hours + +minutes / 60;

	if(hour == 12 || hour == 1){var pm = "am"} else if(hour % 1 == 0){var pm = "pm"} else {var pm = ":30"}

	setInnerHTML('headingTextPollClosingHour', +hours);
	setInnerHTML('headingTextPollClosingPM', pm); setInnerHTML('headingTextPollClosingET', 'ET');
	setInnerHTML('headingElectoralVotesText', "ELEC. VOTES<br>AT STAKE");
	colorPollClosingHour(hour); setTime()
}

function startPollClosingHour() {
	var lastClicked = d3.select("#data").attr("last-clicked"), pm;
	if(pollClosingTimes[lastClicked]){var startHour = pollClosingTimes[lastClicked]} else {var startHour = findNextTime()};

	if(startHour == 12 || startHour == 1){pm = "am"} else if(startHour % 1 == 0){pm = "pm"} else {pm = ":30"}
	startHour = Math.floor(startHour);
	d3.select("#headingTextContest").style("display", "none");

	dataElement.setAttribute("poll-closinghour", startHour);

	setInnerHTML('headingTextPollClosingHour', +startHour);
	setInnerHTML('headingTextPollClosingPM', pm);
	setInnerHTML('headingTextPollClosingET', 'ET');

	returnHome();
	setTimeout(function(){colorPollClosingHour(startHour)}, 50);

//	setInnerHTML('headingElectoralVotesNumber', 0);
	setInnerHTML('headingElectoralVotesText', "ELEC. VOTES<br>AT STAKE");
	d3.selectAll("#headingElectoralVotes span").style("opacity", "1");
	d3.selectAll(".county").style('fill', 'rgb(107, 112, 123)');
}

function colorPollClosingHour(input, trans) {
	var s = Object.keys(pollClosingTimes), sCl = pollClosings[input] || pollClosings["7"], sCt = sCl.length;
	dataElement.setAttribute("poll-closinghour", input);	

	let size, parentDiv = d3.select('#boxPollClosingStates');
	if (sCt < 5) {size = "small"} else if (sCt >= 5 && sCt < 9) {size = "medium"} else {size = "large"}
	parentDiv.attr('class', size).selectAll('*').remove();

	var eVT = 0;
	for (let i = 0; i < s.length; i++) {
		var tS = s[i], tE = document.getElementById(tS); tE.classList = "state";

		if (sCl.includes(tS)) {
			var eV = electoralVotes[tS]['2024']; eVT += eV;
			var tW = data_president[tS]['w24'], wC = {"d":"blue","r":"red"}; 
			tS = tS.replace(/trict/g, "t");
			var nE = d3.select("#boxPollClosingStates").append('span').text(tS);

				if(tW){
					tE.style.fill = "";
					tE.classList = "state " + wC[tW] + "State";
					nE.attr('class', wC[tW]);
				} else {
					tE.style.fill = "rgb(250,188,14)"
				}
		} else {
			tE.style.fill = "rgb(107, 112, 123)"
		}
	}

	animateNumber(eVT,'headingElectoralVotesNumber')
	function z(a,b,c){zoomToGroup(a,b,c)}
	switch (input) {
		case 6: z(['Indiana','Kentucky']); break;
		case 7: if (trans !== 1) {z(['Vermont','Kentucky','Georgia'])} break;
		case 7.5: z(['Ohio','North Carolina']); break;
		case 8: z(['Oklahoma','Florida','Maine']); break;
		case 8.5: z(['Arkansas'],1000,0.7); break;
		case 9: z(['New York','Texas','North Dakota','Arizona']); break;
		case 10: z(['Nevada','Montana','Utah']); break;
		case 11: z(['California','Idaho','Washington']); break;
		case 12: z(['Hawaii'],1000,0.7); break;
		case 1: z(['Alaska'],1000,0.7); break;
		default: break;
	}
}

function nextPollClosingHour() {
	const nextPollClosingTimes = {6:"7:00",7:"7:30",7.5:"8:00",8:"8:30",8.5:"9:00",9:"10:00",10:"11:00",11:"12:00",12:"1:00"};

	var lastClicked = d3.select("#data").attr("poll-closinghour");
	var startHour = nextPollClosingTimes[lastClicked];
	var [hours, minutes] = startHour.split(':'); const hour = +hours + +minutes / 60;

	dataElement.setAttribute("poll-closinghour", hour);
	setTime();

	let pm; if(hour == 12 || hours == 1){pm = "am"} else if(minutes == "00"){pm = "pm"} else {pm = ":30"}

	setInnerHTML('headingTextPollClosingHour', hours); setInnerHTML('headingTextPollClosingPM', pm);
	colorPollClosingHour(hour);
}

function clickPen() {
	var drawButton = document.getElementById("buttonDraw");

	if(drawButton.classList.contains('controlButtonNotselected')){
		d3.select("#data").attr("button-draw", "true");
		nationalMapElement.addEventListener("mousedown", function(event){startDrawing(event)}, false);
		nationalMapElement.addEventListener("mousemove", function(event){draw(event)}, false);
		nationalMapElement.addEventListener("mouseup", stopDrawing);
		nationalMapElement.addEventListener("mouseleave", stopDrawing);
		document.getElementById("nationalMap").style.pointerEvents = "painted";
		d3.select("#nationalMap").on("mousedown.zoom", null)
	} else {
		d3.select("#data").attr("button-draw", "false");
		nationalMapElement.removeEventListener("mousedown", function(event){startDrawing(event)}, false);
		nationalMapElement.removeEventListener("mousemove", function(event){draw(event)}, false);
		nationalMapElement.removeEventListener("mouseup", stopDrawing);
		nationalMapElement.removeEventListener("mouseleave", stopDrawing);
		document.getElementById("nationalMap").style.pointerEvents = "none";
		d3.select("#nationalMap").call(zoom);
	};
	
	drawButton.classList.toggle('controlButtonNotselected');
	document.getElementById("drawIcon").classList.toggle('selected');
}


const mapElement = document.getElementById("nationalMap");
var isDrawing = false;

function startDrawing(event) {
	d3.select("#pathDrawn").raise();
	var statusDraw = d3.select("#data").attr("button-draw");
	if(statusDraw == "true"){
		document.getElementById("clearDraw").classList.add('visible');
  		pathData = document.getElementById("pathDrawn").getAttribute("d");
		isDrawing = true;
		const {x,y} = getMousePosition(event); pathData += `M${x},${y}`;
		document.getElementById("pathDrawn").setAttribute("d", pathData);
	}		
}

function draw(event) {
	if (!isDrawing) return;
        const {x,y} = getMousePosition(event); pathData += ` L${x},${y}`;
	document.getElementById("pathDrawn").setAttribute("d", pathData);
}

function stopDrawing() {isDrawing = false;}

function clearDrawing() {
	dataElement.setAttribute("button-draw", "false");
	d3.select("#nationalMap").call(zoom);
	document.getElementById("pathDrawn").setAttribute("d", "");
	document.getElementById("clearDraw").classList.remove('visible');
	document.getElementById("drawIcon").classList.remove('selected');
	document.getElementById("buttonDraw").classList.add('controlButtonNotselected');
	document.getElementById("nationalMap").style.pointerEvents = "none";
}

function getMousePosition(evt, svg) {
  var point = svg.createSVGPoint();
  point.x = evt.clientX;
  point.y = evt.clientY;

  var ctm = svg.getScreenCTM().inverse();
  var transformedPoint = point.matrixTransform(ctm);

  return {
    x: transformedPoint.x,
    y: transformedPoint.y
  };
}

function generateDistrictGroups() {
	const parentDiv = d3.select('#resultsHouseGroups');
	parentDiv.selectAll('*').remove();
	const yrShort = d3.select('#data').attr('button-year').slice(-2);

//	const otherYearDistricts = d3.selectAll(`.cd:not(.cd${yrShort})`);
//	otherYearDistricts.each(function() {
//		const district = d3.select(this).attr('data-district');
//		d3.select(this).attr('id', `${yrShort}_${district}`).style('display', 'none');
//	});

d3.selectAll(`.cd:not(.cd${yrShort})`).attr('id', function() {
  const a = d3.select(this).attr('data-district');
  return `${yrShort}_${a}`;
}).style('display', 'none');

d3.selectAll(`.cd.cd${yrShort}`).attr('id', function() {
  let thisCD = d3.select(this).attr('id');
  if (thisCD.includes('_')) {
    thisCD = thisCD.slice(thisCD.indexOf('_') + 1);
  }
  const cdSplit = thisCD.split('-');
  const newElement = parentDiv.append('span')
    .attr('data-district-state', abbreviationState[cdSplit[0]])
    .attr('data-district', thisCD)
    .attr('id', `box-${thisCD}`)
    .html(`${cdSplit[0]} <hd>${cdSplit[1]}</hd>`)
	.style('order', function(){
	var o = `${abbreviationFIPS[cdSplit[0]]}${cdSplit[1]}`
	return o
	})
    .classed('districtBox', true);
});

	const clicked = d3.select('#data').attr('last-clicked');
	const stateClicked = d3.select('#data').attr('data-stateclick');
	if(stateClicked && stateClicked !== 'United States') {
		if(!clicked.includes('-')) {d3.select(`[id='${stateClicked}']`).raise();}
		d3.selectAll(`.districtBox:not([data-district-state='${stateClicked}'])`).style('display', 'none');
		d3.selectAll(`.districtBox[data-district-state='${stateClicked}']`).style('display', 'initial');
	}

	parentDiv.selectAll('.districtBox')
		.on('click', function() {
			const district = d3.select(this).attr('id').substring(4, 9);
			clickDistrictBox(district);
		});
}

function generateDistrictBoxes() {
	var parentDiv = document.getElementById('resultsBoxHouseDistricts');

	d3.select('#resultsBoxHouseDistricts').selectAll('*').remove();

	var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
	var otherYearDistricts = d3.selectAll(`.cd:not(.cd${yrShort})`);
	otherYearDistricts.each(function() {
		let a = d3.select(this).attr("data-district");
		d3.select(this)
			.attr("id", yrShort + "_" + a)
			.style("display", "none");
	});

	var yrShort = d3.select("#data").attr("button-year").slice(-2).toString();
	var cdDistricts = document.querySelectorAll(`.cd.cd${yrShort}`);
	var cdThisYear = Array.from(cdDistricts).map(element => element.id);

	cdThisYear.forEach((cd, i) => {
		let thisCD; if(cd.includes("_")) {thisCD = cd.slice(cd.indexOf("_") + 1)} else {thisCD = cd}

		var cdSplit = thisCD.split("-"), textContent = `${cdSplit[0]} <hd>${cdSplit[1]}</hd>`;
		var order = (abbreviationFIPS[cdSplit[0]]).toString() + cdSplit[1].toString();

		var newElement = d3.select(parentDiv)
			.append('span')
			.attr('data-district-state', abbreviationState[cdSplit[0]])
			.attr('data-district', thisCD)
			.attr('id', "box-" + thisCD)
			.html(textContent)
			.style('order', order)
			.attr("class", "districtBox");
	});

	var clicked = d3.select("#data").attr("last-clicked");
	var stateClicked = d3.select("#data").attr("data-stateclick");
	if(stateClicked && stateClicked !== "United States") {
		if(!clicked.includes("-")) {d3.select("[id='" + stateClicked + "']").raise()}
		d3.selectAll(`.districtBox:not([data-district-state="${stateClicked}"])`).style("display", "none");
		d3.selectAll(`.districtBox[data-district-state="${stateClicked}"]`).style("display", "initial");
	}

	d3.selectAll(".districtBox")
		.on('click', function() {
			const a = d3.select(this).attr('id').substring(4, 9);
			setTimeout(function() {clickDistrictBox(a)}, 50);
		});
}

function generateHouseGroupBoxes(){
	var houseGroups = {
	"DEM TARGETS":["AL-02", "AZ-01", "AZ-06", "CA-03", "CA-13", "CA-22", "CA-27", "CA-40", "CA-41", "CA-45", "CO-03", "FL-02", "FL-13", "IA-03", "MI-10", "NC-11", "NE-02", "NJ-07", "NY-01", "NY-03", "NY-04", "NY-17", "NY-19", "NY-22", "OR-05", "PA-10", "TX-15", "VA-02", "WI-03"],
	"GOP TARGETS":["AK-01", "CA-47", "CO-08", "FL-23", "IL-17", "IN-01", "ME-02", "MI-07", "MI-08", "MN-02", "NC-01", "NC-06", "NC-13", "NC-14", "NM-02", "NV-03", "NY-18", "OH-09", "OH-13", "PA-07", "PA-08", "PA-17", "TX-34", "VA-07", "WA-03"],
	"DEM REACH":["MO-02", "NY-02", "FL-05", "IA-02", "WI-01", "SC-01", "PA-01", "MT-01", "LA-05", "IA-01"],
	"GOP REACH":["TX-28", "VA-10", "NJ-03", "KS-03", "FL-09", "CA-49", "CA-09", "RI-02", "MD-06", "OR-04", "NH-02", "MI-03", "NV-01", "NV-04", "CT-05", "NH-01", "WA-08", "OH-01", "OR-06"],
	"":[]
	}

	for (const [a, b] of Object.entries(houseGroups)) {houseGroups[a] = [...new Set(b)].sort()}

	var div = d3.select('#resultsHouseGroups');
	Object.keys(houseGroups).forEach(function(a) {
		div.append('span').text(a).classed('header', true);
		houseGroups[a].forEach(function(b) {
			let c = b.split("-");
			div.append('span')
				.attr('id', "groupBox-" + b)
				.html(c[0] + " <hd>" + c[1] + "</hd>")
				.on('click', function() {clickDistrictBox(d3.select(this).attr('data-district'))})
				.classed('cdBox', true)
				.classed('cdGroupBoxPollsClosed', true)
				.attr('data-district', b);
		});
	});
}

/*
document.getElementById('resultsBoxHouseTotalsUncalled').addEventListener('click', clickUncalledDistrictBox, false);

function clickUncalledDistrictBox() {
	const year = d3.select("#data").attr("button-year");

	var districtBoxes = document.getElementsByClassName("districtBox");
	for (let i = 0; i < districtBoxes.length; i++) {
		const thisDB = districtBoxes[i];
		const thisCD = thisDB.getAttribute('data-district');
		var cdSplit = thisCD.split("-");

		var cdData = data_house[year + "-" + thisCD];
		if (cdData) {
			if(cdData.winner = ""){thisDB.style.display = "initial"} else {
			thisDB.style.display = "none"};
		} else {
			thisDB.style.display = "none";
		}
	}
}
*/

function reorderDistrictBox() {
	return;
	const year = d3.select("#data").attr("button-year");
	var reporting = 0, racesCalled = 0, gain = 0;
	var clicked = d3.select("#data").attr("last-clicked"), stateClicked = d3.select("#data").attr("data-stateclick");

	var districtBoxes;
	if (clicked == "United States") {
		districtBoxes = d3.selectAll(".districtBox")
	} else {
		districtBoxes = d3.selectAll(`.districtBox[data-district-state="${stateClicked}"]`);
	}

	const cdCount = districtBoxes.size();
	districtBoxes.each(function() {
		const thisDB = d3.select(this); const thisCD = thisDB.attr('data-district'); var cdSplit = thisCD.split("-");

		var cdData = data_house[year + "-" + thisCD];
		if (!cdData) {
			var order = +`${abbreviationFIPS[cdSplit[0]]}${cdSplit[1]}`;
			thisDB.style('order', 30000 + order);
		} else if (cdData['winner'] !== "" && cdData['winner'] !== "tie" && cdData['winner'] !== "runoff") {
			var order = +`${abbreviationFIPS[cdSplit[0]]}${cdSplit[1]}`;
			thisDB.style('order', 20000 + order);
			racesCalled++;
		} else if (cdData['total_vote'] > 0) {
			var order = +`${abbreviationFIPS[cdSplit[0]]}${cdSplit[1]}`;
			thisDB.style('order', order);
			reporting++;
		} else if (cdData) {
			var order = +`${abbreviationFIPS[cdSplit[0]]}${cdSplit[1]}`;
			thisDB.style('order', 40000 + order);
		}
	});

	var parentDiv = d3.select('#resultsBoxHouseDistricts');
	parentDiv.selectAll('.districtHeading').remove();

/*
	if ((racesCalled + reporting) < cdCount) {
		parentDiv.append('span')
		.html("AWAITING RESULTS: " + (cdCount - racesCalled - reporting))
		.style('order', 29999)
		.classed('districtHeading', true);
	}

	if (reporting > 0) {
		parentDiv.append('span')
		.html("TOO EARLY TO CALL: " + reporting)
		.style('order', 0)
		.classed('districtHeading', true);
	}

	if (racesCalled > 0 && racesCalled !== cdCount) {
  		parentDiv.append('span')
		.html("RACES CALLED: " + racesCalled)
		.style('order', 19999)
		.classed('districtHeading', true);
	}
*/
}

function clickDistrictBox(district){
	var selectedYear = d3.select("#data").attr("button-year");
	var districtE = document.getElementById(district), districtNumber = +district.substring(3,5);
	var state = districtE.getAttribute('data-state'), stateE = document.getElementById(state);

	d3.select("#data")
		.attr("last-clicked", district)
		.attr("data-level", "county")
		.attr("data-stateclick", state)
		.attr("data-state", state)
		.attr("data-stateabbreviation", districtE.getAttribute("data-stateabbreviation"));

	if(d3.select("#data").attr("last-clicked") == "United States"){updateContestText();}
	setInnerHTML('headingTextTitle', state);
	setInnerHTML('resultsBoxTopText', "District " + districtNumber);

	zoomToDistrict(district);

	$("#resultsBoxHouse").addClass("hidden");
	$(".selectedCounty").removeClass("selectedCounty");
	$(".cd").addClass("notSelectedState");

	d3.selectAll(".state").classed("notSelectedState", true).lower().classed("selectedState", false);

//	if(selectedYear !== "2024"){
		d3.selectAll(".districtBox:not([data-district-state='"+ state +"'])").style("display", "none");
		d3.selectAll(".districtBox[data-district-state='"+ state +"']").style("display", "initial");
//	} else {
		// d3.select("#headingTextContest").text(year + ' ' + contest);
//	}

	d3.select(stateE).classed("selectedState", true);

	d3.select(districtE)
		.raise()
		.classed("notSelectedState", false)
		.classed("selectedCounty", true);

	getResults(); setPointLabels(state);
	d3.select("#buttonHistory").style("display", (+selectedYear >= 2018) ? "flex" : "none");
	if(d3.select("#data").attr("button-history") == "true") {updateHistory()}
	showResults();
}

function refreshLabelsPath() {
	d3.selectAll(".label").raise();
	d3.select("#pathDrawn").raise();
}

function createEVBoxes() {
	d3.select("#Maine").on('mousedown', (event) => {
		if(d3.select("#data").attr("button-road270") == "true") {
			let districtTimer = setTimeout(() => {
				dataElement.setAttribute("button-draw", "true");
				d3.select("#electoralVoteMaine").classed("visible", true);
				d3.select("#electoralVoteNebraska").classed("visible", false);
				d3.select("#Maine").classed("evBoxState", true);
				d3.select("#Nebraska")
					.raise()
					.classed("evBoxState", false);
			}, 500);
			d3.select("#Maine").on('mouseup', (event) => {
				clearTimeout(districtTimer);
			});
		}
	});

	d3.select("#evMaineHeading").on('click', (event) => {
		d3.select("#electoralVoteMaine").classed("visible", false);
		d3.select("#electoralVoteNebraska").classed("visible", false);
		d3.select("#Maine").classed("evBoxState", false);
		d3.select("#Nebraska").classed("evBoxState", false);
		dataElement.setAttribute("button-draw", "false");
	});

	d3.select("#Nebraska").on('mousedown', (event) => {
		if(d3.select("#data").attr("button-road270") == "true") {
			let districtTimer = setTimeout(() => {
				d3.select("#electoralVoteNebraska").classed("visible", true);
				d3.select("#Nebraska").classed("evBoxState", true);
				d3.select("#electoralVoteMaine").classed("visible", false);
				d3.select("#Maine").classed("evBoxState", false);
				dataElement.setAttribute("button-draw", "true");
			}, 500);
			d3.select("#Nebraska").on('mouseup', (event) => {
				clearTimeout(districtTimer);
			});
		}
	});

	d3.select("#evNebraskaHeading").on('click', (event) => {
		d3.select("#electoralVoteMaine").classed("visible", false);
		d3.select("#electoralVoteNebraska").classed("visible", false);
		d3.select("#Maine").classed("evBoxState", false);
		d3.select("#Nebraska").classed("evBoxState", false);
		dataElement.setAttribute("button-draw", "false");
	});
}

var electoralVotesMap = {};

const buttonsParty = document.getElementsByClassName("partyButton");
for (let i = 0; i < buttonsParty.length; i++) {buttonsParty[i].addEventListener('click', click270Party, false)}

d3.select("#button270-clear").on('click', function(event) {
	electoralVotesMap = {};
	d3.selectAll(".state").attr("class", "state");
	calculateElectoralVoteMap();
});

document.getElementById("button270-proj").addEventListener('click', (event) => {
	electoralVotesMap = {};
	d3.selectAll(".state")
		.attr("class", "state")
		.each(function() {
			const tS = d3.select(this).attr("id");
			const tW = data_president[tS]?.w24;
			if (tW) {electoralVotesMap[tS] = tW}
  		});

	calculateElectoralVoteMap();
});

document.getElementById("button270-2020").addEventListener('click', (event) => {
	electoralVotesMap = {};
	d3.selectAll(".state")
		.each(function() {
			const tS = d3.select(this).attr("id");
			const tW = data_president[tS]?.w20;
			if (tW) {electoralVotesMap[tS] = tW}
  		});
	calculateElectoralVoteMap();
});

document.getElementById("button270-2016").addEventListener('click', (event) => {
	electoralVotesMap = {};
	d3.selectAll(".state")
		.each(function() {
			const tS = d3.select(this).attr("id");
			const tW = data_president[tS]?.w16;
			if (tW) {electoralVotesMap[tS] = tW}
  		});

	calculateElectoralVoteMap();
});

document.getElementById("button270-safe").addEventListener('click', (event) => {
	electoralVotesMap = {"Alabama":"r","Alaska":"r","Arkansas":"r","California":"d","Colorado":"d","Connecticut":"d","Delaware":"d","District of Columbia":"d","Hawaii":"d","Idaho":"r","Illinois":"d","Indiana":"r","Kansas":"r","Kentucky":"r","Louisiana":"r","Maine":"d","Maryland":"d","Massachusetts":"d","Mississippi":"r","Missouri":"r","Montana":"r","Nebraska":"r","New Mexico":"d","New Jersey":"d","New York":"d","North Dakota":"r","Oklahoma":"r","Oregon":"d","Rhode Island":"d","South Carolina":"r","South Dakota":"r","Tennessee":"r","Utah":"r","Vermont":"d","Virginia":"d","Washington":"d","West Virginia":"r","Wyoming":"r","Arizona":"","Nevada":"","Texas":"","Florida":"","Georgia":"","North Carolina":"","Pennsylvania":"","New Hampshire":"","Ohio":"","Iowa":"","Michigan":"","Wisconsin":"","Minnesota":""}
	calculateElectoralVoteMap();
});

function updateRoadMapProjections() {

	d3.selectAll(".state").each(function() {
 		const thisElement = d3.select(this);
		const thisState = thisElement.attr('id');
		const thisWinner = data_president[thisState]['w24'];
		if (thisWinner && thisWinner !== "") {electoralVotesMap[thisState] = thisWinner;}
		if (thisElement.style('fill')) {thisElement.style('fill', '')}
	});

	calculateElectoralVoteMap();
}

function click270Party() {
	var thisID = this.getAttribute('id'); var thisParty = this.getAttribute('data-party');
	dataElement.setAttribute("data-road270-party", thisParty);

	for (let i = 0; i < buttonsParty.length; i++) {buttonsParty[i].classList = "partyButton"}
	document.getElementById(thisID).classList = "partyButton clicked";
}

function select270Party(input) {
	dataElement.setAttribute("data-road270-party", input);
	for (let i = 0; i < buttonsParty.length; i++) {buttonsParty[i].classList = "partyButton"}
	document.getElementById("button270-party-" + input).classList = "partyButton clicked";
}

function resetElectoralVoteMap() {
	electoralVotesMap = {};
	d3.selectAll(".state")
		.attr("class", "state")
		.each(function() {
			const tS = d3.select(this).attr("id");
			const tW = data_president[tS]?.w24;
			if (tW) {electoralVotesMap[tS] = tW}
  		});

	calculateElectoralVoteMap();
}

function addElectoralVoteMap(s, p) {electoralVotesMap[s] = p; calculateElectoralVoteMap()}

function calculateElectoralVoteMap() {
	var winnerClass = {"d":"blue","r":"red"}; var demCount = 0, gopCount = 0;
	var evMap = Object.keys(electoralVotesMap);
	for (let i = 0; i < evMap.length; i++) {
		var thisState = evMap[i]; var winner = electoralVotesMap[thisState];
		document.getElementById(thisState).classList = "state " + winnerClass[winner] + "State";
		var thisEV = electoralVotes[thisState]['2024'];
		if(winner == "d"){demCount += thisEV}; if(winner == "r"){gopCount += thisEV};
	}

	var demProgress = (demCount >= 270) ? 1 : (demCount / 270);
	var gopProgress = (gopCount >= 270) ? 1 : (gopCount / 270);

	d3.select("#tallyCandidateTotalLeft")
		.style("margin-top", demCount > 67 ? "0" : "-6vw")
		.style("top", `${(1 - demProgress) * 100}%`);

	d3.select("#tallyCandidateTotalRight")
		.style("margin-top", gopCount > 67 ? "0" : "-6vw")
		.style("top", `${(1 - gopProgress) * 100}%`);

	d3.select("#tallyCandidatesBoxLeft").classed("winner", demCount >= 270);
	d3.select("#tallyCandidatesBoxRight").classed("winner", gopCount >= 270);

	d3.select("#tallyCandidatesBarLeft").style("clip-path", `inset(${(1 - demProgress) * 100}% 0 0 0)`);
  	d3.select("#tallyCandidatesBarRight").style("clip-path", `inset(${(1 - gopProgress) * 100}% 0 0 0)`);

  	animateNumber(demCount, "tallyCandidateTotalLeft");
  	animateNumber(gopCount, "tallyCandidateTotalRight");
}

function togglePresidentVotes() {}

function setTime() {
	var pollHour = +d3.select("#data").attr("poll-closinghour"), targetTime = [0,0,0];
	switch (true) {
		case pollHour < 12 && pollHour > 1:
			targetTime[0] = Math.floor(+pollHour) + 12;
			if (pollHour % 1 !== 0) {targetTime[1] = 30}
			break;
		case pollHour == 12:
			targetTime[0] = 0; break;
		case pollHour == 1:
			targetTime[0] = 1; break;
	}
//	targetTime[1] = 10;
	const a = moment.tz('America/New_York'), b = a.clone().set({hour: targetTime[0], minute: targetTime[1], second: 0});
	var d = b.diff(a);
	if(d > -10000 && d < -3000){nextPollClosingHour(); d3.select('#boxPollClosingHeading').text(" "); return;}
	if(d<0 && d > -15000){d=0}
	var [h,m,s] = moment.utc(d).format('HH:mm:ss').split(":");
	if (+h == 0) {y=+m+":"+s;} else {y=[+h,m,s].join(":")}
	if(h >= 12){y = null}
	d3.select('#boxPollClosingHeading').html(y);
}

var timestampClock;
function startTimestamps() {
	setTime();
	const nSec = 1000 - (new Date).getMilliseconds();
	setTimeout(function() {timestampClock = setInterval(function() {setTime()}, 1000)}, nSec);
}

function importData() {importMSData()}

function importElectionData(){
importDDHQ("https://data.ddhq.io/25394","2024");
importDDHQ("https://data.ddhq.io/25396","2024");
importDDHQ("https://data.ddhq.io/25397","2024");
importDDHQ("https://data.ddhq.io/25401","2024");
importDDHQ("https://data.ddhq.io/25402","2024");
importDDHQ("https://data.ddhq.io/25403","2024");
importDDHQ("https://data.ddhq.io/25404","2024");
importDDHQ("https://data.ddhq.io/25405","2024");
importDDHQ("https://data.ddhq.io/25406","2024");
importDDHQ("https://data.ddhq.io/25407","2024");
importDDHQ("https://data.ddhq.io/25408","2024");
importDDHQ("https://data.ddhq.io/25409","2024");
importDDHQ("https://data.ddhq.io/25411","2024");
importDDHQ("https://data.ddhq.io/25412","2024");
importDDHQ("https://data.ddhq.io/25413","2024");
importDDHQ("https://data.ddhq.io/25414","2024");
importDDHQ("https://data.ddhq.io/25415","2024");
importDDHQ("https://data.ddhq.io/25416","2024");
importDDHQ("https://data.ddhq.io/25417","2024");
importDDHQ("https://data.ddhq.io/25418","2024");
importDDHQ("https://data.ddhq.io/25419","2024");
importDDHQ("https://data.ddhq.io/25420","2024");
importDDHQ("https://data.ddhq.io/25421","2024");
importDDHQ("https://data.ddhq.io/25422","2024");
importDDHQ("https://data.ddhq.io/25423","2024");
importDDHQ("https://data.ddhq.io/25424","2024");
importDDHQ("https://data.ddhq.io/25425","2024");
importDDHQ("https://data.ddhq.io/25426","2024");
importDDHQ("https://data.ddhq.io/25427","2024");
importDDHQ("https://data.ddhq.io/25428","2024");
importDDHQ("https://data.ddhq.io/25429","2024");
importDDHQ("https://data.ddhq.io/25430","2024");
importDDHQ("https://data.ddhq.io/25431","2024");
importDDHQ("https://data.ddhq.io/25432","2024");
importDDHQ("https://data.ddhq.io/25433","2024");
importDDHQ("https://data.ddhq.io/25434","2024");
importDDHQ("https://data.ddhq.io/25435","2024");
importDDHQ("https://data.ddhq.io/25436","2024");
importDDHQ("https://data.ddhq.io/25437","2024");
importDDHQ("https://data.ddhq.io/25438","2024");
importDDHQ("https://data.ddhq.io/25439","2024");
importDDHQ("https://data.ddhq.io/25440","2024");
importDDHQ("https://data.ddhq.io/25441","2024");
importDDHQ("https://data.ddhq.io/26026","2024");
importDDHQ("https://data.ddhq.io/26027","2024");
importDDHQ("https://data.ddhq.io/26028","2024");
importDDHQ("https://data.ddhq.io/26029","2024");
importDDHQ("https://data.ddhq.io/26030","2024");
importDDHQ("https://data.ddhq.io/26031","2024");
importDDHQ("https://data.ddhq.io/26032","2024");
importDDHQ("https://data.ddhq.io/26033","2024");
importDDHQ("https://data.ddhq.io/26034","2024");
importDDHQ("https://data.ddhq.io/26035","2024");
importDDHQ("https://data.ddhq.io/26036","2024");
importDDHQ("https://data.ddhq.io/26037","2024");
importDDHQ("https://data.ddhq.io/26038","2024");
importDDHQ("https://data.ddhq.io/26039","2024");
importDDHQ("https://data.ddhq.io/26040","2024");
importDDHQ("https://data.ddhq.io/26041","2024");
importDDHQ("https://data.ddhq.io/26042","2024");
importDDHQ("https://data.ddhq.io/26043","2024");
importDDHQ("https://data.ddhq.io/26044","2024");
importDDHQ("https://data.ddhq.io/26045","2024");
importDDHQ("https://data.ddhq.io/26046","2024");
importDDHQ("https://data.ddhq.io/26047","2024");
importDDHQ("https://data.ddhq.io/26048","2024");
importDDHQ("https://data.ddhq.io/26049","2024");
importDDHQ("https://data.ddhq.io/26050","2024");
importDDHQ("https://data.ddhq.io/26051","2024");
importDDHQ("https://data.ddhq.io/26054","2024");
importDDHQ("https://data.ddhq.io/26055","2024");
importDDHQ("https://data.ddhq.io/26056","2024");
importDDHQ("https://data.ddhq.io/26057","2024");
importDDHQ("https://data.ddhq.io/26058","2024");
importDDHQ("https://data.ddhq.io/26059","2024");
importDDHQ("https://data.ddhq.io/26060","2024");
importDDHQ("https://data.ddhq.io/26061","2024");
importDDHQ("https://data.ddhq.io/26062","2024");
importDDHQ("https://data.ddhq.io/26052","2024");
importDDHQ("https://data.ddhq.io/26053","2024");
importDDHQ("https://data.ddhq.io/26064","2024");
importDDHQ("https://data.ddhq.io/26065","2024");
importDDHQ("https://data.ddhq.io/26066","2024");
importDDHQ("https://data.ddhq.io/26067","2024");
importDDHQ("https://data.ddhq.io/26068","2024");
importDDHQ("https://data.ddhq.io/26069","2024");
importDDHQ("https://data.ddhq.io/26070","2024");
importDDHQ("https://data.ddhq.io/26071","2024");
importDDHQ("https://data.ddhq.io/26073","2024");
importDDHQ("https://data.ddhq.io/26074","2024");
importDDHQ("https://data.ddhq.io/26075","2024");
importDDHQ("https://data.ddhq.io/26077","2024");
importDDHQ("https://data.ddhq.io/26076","2024");
importDDHQ("https://data.ddhq.io/26078","2024");
importDDHQ("https://data.ddhq.io/26072","2024");
importDDHQ("https://data.ddhq.io/26079","2024");
importDDHQ("https://data.ddhq.io/26080","2024");
importDDHQ("https://data.ddhq.io/26081","2024");
importDDHQ("https://data.ddhq.io/26063","2024");
importDDHQ("https://data.ddhq.io/26082","2024");
importDDHQ("https://data.ddhq.io/26083","2024");
importDDHQ("https://data.ddhq.io/26084","2024");
}

function importElectionDataDDHQ(){
	["25394", "25396", "25397", "25401", "25402", "25403", "25404", "25405", "25406", "25407", "25408", "25409", "25411", "25412", "25413", "25414", "25415", "25416", "25417", "25418", "25419", "25420", "25421", "25422", "25423", "25424", "25425", "25426", "25427", "25428", "25429", "25430", "25431", "25432", "25433", "25434", "25435", "25436", "25437", "25438", "25439", "25440", "25441", "26026", "26027", "26028", "26029", "26030", "26031", "26032", "26033", "26034", "26035", "26036", "26037", "26038", "26039", "26040", "26041", "26042", "26043", "26044", "26045", "26046", "26047", "26048", "26049", "26050", "26051", "26054", "26055", "26056", "26057", "26058", "26059", "26060", "26061", "26062", "26052", "26053", "26064", "26065", "26066", "26067", "26068", "26069", "26070", "26071", "26073", "26074", "26075", "26077", "26076", "26078", "26072", "26079", "26080", "26081", "26063", "26082", "26083", "26084"].forEach(i => {importDDHQ("https://data.ddhq.io/" + i, "2024")})
}

function importElectionDataToday(){
	importDDHQ("https://data.ddhq.io/25394","2024");
	importDDHQ("https://data.ddhq.io/25396","2024");
	importDDHQ("https://data.ddhq.io/25397","2024");
}

function importElectionDataOld(){
	importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2023-11-07/results-mississippi.json', "2023");
	importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2023-11-07/results-virginia.json', "2023");
	importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2023-11-07/results-kentucky.json', "2023");


//	importDDHQ("https://data.ddhq.io/24420","2023");
//	importDDHQ("https://data.ddhq.io/24421","2023");
//	importDDHQ("https://data.ddhq.io/24422","2023");
	importDDHQ("https://data.ddhq.io/24427","2023");
	importDDHQ("https://data.ddhq.io/24429","2023");
	importDDHQ("https://data.ddhq.io/24442","2023");
//	importDDHQ("https://data.ddhq.io/24460","2023");
//	importDDHQ("https://data.ddhq.io/25649","2024");
//	importDDHQ("https://data.ddhq.io/24461","2023");

//	importDDHQ("https://data.ddhq.io/24462","2023");
//	importDDHQ("https://data.ddhq.io/24463","2023");

	if(data_gov['2023-Kentucky'].winner == "r"){data_gov['2023-Kentucky'].gain = 1}
	if(data_gov['2023-Mississippi'].winner == "d"){data_gov['2023-Mississippi'].gain = 1}
	if(data_sos['2023-Kentucky'].winner == "d"){data_sos['2023-Kentucky'].gain = 1}
	if(data_sos['2023-Mississippi'].winner == "d"){data_sos['2023-Mississippi'].gain = 1}
//	if(data_attorney_general['2023-Kentucky'].winner == "d"){data_attorney_general['2023-Kentucky'].gain = 1}
//	if(data_attorney_general['2023-Mississippi'].winner == "d"){data_attorney_general['2023-Mississippi'].gain = 1}
}

function importMSData(){
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2023-08-08/results-mississippi.json', "2023");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-massachusetts-secretary-of-state.json',"2022");

importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2023-10-14/results-louisiana.json',"2023");
importNYTimes("https://static01.nyt.com/elections-assets/2022/data/2022-06-28/results-colorado.json", "2022");
importNYTimes("https://static01.nyt.com/elections-assets/2022/data/2022-05-17/results-pennsylvania.json", "2022");
importNYTimes("https://static01.nyt.com/elections-assets/2022/data/2022-05-17/results-north-carolina.json", "2022");
importNYTimes("https://static01.nyt.com/elections-assets/2022/data/2022-05-17/results-kentucky.json", "2022");
importNYTimes("https://static01.nyt.com/elections-assets/2022/data/2022-05-17/results-oregon.json", "2022");
importNYTimes("https://static01.nyt.com/elections-assets/2022/data/2022-05-17/results-idaho.json", "2022");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-delaware.json',"2022");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-connecticut-secretary-of-state.json',"2022");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-vermont-secretary-of-state.json',"2022");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-rhode-island-secretary-of-state.json', "2022");

importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2023-08-08/results-mississippi.json', "2023");
// importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-connecticut-us-senate.json', "2022");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-connecticut-governor.json', "2022");
// importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-maine-governor.json', "2022");
importNYTimes('https://static01.nyt.com/elections-assets/2022/data/2022-11-08/results-rhode-island-governor.json', "2022");

}

function importNYTimes(url, year) {
	const generalElectionContests = {
		"President": data_president,
		"U.S. House": data_house,
		"U.S. Senate": data_sen,
		"Governor": data_gov,
		"Secretary of State": data_sos,
		"Supreme Court": data_supreme_court,
		"Ballot Measure": data_ballot,
		"Lieutenant Governor": data_gov_lt,
		"Attorney General": data_attorney_general,
		"State House": data_state_house,
		"House of Delegates": data_state_house,
		"State Assembly": data_state_house,
		"State Senate": data_state_senate,
		"Issue": data_ballot_abortion
	};

	const demElectionContests = { "President": data_president_dem, "U.S. Senate": data_sen_dem, "Governor": data_gov_dem, "Secretary of State": data_sos_dem, "Lieutenant Governor": data_gov_lt_dem, "U.S. House": data_house_dem };
	const repElectionContests = { "President": data_president_rep, "U.S. Senate": data_sen_rep, "Governor": data_gov_rep, "Secretary of State": data_sos_rep, "Lieutenant Governor": data_gov_lt_rep, "U.S. House": data_house_rep };

	fetch(`${url}?timestamp=` + Date.now())
		.then((response) => response.json())
		.then((data) => {
			var races = data.races;
			for(let i = 0; i < races.length; i++) {
				var contests = {}, candidates = {}, tRace = races[i], tRaceCand = tRace.candidate_metadata;

				var electionOffice = tRace.office, electionType = tRace.type;
				if(electionType == "General") {
					if(generalElectionContests.hasOwnProperty(electionOffice)) {
						var dataFile = generalElectionContests[electionOffice];
					} else {
						continue;
					}
				} else if(electionType == "Primary") {
					if(tRace.party) {
						var electionParty = tRace.party.abbreviation.substring(0, 3).toLowerCase();
						if(demElectionContests.hasOwnProperty(electionOffice)) {
							if(electionParty == "dem") {
								var dataFile = demElectionContests[electionOffice];
							}
							if(electionParty == "rep") {
								var dataFile = repElectionContests[electionOffice];
							}
						} else {
							continue;
						}
					}
				} else if (electionType == "Open Primary") {
					if(demElectionContests.hasOwnProperty(electionOffice)) {
						var dataFile = demElectionContests[electionOffice]
					} else {
						continue
					}
            			}

				for(let key in tRaceCand) {
					var partyNumber = 1;
					var thisCandParty = tRaceCand[key].party.abbreviation.charAt(0).toLowerCase();
					for(var cand in candidates) {
						if(candidates[cand].p == thisCandParty) {
							partyNumber++;
							var thisCandParty = tRaceCand[key].party.abbreviation.charAt(0).toLowerCase() + partyNumber;
						}
					}

					candidates[key] = {};
					let lN = tRaceCand[key].last_name;
					if(tRaceCand[key].incumbent == true){candidates[key].inc = true;}
					candidates[key].fN = tRaceCand[key].first_name;
					candidates[key].lN = lN;
					if(tRaceCand[key].last_name == "No" || tRaceCand[key].last_name == "Yes") {
						var thisCandParty = tRaceCand[key].last_name.toLowerCase()
					}
					candidates[key].p = thisCandParty;
				}

				var rUnits = tRace.reporting_units;
				for(let j = 0; j < rUnits.length; j++) {
					var tRP = rUnits[j], tRPCand = tRP.candidates, thisResultData = {}, tO = tRace.office;
				let elec = ['House of Delegates','U.S. House','State House','State Senate','State Assembly'];
					if (elec.includes(tO)){
						if(tRace.office == "U.S. House"){
							var tDistrict = tRace.seat.replace(/\D/g, '').padStart(2, '0');
						} else {
							tDistrict = tRace.seat_number.padStart(3, '0');
						}
					var tResult = year + "-" + tRP.state_postal + "-" + tDistrict;
					} else {
					if(tRP.fips_county !== null) {
						if(tRP.fips_suffix !== null) {
							var tResult = year + "-" + +tRP.fips_state + tRP.fips_county + tRP.fips_suffix;
						} else {
							var tResult = year + "-" + +tRP.fips_state + tRP.fips_county;
						}
					} else {
						var tResult = year + "-" + tRP.name;
					}
					}

					thisResultData.reporting = Math.round(tRP.eevp) || 0;
					thisResultData.total_vote = tRP.total_votes || 0;
					thisResultData.expected_vote = tRP.total_expected_vote || 0;
					for(let k = 0; k < tRPCand.length; k++) {
						var tRPCandidate = tRPCand[k];
						var tRPCandID = tRPCand[k]['nyt_id']; var tRPCandVote = tRPCandidate.votes.total;
						thisResultData['cand' + (k+1) + '_firstname'] = candidates[tRPCandID].fN || "";
						thisResultData['cand' + (k+1) + '_lastname'] = candidates[tRPCandID].lN || "";
						thisResultData['cand' + (k+1) + '_party'] = candidates[tRPCandID].p
						if(candidates[tRPCandID].inc == true){
						thisResultData['incumbent'] = 'cand' + (k+1);}
						thisResultData['cand' + (k+1) + '_vote'] = tRPCandidate.votes.total;

						if(tRP.fips_county !== null && tRPCandidate.leader == true) {
							thisResultData.winner = candidates[tRPCandID].p
						}
						if(tRP.fips_county == null && tRace.uncontested == true && tRPCand.length == 1){
							thisResultData.winner = candidates[tRPCandID].p
						}
					}

					if(!thisResultData.winner && thisResultData.total_vote == 0) {thisResultData.winner = ""}
					if(tRP.fips_county == null) {
						if(tRace['outcome']['won'].length > 0) {
							thisResultData.winner = candidates[tRace['outcome']['won'][0]]['p']
						}
						if(tRace['outcome']['gained'] == true) {thisResultData.gain = 1}
						if(tRace['outcome']['advanced_to_runoff'].length > 0) {
							thisResultData.winner = "runoff"
						}
					}

					dataFile[tResult] = thisResultData;
				}
			}
			getResults();
			refreshFill();
		})
}

function set2020demWinners(){
	var allWinners = Object.keys(data_2020_dem_winner);
	for (let i = 0; i < allWinners.length; i++) {
		var thisCounty = allWinners[i].toString();
		var thisWinner = data_2020_dem_winner[thisCounty];
		data_president_dem["2020-" + thisCounty].winner = thisWinner;
	}
}

var presidentRepParties = {
	"trump":{"p":"r10","fN":"donald","lN":"trump"},
	"desantis":{"p":"r1","fN":"ron","lN":"desantis"},
	"haley":{"p":"r2","fN":"nikki","lN":"haley"},
	"ramaswamy":{"p":"r3","fN":"vivek","lN":"ramaswamy"},
	"christie":{"p":"r4","fN":"chris","lN":"christie"},
	"hutchinson":{"p":"r5","fN":"asa","lN":"hutchinson"},
	"uncommitted":{"p":"u","fN":"","lN":"uncommitted"}
};

var presidentDemParties = {
	"biden":{"p":"d","fN":"joe","lN":"biden"},
	"williamson":{"p":"d1","fN":"marianne","lN":"williamson"},
	"phillips":{"p":"d2","fN":"dean","lN":"phillips"},
	"uncommitted":{"p":"u","fN":"","lN":"uncommitted"}
};

function importDDHQ(url, year, update) {
	const generalElectionContests = {
		"President": data_president,
		"US House": data_house,
		"US Senate": data_sen,
		"Governor": data_gov,
		"Secretary of State": data_sos,
		"Supreme Court": data_supreme_court,
		"State Supreme Court": data_supreme_court,
		"Ballot Question": data_ballot_abortion,
		"Superior Court": data_superior_court,
		"Ballot Measure": data_ballot,
		"Lt Governor": data_gov_lt,
		"State House": data_state_house,
		"State Senate": data_state_senate,
		"Attorney General": data_attorney_general
	};

	const demElectionContests = { "President": data_president_dem, "U.S. Senate": data_sen_dem, "Governor": data_gov_dem, "Secretary of State": data_sos_dem, "Lt Governor": data_gov_lt_dem, "U.S. House": data_house_dem };
	const repElectionContests = { "President": data_president_rep, "U.S. Senate": data_sen_rep, "Governor": data_gov_rep, "Secretary of State": data_sos_rep, "Lt Governor": data_gov_lt_rep, "U.S. House": data_house_rep };

	fetch(`${url}?timestamp=` + Date.now())
		.then((response) => response.json())
		.then((data) => {
			if(data['test_data'] == "true"){return};
			var candidates = {}, tRaceCand = data.candidates;

			var electionOffice = data.office, electionType = data.name, electionParty = data.party;
			if(electionType == "General Election") {
				var dataFile = generalElectionContests[electionOffice];
			} else if(electionType == "Ballot Question") {
				var dataFile = generalElectionContests[electionType];
			} else if((electionType == "Caucus" || electionType == "Primary") && electionOffice == "President") {
				if(electionParty == "Democratic"){var dataFile = demElectionContests.President} else 
				if(electionParty == "Republican"){var dataFile = repElectionContests.President}
			} else {
				return
			}

			if(electionParty == "Democratic" && electionOffice == "President"){
				for(let i = 0; i < tRaceCand.length; i++) {
					var thisCand = tRaceCand[i], tCLN = tRaceCand[i].last_name.toLowerCase();
					candidates[thisCand.cand_id] = {};
					
					if (presidentDemParties.hasOwnProperty(tCLN)) {
						candidates[thisCand.cand_id].fN = presidentDemParties[tCLN]['fN'] || "";
						candidates[thisCand.cand_id].lN = presidentDemParties[tCLN]['lN'] || "";
						candidates[thisCand.cand_id].p = presidentDemParties[tCLN]['p']
					} else {
						candidates[thisCand.cand_id].fN = tRaceCand[i].first_name || "";
						candidates[thisCand.cand_id].lN = tRaceCand[i].last_name || "";
						candidates[thisCand.cand_id].p = "o"
					}
					if(thisCand.incumbent == true) {candidates[thisCand.cand_id].i = true;}
				}
			} else if(electionParty == "Republican" && electionOffice == "President"){
				for(let i = 0; i < tRaceCand.length; i++) {
					var thisCand = tRaceCand[i], tCLN = tRaceCand[i].last_name.toLowerCase();
					candidates[thisCand.cand_id] = {};
					
					if (presidentRepParties.hasOwnProperty(tCLN)) {
						candidates[thisCand.cand_id].fN = presidentRepParties[tCLN]['fN'] || "";
						candidates[thisCand.cand_id].lN = presidentRepParties[tCLN]['lN'] || "";
						candidates[thisCand.cand_id].p = presidentRepParties[tCLN]['p']
					} else {
						candidates[thisCand.cand_id].fN = tRaceCand[i].first_name || "";
						candidates[thisCand.cand_id].lN = tRaceCand[i].last_name || "";
						candidates[thisCand.cand_id].p = "o"
					}
					if(thisCand.incumbent == true) {candidates[thisCand.cand_id].i = true;}
				}
			} else {
				for(let i = 0; i < tRaceCand.length; i++) {
					var thisCand = tRaceCand[i], partyNumber = 0;
					var thisCandParty = tRaceCand[i].party_name.charAt(0).toLowerCase();
					if(thisCandParty == "r") { partyNumber = 1 }
					for(var cand in candidates) {
						if(candidates[cand].p == thisCandParty) {
							partyNumber++;
							var thisCandParty = tRaceCand[i].party_name.charAt(0)
								.toLowerCase() + partyNumber;
						}
					}
					candidates[thisCand.cand_id] = {};
					candidates[thisCand.cand_id].fN = tRaceCand[i].first_name.trim() || "";
					candidates[thisCand.cand_id].lN = tRaceCand[i].last_name.trim() || "";
					if(thisCand.last_name == "No" || thisCand.last_name == "Yes") {
						var thisCandParty = thisCand.last_name.toLowerCase()
					}

					if(thisCand.incumbent == true) {candidates[thisCand.cand_id].i = true;}
					candidates[thisCand.cand_id].p = thisCandParty;
				}
			}

			var stateWide = data.topline_results;

			var tRPCand = Object.keys(stateWide.votes);
			var thisResultData = {};
			var tResult = year + "-" + data.state_name;
			var thisWinner = stateWide.called_candidates[0];

			thisResultData.expected_vote = stateWide.estimated_votes.estimated_votes_mid || 0;
			var biggestVote = 0;
			var totalVote = Object.values(stateWide.votes).reduce((e, t) => e + t, 0)
			for(let k = 0; k < tRPCand.length; k++) {
				let tRPCandID = tRPCand[k], tRPCandVote = stateWide.votes[tRPCandID], c = "cand"+(k+1);
				thisResultData[c + '_firstname'] = candidates[tRPCandID].fN || "";
				thisResultData[c + '_lastname'] = candidates[tRPCandID].lN || "";
				thisResultData[c + '_party'] = candidates[tRPCandID].p
				thisResultData[c + '_vote'] = tRPCandVote;
				if(candidates[tRPCandID].i == true){thisResultData['incumbent'] = c}
			}

			if(thisWinner){thisResultData.winner = candidates[thisWinner].p} else {thisResultData.winner = ""}
			thisResultData.reporting = Math.round(totalVote*100 / stateWide.estimated_votes.estimated_votes_mid)
			if(thisResultData.reporting > 100){thisResultData.reporting = 100}
			thisResultData.total_vote = totalVote;

			if(data.expected_winners > 1){thisResultData['winnersCount'] = data.expected_winners}
/*			if(stateWide.call_times.length > 0){
				if(dataFile[tResult].callTimes == undefined){
					var o = {"ddhq":stateWide['call_times']}
				} else {
					var o = dataFile[tResult].callTimes;
					o.push({"ddhq":stateWide.call_times});
				}
				thisResultData['calls'] = o;
			}
*/

			if(data['advance_candidates'] == "true"){
					thisResultData.winner = "runoff";
				if(stateWide.advancing_candidates.length > 0){
					let o = [], i = stateWide['advancing_candidates'];
					i.forEach(a => {o.push(candidates[a].p)})
					thisResultData['advance_cand'] = o;
					thisResultData.winner = "runoff";
				}
			}

			thisResultData['source'] = "ddhq";
			thisResultData['last_updated'] = data.last_updated;
	
			dataFile[tResult] = thisResultData;

			var rUnits = data.counties;

			for(let j = 0; j < rUnits.length; j++) {
				var tRP = rUnits[j], tRPCand = Object.keys(tRP.votes), countyFips = +tRP.fips;
				var thisResultData = {}, tResult = year + "-" + countyFips;

				if(tRP.hasOwnProperty("vcus")){
					var vcus = tRP['vcus'];
					for(let l = 0; l < vcus.length; l++) {
						var thisVcu = vcus[l], tVcuCand = Object.keys(thisVcu.votes);
						var thisVcuData = {}, tVcuResult = year + "-" + countyFips + thisVcu.fips;
						var expectedVote = thisVcu.estimated_votes.estimated_votes_mid || 0;
						thisVcuData.expected_vote = expectedVote;

						var biggestVote = 0, leader = null;
						var totalVoteVcu = Object.values(thisVcu.votes).reduce((a,b) => a + b, 0)
						for(let k = 0; k < tVcuCand.length; k++) {
							let tRPCandidate = tVcuCand[k];
							let tRPCandID = tVcuCand[k];
							let tRPCandVote = thisVcu.votes[tRPCandID];
							thisVcuData['cand'+(k+1)+'_firstname'] = candidates[tRPCandID].fN || "";
							thisVcuData['cand'+(k+1)+'_lastname'] = candidates[tRPCandID].lN || "";
							thisVcuData['cand' + (k+1) + '_party'] = candidates[tRPCandID].p
							thisVcuData['cand' + (k+1) + '_vote'] = tRPCandVote;
						}

						if(expectedVote > 0){
							thisVcuData.reporting = Math.round(totalVoteVcu*100/expectedVote, 0) || "";
						}
						thisVcuData.total_vote = totalVoteVcu;
						dataFile[tVcuResult] = thisVcuData;
					}
				}
				thisResultData.expected_vote = tRP.estimated_votes.estimated_votes_mid || 0;
				var totalVote = Object.values(tRP.votes).reduce((a,b) => a + b, 0) || 0;

				for(let k = 0; k < tRPCand.length; k++) {
					var tRPCandidate = tRPCand[k], tRPCandID = tRPCand[k], tRPCandVote = tRP.votes[tRPCandID];
					thisResultData['cand' + (k+1) + '_firstname'] = candidates[tRPCandID].fN || "";
					thisResultData['cand' + (k+1) + '_lastname'] = candidates[tRPCandID].lN || "";
					thisResultData['cand' + (k+1) + '_party'] = candidates[tRPCandID].p
					thisResultData['cand' + (k+1) + '_vote'] = tRPCandVote;
				}
				thisResultData.reporting = Math.round(totalVote*100 / tRP.estimated_votes.estimated_votes_mid, 0);
				thisResultData.total_vote = totalVote;
				dataFile[tResult] = thisResultData;
			}

			if(update !== true){
				refreshFill();
				getResults();
			}
		})
}

function timeTestingALT(){

// const result = d3.zip(eT, tT).map(([a, b]) => b - a);

const eT = d3.timeFormat("%H:%M:%S")(Date.parse(new Date().toLocaleString("en-US", {timeZone: "America/New_York"}))).split(":").map(Number);

const tT = [17, 0, 0];

const time1 = eT[0] * 3600 + eT[1] * 60 + eT[2];
const time2 = tT[0] * 3600 + tT[1] * 60 + tT[2];

// Subtract the second array from the first array
let diff = time2 - time1;
if (diff < 0) {diff += 86400;}

const hour = Math.floor(diff / 3600);
const minute = Math.floor((diff % 3600) / 60);
const second = diff % 60;
const result = [hour, minute, second];

const now = new Date();
const startOfDay = d3.timeDay(new Date());
const milliseconds = now.getTime() - startOfDay.getTime();
console.log(milliseconds)


console.log(result);

}
function deleteDatabase(a){
	window.indexedDB.deleteDatabase(a);
}
function timeTesting() {



// Example usage

const nearestTime = findNearestTime();
console.log('The nearest time is: ' + nearestTime);

}

function findNextTime() {
	const timeArray = ["19:00", "19:30", "20:00", "20:30", "21:00", "22:00", "23:00", "0:00", "1:00"];
	const now = moment.tz('America/New_York');
	const array = timeArray.map(time => {
		var timeMoment = moment.tz(time, 'HH:mm', 'America/New_York');
		timeMoment.set({year: now.year(), month: now.month(), date: now.date()});
		if(timeMoment.isBefore(now)) {timeMoment.add(1, 'day')}
		return timeMoment;
	});

	const nextTime = array.reduce((a, b) => {return a.isBefore(b) ? a : b}).format('h:m'), a = nextTime.split(':');
	return +a[0] + +a[1]/60;
}

function createDatabase(){

	window.indexedDB.open("contests", 1);
	window.indexedDB.open("demographics", 1);
	window.indexedDB.open("election_context", 1);
	window.indexedDB.open("fundamentals", 1);

	let openRequest = window.indexedDB.open("results", 1);
	openRequest.onupgradeneeded = function() {
		let db = openRequest.result;
		let objectStores = ["president","president_by_cd","house","house_by_cd","senate"];
		objectStores.forEach((a) => {db.createObjectStore(a)});
		
	};
}

function createPresidentDB() {
	let openRequest = window.indexedDB.open("results", 1);
	openRequest.onsuccess = function() {
		let db = openRequest.result;
		let t = db.transaction(["president"], "readwrite");
		let oS = t.objectStore("president");

		var attrKeys = {"firstname": "fN", "lastname": "lN", "party": "p", "vote": "v", "total_vote" : "tV"};
		Object.keys(data_president).forEach(function(b) {
			var thisData = data_president[b], a = {};
			for(var k in thisData) {
				v = thisData[k];
				if(k.includes("cand")) {
					var p = k.split("_", 2), cand = p[0], attr = p[1], cN = cand.substr(-1);

					if(!a['c' + cN]) {a['c' + cN] = {}}
					attr = attrKeys[attr] || attr;
					a['c' + cN][attr] = v;
				} else {
					attr = attrKeys[attr] || attr;
					a[k] = v;
				}
			}

			oS.put(a,b);
		});

		t.oncomplete = function() {db.close()};
	};
}

function createIndexedDB() {
	let openRequest = window.indexedDB.open("results", 1);

	openRequest.onsuccess = function() {
		let db = openRequest.result;
		let t = db.transaction(["senate"], "readwrite");
		let oS = t.objectStore("senate");

		var attrKeys = {"firstname": "fN", "lastname": "lN", "party": "p", "vote": "v", "total_vote":"tV"}
		Object.keys(data_sen).forEach(function(b) {
			var thisData = data_sen[b], a = {};
			for(var k in thisData) {
				v = thisData[k];
				if(k.includes("cand")) {
					var p = k.split("_", 2), cand = p[0], attr = p[1], cN = cand.substr(-1);

					if(!a['c' + cN]) {a['c' + cN] = {}}
					attr = attrKeys[attr] || attr;
					a['c' + cN][attr] = v;
				} else {
					attr = attrKeys[attr] || attr;
					a[k] = v;
				}
			}

			oS.put(a,b);
		});

		t.oncomplete = function() {db.close()};
	};
}

function addResults(){}

function OLDgetOLDRecord(key) {
  let openRequest = window.indexedDB.open("results", 1);

  openRequest.onsuccess = function() {
    let db = openRequest.result;
    let transaction = db.transaction("senate", "readonly");
    let objectStore = transaction.objectStore("senate");
    let getRequest = objectStore.get(key);

    getRequest.onsuccess = function() {
      let data = getRequest.result;
      // Use the retrieved data here
      console.log(data);
    };

    getRequest.onerror = function() {
      console.error("Error getting data from the database");
    };

    transaction.oncomplete = function() {
      db.close();
    };
  };

  openRequest.onerror = function() {
    console.error("Error opening the database");
  };
}