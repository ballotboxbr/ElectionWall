var scriptTag = document.createElement("script");
scriptTag.setAttribute("src", "https://cdn.skypack.dev/d3-zoom@3");
document.body.appendChild(scriptTag);

const zoom = d3.zoom();

d3.geoMercatorUsa = function() {
	let scale = 794; let width = 800; let height = 800;
	let continental = d3.geoMercator().center([-95.75, 41]).translate([width * 0.5, height * 0.42]).scale(scale);
	let hawaii = d3.geoMercator().center([-157.25, 20.8]).translate([width * 0.3, height * 0.7]).scale(scale);
	let alaska = d3.geoMercator().center([-152.5, 65]).translate([width * 0.15, height * 0.7]).scale(scale * 0.2);
	let pr = d3.geoMercator().center([-98.58, 39.83]).translate([width * 0.15, height * 0.7]).scale(scale * 0);

	let projection = d3.geoTransform({
		point: function(x, y) {
			if (y < 50 && x < -140) {
				this.stream.point(...hawaii([x, y]));
			} else if (y > 50) {
				this.stream.point(...alaska([x, y]));
			} else {
				this.stream.point(...continental([x, y]));
			}
		}
	});
	return projection;
}

d3.json("assets/maps/state.topojson")
  .then(function(topo) {
    var geojson = topojson.feature(topo, topo.objects.states);
    var width = 800; var height = 800;
		var path = d3.geoPath(d3.geoMercatorUsa());
		var g = d3.select("#nationalMap")
			.append("g")
		var paths = g.selectAll("path")
			.data(geojson.features)
			.enter()
			.append("path")
			.attr("d", path)
			.attr("class", "state")
			.attr("id", function(d) {return d.properties.state})
			.attr("data-region", "s")
			.attr("data-state", function(d) {return d.properties.state})
			.attr("data-statefips", function(d) {return d.properties.statefips})
			.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation})
			.raise();

var gA = d3.select("#nationalMap").select("g");
gA.selectAll("*").each(function() {d3.select(gA.node().parentNode).append(() => this)});
gA.remove();

d3.json("assets/maps/county.topojson")
  .then(function(topo) {
    var geojson = topojson.feature(topo, topo.objects.cb_2021_us_county_500k);
    var width = 800; var height = 800;
		var path = d3.geoPath(d3.geoMercatorUsa());
		var g = d3.select("#nationalMap")
			.append("g")
		var paths = g.selectAll("path")
			.data(geojson.features)
			.enter()
			.append("path")
			.attr("d", path)
			.attr("class", "county")
			.attr("id", function(d) {return d.properties.id})
			.attr("data-region", "c")
			.attr("data-county", function(d) {return d.properties.county})
			.attr("data-countyname", function(d) {return d.properties.countyname})
			.attr("data-countytype", function(d) {return d.properties.countytype})
			.attr("data-state", function(d) {return d.properties.state})
			.attr("data-statefips", function(d) {return d.properties.statefips})
			.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation})
			.lower();
setTimeout(function(){setListeners()}, 10);
	});

var gA = d3.select("#nationalMap").select("g");
gA.selectAll("*").each(function() {d3.select(gA.node().parentNode).append(() => this)});

gA.remove();
			

	});

d3.json("assets/maps/district1.topojson")
  .then(function(topo) {
    var geojson = topojson.feature(topo, topo.objects.districts1);
    var width = 800; var height = 800;
		var path = d3.geoPath(d3.geoMercatorUsa());

		var g = d3.select("#nationalMap")
			.append("g")
		var paths = g.selectAll("path")
			.data(geojson.features)
			.enter()
			.append("path")
			.attr("d", path)
			.attr("class", function(d) {return d.properties.cd})
			.attr("id", function(d) {return d.properties.id})
			.attr("data-district", function(d) {return d.properties.district})
			.attr("data-districtnumber", function(d) {return d.properties.districtnumber})
			.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge})
			.attr("data-state", function(d) {return d.properties.state})
			.attr("data-statefips", function(d) {return d.properties.statefips})
			.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation})
			.exit();
	});

var gA = d3.select("#nationalMap").select("g");
gA.selectAll("*").each(function() {d3.select(gA.node().parentNode).append(() => this)});
gA.remove();

function generateDistrictBoxes() {
	var parentDiv = document.getElementById('resultsBoxHouseDistricts');
	while (parentDiv.firstChild) {parentDiv.removeChild(parentDiv.firstChild)}

	var yrShort = dataElement.getAttribute("button-year").slice(-2).toString();
	var otherYearDistricts = document.querySelectorAll(`.cd:not(.cd${yrShort})`);
	for (let i = 0; i < otherYearDistricts.length; i++) {
		var district = otherYearDistricts[i].getAttribute("data-district");
		otherYearDistricts[i].id = yrShort + "_" + district;
		otherYearDistricts[i].style.display = "none";
	}

	var yrShort = dataElement.getAttribute("button-year").slice(-2).toString();
	var cdDistricts = document.querySelectorAll(`.cd.cd${yrShort}`);
	var cdThisYear = Array.from(cdDistricts).map(element => element.id);

	for (let i = 0; i < cdThisYear.length; i++) {
		let thisCD = cdThisYear[i];
		if (thisCD.includes("_")) {
			thisCD = thisCD.slice(thisCD.indexOf("_") + 1);
		}

		var cdSplit = thisCD.split("-");
		if(cdSplit[0] == "DC"){continue}
		if(cdSplit.length == 0){continue}
		var textContent = cdSplit[0] + " <hd>" + cdSplit[1] + "</hd>";
		var newElement = document.createElement('span');
		newElement.setAttribute('data-district-state', abbreviationState[cdSplit[0]]);
		newElement.setAttribute('data-district', thisCD);
		newElement.setAttribute('id', "box-" + thisCD);
		newElement.innerHTML = textContent;
		parentDiv.appendChild(newElement);
		newElement.classList = "districtBox";

//		var order = (abbreviationFIPS[cdSplit[0]]).toString() + cdSplit[1].toString();
//		newElement.style.order = order;
	}

	var clicked = dataElement.getAttribute("last-clicked");
	var stateClicked = d3.select("#data").attr("data-stateclick");
	if (stateClicked && stateClicked !== "United States") {
		if (clicked.includes("-") == false) {
			nationalMapElement.appendChild(document.getElementById(stateClicked))
		}
		var hideDistrictBox = document.querySelectorAll(`.districtBox:not([data-district-state="${stateClicked}"])`);
		for (let i = 0; i < hideDistrictBox.length; i++) {
			hideDistrictBox[i].style.display = "none";
		}
		var showDistrictBox = document.querySelectorAll(`.districtBox[data-district-state="${stateClicked}"]`);
		for (let i = 0; i < showDistrictBox.length; i++) {
			showDistrictBox[i].style.display = "initial";
		}
	}

	const districtBoxes = document.getElementsByClassName("districtBox");
	for (let i = 0; i < districtBoxes.length; i++) {
		const box = districtBoxes[i];
		box.addEventListener('click', (event) => {
			const district = box.getAttribute('id').substring(4, 9);
			clickDistrictBox(district);
		});
	}
}

function createHouse(){
var districtFiles = ["assets/maps/district1.topojson", "assets/maps/district2.topojson", "assets/maps/district3.topojson", "assets/maps/district4.topojson","assets/maps/district5.topojson","assets/maps/district6.topojson","assets/maps/district7.topojson","assets/maps/district8.topojson","assets/maps/district9.topojson","assets/maps/district10.topojson"];


districtFiles.forEach(function(url) {
	var objectName = url.split("/").pop().split(".")[0];

	d3.json(url)
		.then(function(topo) {
			console.log("BEGINNING MAP " + objectName);
			var geojson = topojson.feature(topo, topo.objects[objectName]);
			var path = d3.geoPath(d3.geoMercatorUsa());
		
			var g = d3.select("#nationalMap")
				.append("g");
			var paths = g.selectAll("path")
				.data(geojson.features)
				.enter()
				.append("path")
				.attr("d", path)
				.on("click", function(event) {clickedFunction(event.target)})
				.attr("class", function(d) {return d.properties.cd})
				.attr("id", function(d) {return d.properties.district})
				.attr("data-district", function(d) {return d.properties.district})
				.attr("data-districtnumber", function(d) {return d.properties.districtnumber})
				.attr("data-districtatlarge", function(d) {return d.properties.districtatlarge})
				.attr("data-state", function(d) {return d.properties.state})
				.attr("data-statefips", function(d) {return d.properties.statefips})
				.attr("data-stateabbreviation", function(d) {return d.properties.stateabbreviation});


			var gA = d3.select("#nationalMap").select("g");
			gA.selectAll("*").each(function() {d3.select(gA.node().parentNode).append(() => this)});
			gA.remove();
			console.log("SUCCESS " + objectName);
		});
});
}
setTimeout(function(){setHouseSVG(); setListeners()}, 250);